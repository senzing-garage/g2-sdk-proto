// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: g2product.proto

package g2product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// G2ProductClient is the client API for G2Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type G2ProductClient interface {
	Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyResponse, error)
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	License(ctx context.Context, in *LicenseRequest, opts ...grpc.CallOption) (*LicenseResponse, error)
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type g2ProductClient struct {
	cc grpc.ClientConnInterface
}

func NewG2ProductClient(cc grpc.ClientConnInterface) G2ProductClient {
	return &g2ProductClient{cc}
}

func (c *g2ProductClient) Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyResponse, error) {
	out := new(DestroyResponse)
	err := c.cc.Invoke(ctx, "/g2product.G2Product/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2ProductClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, "/g2product.G2Product/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2ProductClient) License(ctx context.Context, in *LicenseRequest, opts ...grpc.CallOption) (*LicenseResponse, error) {
	out := new(LicenseResponse)
	err := c.cc.Invoke(ctx, "/g2product.G2Product/License", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2ProductClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/g2product.G2Product/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// G2ProductServer is the server API for G2Product service.
// All implementations must embed UnimplementedG2ProductServer
// for forward compatibility
type G2ProductServer interface {
	Destroy(context.Context, *DestroyRequest) (*DestroyResponse, error)
	Init(context.Context, *InitRequest) (*InitResponse, error)
	License(context.Context, *LicenseRequest) (*LicenseResponse, error)
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	mustEmbedUnimplementedG2ProductServer()
}

// UnimplementedG2ProductServer must be embedded to have forward compatible implementations.
type UnimplementedG2ProductServer struct {
}

func (UnimplementedG2ProductServer) Destroy(context.Context, *DestroyRequest) (*DestroyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedG2ProductServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedG2ProductServer) License(context.Context, *LicenseRequest) (*LicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method License not implemented")
}
func (UnimplementedG2ProductServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedG2ProductServer) mustEmbedUnimplementedG2ProductServer() {}

// UnsafeG2ProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to G2ProductServer will
// result in compilation errors.
type UnsafeG2ProductServer interface {
	mustEmbedUnimplementedG2ProductServer()
}

func RegisterG2ProductServer(s grpc.ServiceRegistrar, srv G2ProductServer) {
	s.RegisterService(&G2Product_ServiceDesc, srv)
}

func _G2Product_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2ProductServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2product.G2Product/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2ProductServer).Destroy(ctx, req.(*DestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Product_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2ProductServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2product.G2Product/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2ProductServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Product_License_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2ProductServer).License(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2product.G2Product/License",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2ProductServer).License(ctx, req.(*LicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Product_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2ProductServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2product.G2Product/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2ProductServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// G2Product_ServiceDesc is the grpc.ServiceDesc for G2Product service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var G2Product_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "g2product.G2Product",
	HandlerType: (*G2ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Destroy",
			Handler:    _G2Product_Destroy_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _G2Product_Init_Handler,
		},
		{
			MethodName: "License",
			Handler:    _G2Product_License_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _G2Product_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "g2product.proto",
}
