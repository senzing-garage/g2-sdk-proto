// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: szproduct.proto

package szproduct

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SzProductClient is the client API for SzProduct service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SzProductClient interface {
	GetLicense(ctx context.Context, in *GetLicenseRequest, opts ...grpc.CallOption) (*GetLicenseResponse, error)
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
}

type szProductClient struct {
	cc grpc.ClientConnInterface
}

func NewSzProductClient(cc grpc.ClientConnInterface) SzProductClient {
	return &szProductClient{cc}
}

func (c *szProductClient) GetLicense(ctx context.Context, in *GetLicenseRequest, opts ...grpc.CallOption) (*GetLicenseResponse, error) {
	out := new(GetLicenseResponse)
	err := c.cc.Invoke(ctx, "/szproduct.SzProduct/GetLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szProductClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/szproduct.SzProduct/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SzProductServer is the server API for SzProduct service.
// All implementations must embed UnimplementedSzProductServer
// for forward compatibility
type SzProductServer interface {
	GetLicense(context.Context, *GetLicenseRequest) (*GetLicenseResponse, error)
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	mustEmbedUnimplementedSzProductServer()
}

// UnimplementedSzProductServer must be embedded to have forward compatible implementations.
type UnimplementedSzProductServer struct {
}

func (UnimplementedSzProductServer) GetLicense(context.Context, *GetLicenseRequest) (*GetLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLicense not implemented")
}
func (UnimplementedSzProductServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedSzProductServer) mustEmbedUnimplementedSzProductServer() {}

// UnsafeSzProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SzProductServer will
// result in compilation errors.
type UnsafeSzProductServer interface {
	mustEmbedUnimplementedSzProductServer()
}

func RegisterSzProductServer(s grpc.ServiceRegistrar, srv SzProductServer) {
	s.RegisterService(&SzProduct_ServiceDesc, srv)
}

func _SzProduct_GetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzProductServer).GetLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szproduct.SzProduct/GetLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzProductServer).GetLicense(ctx, req.(*GetLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzProduct_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzProductServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szproduct.SzProduct/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzProductServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SzProduct_ServiceDesc is the grpc.ServiceDesc for SzProduct service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SzProduct_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "szproduct.SzProduct",
	HandlerType: (*SzProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLicense",
			Handler:    _SzProduct_GetLicense_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _SzProduct_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "szproduct.proto",
}
