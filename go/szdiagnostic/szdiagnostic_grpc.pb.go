// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: szdiagnostic.proto

package szdiagnostic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SzDiagnosticClient is the client API for SzDiagnostic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SzDiagnosticClient interface {
	CheckDatabasePerformance(ctx context.Context, in *CheckDatabasePerformanceRequest, opts ...grpc.CallOption) (*CheckDatabasePerformanceResponse, error)
	PurgeRepository(ctx context.Context, in *PurgeRepositoryRequest, opts ...grpc.CallOption) (*PurgeRepositoryResponse, error)
	Reinitialize(ctx context.Context, in *ReinitializeRequest, opts ...grpc.CallOption) (*ReinitializeResponse, error)
}

type szDiagnosticClient struct {
	cc grpc.ClientConnInterface
}

func NewSzDiagnosticClient(cc grpc.ClientConnInterface) SzDiagnosticClient {
	return &szDiagnosticClient{cc}
}

func (c *szDiagnosticClient) CheckDatabasePerformance(ctx context.Context, in *CheckDatabasePerformanceRequest, opts ...grpc.CallOption) (*CheckDatabasePerformanceResponse, error) {
	out := new(CheckDatabasePerformanceResponse)
	err := c.cc.Invoke(ctx, "/szdiagnostic.SzDiagnostic/CheckDatabasePerformance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szDiagnosticClient) PurgeRepository(ctx context.Context, in *PurgeRepositoryRequest, opts ...grpc.CallOption) (*PurgeRepositoryResponse, error) {
	out := new(PurgeRepositoryResponse)
	err := c.cc.Invoke(ctx, "/szdiagnostic.SzDiagnostic/PurgeRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szDiagnosticClient) Reinitialize(ctx context.Context, in *ReinitializeRequest, opts ...grpc.CallOption) (*ReinitializeResponse, error) {
	out := new(ReinitializeResponse)
	err := c.cc.Invoke(ctx, "/szdiagnostic.SzDiagnostic/Reinitialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SzDiagnosticServer is the server API for SzDiagnostic service.
// All implementations must embed UnimplementedSzDiagnosticServer
// for forward compatibility
type SzDiagnosticServer interface {
	CheckDatabasePerformance(context.Context, *CheckDatabasePerformanceRequest) (*CheckDatabasePerformanceResponse, error)
	PurgeRepository(context.Context, *PurgeRepositoryRequest) (*PurgeRepositoryResponse, error)
	Reinitialize(context.Context, *ReinitializeRequest) (*ReinitializeResponse, error)
	mustEmbedUnimplementedSzDiagnosticServer()
}

// UnimplementedSzDiagnosticServer must be embedded to have forward compatible implementations.
type UnimplementedSzDiagnosticServer struct {
}

func (UnimplementedSzDiagnosticServer) CheckDatabasePerformance(context.Context, *CheckDatabasePerformanceRequest) (*CheckDatabasePerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDatabasePerformance not implemented")
}
func (UnimplementedSzDiagnosticServer) PurgeRepository(context.Context, *PurgeRepositoryRequest) (*PurgeRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeRepository not implemented")
}
func (UnimplementedSzDiagnosticServer) Reinitialize(context.Context, *ReinitializeRequest) (*ReinitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reinitialize not implemented")
}
func (UnimplementedSzDiagnosticServer) mustEmbedUnimplementedSzDiagnosticServer() {}

// UnsafeSzDiagnosticServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SzDiagnosticServer will
// result in compilation errors.
type UnsafeSzDiagnosticServer interface {
	mustEmbedUnimplementedSzDiagnosticServer()
}

func RegisterSzDiagnosticServer(s grpc.ServiceRegistrar, srv SzDiagnosticServer) {
	s.RegisterService(&SzDiagnostic_ServiceDesc, srv)
}

func _SzDiagnostic_CheckDatabasePerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDatabasePerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzDiagnosticServer).CheckDatabasePerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szdiagnostic.SzDiagnostic/CheckDatabasePerformance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzDiagnosticServer).CheckDatabasePerformance(ctx, req.(*CheckDatabasePerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzDiagnostic_PurgeRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzDiagnosticServer).PurgeRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szdiagnostic.SzDiagnostic/PurgeRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzDiagnosticServer).PurgeRepository(ctx, req.(*PurgeRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzDiagnostic_Reinitialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReinitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzDiagnosticServer).Reinitialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szdiagnostic.SzDiagnostic/Reinitialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzDiagnosticServer).Reinitialize(ctx, req.(*ReinitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SzDiagnostic_ServiceDesc is the grpc.ServiceDesc for SzDiagnostic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SzDiagnostic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "szdiagnostic.SzDiagnostic",
	HandlerType: (*SzDiagnosticServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckDatabasePerformance",
			Handler:    _SzDiagnostic_CheckDatabasePerformance_Handler,
		},
		{
			MethodName: "PurgeRepository",
			Handler:    _SzDiagnostic_PurgeRepository_Handler,
		},
		{
			MethodName: "Reinitialize",
			Handler:    _SzDiagnostic_Reinitialize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "szdiagnostic.proto",
}
