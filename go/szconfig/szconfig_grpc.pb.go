// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: szconfig.proto

package szconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SzConfigClient is the client API for SzConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SzConfigClient interface {
	AddDataSource(ctx context.Context, in *AddDataSourceRequest, opts ...grpc.CallOption) (*AddDataSourceResponse, error)
	CloseConfig(ctx context.Context, in *CloseConfigRequest, opts ...grpc.CallOption) (*CloseConfigResponse, error)
	CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*CreateConfigResponse, error)
	DeleteDataSource(ctx context.Context, in *DeleteDataSourceRequest, opts ...grpc.CallOption) (*DeleteDataSourceResponse, error)
	ExportConfig(ctx context.Context, in *ExportConfigRequest, opts ...grpc.CallOption) (*ExportConfigResponse, error)
	GetDataSources(ctx context.Context, in *GetDataSourcesRequest, opts ...grpc.CallOption) (*GetDataSourcesResponse, error)
	ImportConfig(ctx context.Context, in *ImportConfigRequest, opts ...grpc.CallOption) (*ImportConfigResponse, error)
}

type szConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewSzConfigClient(cc grpc.ClientConnInterface) SzConfigClient {
	return &szConfigClient{cc}
}

func (c *szConfigClient) AddDataSource(ctx context.Context, in *AddDataSourceRequest, opts ...grpc.CallOption) (*AddDataSourceResponse, error) {
	out := new(AddDataSourceResponse)
	err := c.cc.Invoke(ctx, "/szconfig.SzConfig/AddDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigClient) CloseConfig(ctx context.Context, in *CloseConfigRequest, opts ...grpc.CallOption) (*CloseConfigResponse, error) {
	out := new(CloseConfigResponse)
	err := c.cc.Invoke(ctx, "/szconfig.SzConfig/CloseConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigClient) CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*CreateConfigResponse, error) {
	out := new(CreateConfigResponse)
	err := c.cc.Invoke(ctx, "/szconfig.SzConfig/CreateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigClient) DeleteDataSource(ctx context.Context, in *DeleteDataSourceRequest, opts ...grpc.CallOption) (*DeleteDataSourceResponse, error) {
	out := new(DeleteDataSourceResponse)
	err := c.cc.Invoke(ctx, "/szconfig.SzConfig/DeleteDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigClient) ExportConfig(ctx context.Context, in *ExportConfigRequest, opts ...grpc.CallOption) (*ExportConfigResponse, error) {
	out := new(ExportConfigResponse)
	err := c.cc.Invoke(ctx, "/szconfig.SzConfig/ExportConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigClient) GetDataSources(ctx context.Context, in *GetDataSourcesRequest, opts ...grpc.CallOption) (*GetDataSourcesResponse, error) {
	out := new(GetDataSourcesResponse)
	err := c.cc.Invoke(ctx, "/szconfig.SzConfig/GetDataSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigClient) ImportConfig(ctx context.Context, in *ImportConfigRequest, opts ...grpc.CallOption) (*ImportConfigResponse, error) {
	out := new(ImportConfigResponse)
	err := c.cc.Invoke(ctx, "/szconfig.SzConfig/ImportConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SzConfigServer is the server API for SzConfig service.
// All implementations must embed UnimplementedSzConfigServer
// for forward compatibility
type SzConfigServer interface {
	AddDataSource(context.Context, *AddDataSourceRequest) (*AddDataSourceResponse, error)
	CloseConfig(context.Context, *CloseConfigRequest) (*CloseConfigResponse, error)
	CreateConfig(context.Context, *CreateConfigRequest) (*CreateConfigResponse, error)
	DeleteDataSource(context.Context, *DeleteDataSourceRequest) (*DeleteDataSourceResponse, error)
	ExportConfig(context.Context, *ExportConfigRequest) (*ExportConfigResponse, error)
	GetDataSources(context.Context, *GetDataSourcesRequest) (*GetDataSourcesResponse, error)
	ImportConfig(context.Context, *ImportConfigRequest) (*ImportConfigResponse, error)
	mustEmbedUnimplementedSzConfigServer()
}

// UnimplementedSzConfigServer must be embedded to have forward compatible implementations.
type UnimplementedSzConfigServer struct {
}

func (UnimplementedSzConfigServer) AddDataSource(context.Context, *AddDataSourceRequest) (*AddDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDataSource not implemented")
}
func (UnimplementedSzConfigServer) CloseConfig(context.Context, *CloseConfigRequest) (*CloseConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseConfig not implemented")
}
func (UnimplementedSzConfigServer) CreateConfig(context.Context, *CreateConfigRequest) (*CreateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfig not implemented")
}
func (UnimplementedSzConfigServer) DeleteDataSource(context.Context, *DeleteDataSourceRequest) (*DeleteDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataSource not implemented")
}
func (UnimplementedSzConfigServer) ExportConfig(context.Context, *ExportConfigRequest) (*ExportConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportConfig not implemented")
}
func (UnimplementedSzConfigServer) GetDataSources(context.Context, *GetDataSourcesRequest) (*GetDataSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSources not implemented")
}
func (UnimplementedSzConfigServer) ImportConfig(context.Context, *ImportConfigRequest) (*ImportConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportConfig not implemented")
}
func (UnimplementedSzConfigServer) mustEmbedUnimplementedSzConfigServer() {}

// UnsafeSzConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SzConfigServer will
// result in compilation errors.
type UnsafeSzConfigServer interface {
	mustEmbedUnimplementedSzConfigServer()
}

func RegisterSzConfigServer(s grpc.ServiceRegistrar, srv SzConfigServer) {
	s.RegisterService(&SzConfig_ServiceDesc, srv)
}

func _SzConfig_AddDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigServer).AddDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szconfig.SzConfig/AddDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigServer).AddDataSource(ctx, req.(*AddDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfig_CloseConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigServer).CloseConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szconfig.SzConfig/CloseConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigServer).CloseConfig(ctx, req.(*CloseConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfig_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szconfig.SzConfig/CreateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigServer).CreateConfig(ctx, req.(*CreateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfig_DeleteDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigServer).DeleteDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szconfig.SzConfig/DeleteDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigServer).DeleteDataSource(ctx, req.(*DeleteDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfig_ExportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigServer).ExportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szconfig.SzConfig/ExportConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigServer).ExportConfig(ctx, req.(*ExportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfig_GetDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigServer).GetDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szconfig.SzConfig/GetDataSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigServer).GetDataSources(ctx, req.(*GetDataSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfig_ImportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigServer).ImportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szconfig.SzConfig/ImportConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigServer).ImportConfig(ctx, req.(*ImportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SzConfig_ServiceDesc is the grpc.ServiceDesc for SzConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SzConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "szconfig.SzConfig",
	HandlerType: (*SzConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDataSource",
			Handler:    _SzConfig_AddDataSource_Handler,
		},
		{
			MethodName: "CloseConfig",
			Handler:    _SzConfig_CloseConfig_Handler,
		},
		{
			MethodName: "CreateConfig",
			Handler:    _SzConfig_CreateConfig_Handler,
		},
		{
			MethodName: "DeleteDataSource",
			Handler:    _SzConfig_DeleteDataSource_Handler,
		},
		{
			MethodName: "ExportConfig",
			Handler:    _SzConfig_ExportConfig_Handler,
		},
		{
			MethodName: "GetDataSources",
			Handler:    _SzConfig_GetDataSources_Handler,
		},
		{
			MethodName: "ImportConfig",
			Handler:    _SzConfig_ImportConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "szconfig.proto",
}
