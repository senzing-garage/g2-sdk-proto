// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: g2diagnostic.proto

package g2diagnostic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// G2DiagnosticClient is the client API for G2Diagnostic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type G2DiagnosticClient interface {
	CheckDBPerf(ctx context.Context, in *CheckDBPerfRequest, opts ...grpc.CallOption) (*CheckDBPerfResponse, error)
	CloseEntityListBySize(ctx context.Context, in *CloseEntityListBySizeRequest, opts ...grpc.CallOption) (*CloseEntityListBySizeResponse, error)
	Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyResponse, error)
	FetchNextEntityBySize(ctx context.Context, in *FetchNextEntityBySizeRequest, opts ...grpc.CallOption) (*FetchNextEntityBySizeResponse, error)
	FindEntitiesByFeatureIDs(ctx context.Context, in *FindEntitiesByFeatureIDsRequest, opts ...grpc.CallOption) (*FindEntitiesByFeatureIDsResponse, error)
	GetAvailableMemory(ctx context.Context, in *GetAvailableMemoryRequest, opts ...grpc.CallOption) (*GetAvailableMemoryResponse, error)
	GetDataSourceCounts(ctx context.Context, in *GetDataSourceCountsRequest, opts ...grpc.CallOption) (*GetDataSourceCountsResponse, error)
	GetDBInfo(ctx context.Context, in *GetDBInfoRequest, opts ...grpc.CallOption) (*GetDBInfoResponse, error)
	GetEntityDetails(ctx context.Context, in *GetEntityDetailsRequest, opts ...grpc.CallOption) (*GetEntityDetailsResponse, error)
	GetEntityListBySize(ctx context.Context, in *GetEntityListBySizeRequest, opts ...grpc.CallOption) (*GetEntityListBySizeResponse, error)
	GetEntityResume(ctx context.Context, in *GetEntityResumeRequest, opts ...grpc.CallOption) (*GetEntityResumeResponse, error)
	GetEntitySizeBreakdown(ctx context.Context, in *GetEntitySizeBreakdownRequest, opts ...grpc.CallOption) (*GetEntitySizeBreakdownResponse, error)
	GetFeature(ctx context.Context, in *GetFeatureRequest, opts ...grpc.CallOption) (*GetFeatureResponse, error)
	GetGenericFeatures(ctx context.Context, in *GetGenericFeaturesRequest, opts ...grpc.CallOption) (*GetGenericFeaturesResponse, error)
	GetLogicalCores(ctx context.Context, in *GetLogicalCoresRequest, opts ...grpc.CallOption) (*GetLogicalCoresResponse, error)
	GetMappingStatistics(ctx context.Context, in *GetMappingStatisticsRequest, opts ...grpc.CallOption) (*GetMappingStatisticsResponse, error)
	GetPhysicalCores(ctx context.Context, in *GetPhysicalCoresRequest, opts ...grpc.CallOption) (*GetPhysicalCoresResponse, error)
	GetRelationshipDetails(ctx context.Context, in *GetRelationshipDetailsRequest, opts ...grpc.CallOption) (*GetRelationshipDetailsResponse, error)
	GetResolutionStatistics(ctx context.Context, in *GetResolutionStatisticsRequest, opts ...grpc.CallOption) (*GetResolutionStatisticsResponse, error)
	GetTotalSystemMemory(ctx context.Context, in *GetTotalSystemMemoryRequest, opts ...grpc.CallOption) (*GetTotalSystemMemoryResponse, error)
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	InitWithConfigID(ctx context.Context, in *InitWithConfigIDRequest, opts ...grpc.CallOption) (*InitWithConfigIDResponse, error)
	Reinit(ctx context.Context, in *ReinitRequest, opts ...grpc.CallOption) (*ReinitResponse, error)
	StreamEntityListBySize(ctx context.Context, in *StreamEntityListBySizeRequest, opts ...grpc.CallOption) (G2Diagnostic_StreamEntityListBySizeClient, error)
}

type g2DiagnosticClient struct {
	cc grpc.ClientConnInterface
}

func NewG2DiagnosticClient(cc grpc.ClientConnInterface) G2DiagnosticClient {
	return &g2DiagnosticClient{cc}
}

func (c *g2DiagnosticClient) CheckDBPerf(ctx context.Context, in *CheckDBPerfRequest, opts ...grpc.CallOption) (*CheckDBPerfResponse, error) {
	out := new(CheckDBPerfResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/CheckDBPerf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) CloseEntityListBySize(ctx context.Context, in *CloseEntityListBySizeRequest, opts ...grpc.CallOption) (*CloseEntityListBySizeResponse, error) {
	out := new(CloseEntityListBySizeResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/CloseEntityListBySize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyResponse, error) {
	out := new(DestroyResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) FetchNextEntityBySize(ctx context.Context, in *FetchNextEntityBySizeRequest, opts ...grpc.CallOption) (*FetchNextEntityBySizeResponse, error) {
	out := new(FetchNextEntityBySizeResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/FetchNextEntityBySize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) FindEntitiesByFeatureIDs(ctx context.Context, in *FindEntitiesByFeatureIDsRequest, opts ...grpc.CallOption) (*FindEntitiesByFeatureIDsResponse, error) {
	out := new(FindEntitiesByFeatureIDsResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/FindEntitiesByFeatureIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) GetAvailableMemory(ctx context.Context, in *GetAvailableMemoryRequest, opts ...grpc.CallOption) (*GetAvailableMemoryResponse, error) {
	out := new(GetAvailableMemoryResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/GetAvailableMemory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) GetDataSourceCounts(ctx context.Context, in *GetDataSourceCountsRequest, opts ...grpc.CallOption) (*GetDataSourceCountsResponse, error) {
	out := new(GetDataSourceCountsResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/GetDataSourceCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) GetDBInfo(ctx context.Context, in *GetDBInfoRequest, opts ...grpc.CallOption) (*GetDBInfoResponse, error) {
	out := new(GetDBInfoResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/GetDBInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) GetEntityDetails(ctx context.Context, in *GetEntityDetailsRequest, opts ...grpc.CallOption) (*GetEntityDetailsResponse, error) {
	out := new(GetEntityDetailsResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/GetEntityDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) GetEntityListBySize(ctx context.Context, in *GetEntityListBySizeRequest, opts ...grpc.CallOption) (*GetEntityListBySizeResponse, error) {
	out := new(GetEntityListBySizeResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/GetEntityListBySize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) GetEntityResume(ctx context.Context, in *GetEntityResumeRequest, opts ...grpc.CallOption) (*GetEntityResumeResponse, error) {
	out := new(GetEntityResumeResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/GetEntityResume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) GetEntitySizeBreakdown(ctx context.Context, in *GetEntitySizeBreakdownRequest, opts ...grpc.CallOption) (*GetEntitySizeBreakdownResponse, error) {
	out := new(GetEntitySizeBreakdownResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/GetEntitySizeBreakdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) GetFeature(ctx context.Context, in *GetFeatureRequest, opts ...grpc.CallOption) (*GetFeatureResponse, error) {
	out := new(GetFeatureResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/GetFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) GetGenericFeatures(ctx context.Context, in *GetGenericFeaturesRequest, opts ...grpc.CallOption) (*GetGenericFeaturesResponse, error) {
	out := new(GetGenericFeaturesResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/GetGenericFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) GetLogicalCores(ctx context.Context, in *GetLogicalCoresRequest, opts ...grpc.CallOption) (*GetLogicalCoresResponse, error) {
	out := new(GetLogicalCoresResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/GetLogicalCores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) GetMappingStatistics(ctx context.Context, in *GetMappingStatisticsRequest, opts ...grpc.CallOption) (*GetMappingStatisticsResponse, error) {
	out := new(GetMappingStatisticsResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/GetMappingStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) GetPhysicalCores(ctx context.Context, in *GetPhysicalCoresRequest, opts ...grpc.CallOption) (*GetPhysicalCoresResponse, error) {
	out := new(GetPhysicalCoresResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/GetPhysicalCores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) GetRelationshipDetails(ctx context.Context, in *GetRelationshipDetailsRequest, opts ...grpc.CallOption) (*GetRelationshipDetailsResponse, error) {
	out := new(GetRelationshipDetailsResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/GetRelationshipDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) GetResolutionStatistics(ctx context.Context, in *GetResolutionStatisticsRequest, opts ...grpc.CallOption) (*GetResolutionStatisticsResponse, error) {
	out := new(GetResolutionStatisticsResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/GetResolutionStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) GetTotalSystemMemory(ctx context.Context, in *GetTotalSystemMemoryRequest, opts ...grpc.CallOption) (*GetTotalSystemMemoryResponse, error) {
	out := new(GetTotalSystemMemoryResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/GetTotalSystemMemory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) InitWithConfigID(ctx context.Context, in *InitWithConfigIDRequest, opts ...grpc.CallOption) (*InitWithConfigIDResponse, error) {
	out := new(InitWithConfigIDResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/InitWithConfigID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) Reinit(ctx context.Context, in *ReinitRequest, opts ...grpc.CallOption) (*ReinitResponse, error) {
	out := new(ReinitResponse)
	err := c.cc.Invoke(ctx, "/g2diagnostic.G2Diagnostic/Reinit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2DiagnosticClient) StreamEntityListBySize(ctx context.Context, in *StreamEntityListBySizeRequest, opts ...grpc.CallOption) (G2Diagnostic_StreamEntityListBySizeClient, error) {
	stream, err := c.cc.NewStream(ctx, &G2Diagnostic_ServiceDesc.Streams[0], "/g2diagnostic.G2Diagnostic/StreamEntityListBySize", opts...)
	if err != nil {
		return nil, err
	}
	x := &g2DiagnosticStreamEntityListBySizeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type G2Diagnostic_StreamEntityListBySizeClient interface {
	Recv() (*StreamEntityListBySizeResponse, error)
	grpc.ClientStream
}

type g2DiagnosticStreamEntityListBySizeClient struct {
	grpc.ClientStream
}

func (x *g2DiagnosticStreamEntityListBySizeClient) Recv() (*StreamEntityListBySizeResponse, error) {
	m := new(StreamEntityListBySizeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// G2DiagnosticServer is the server API for G2Diagnostic service.
// All implementations must embed UnimplementedG2DiagnosticServer
// for forward compatibility
type G2DiagnosticServer interface {
	CheckDBPerf(context.Context, *CheckDBPerfRequest) (*CheckDBPerfResponse, error)
	CloseEntityListBySize(context.Context, *CloseEntityListBySizeRequest) (*CloseEntityListBySizeResponse, error)
	Destroy(context.Context, *DestroyRequest) (*DestroyResponse, error)
	FetchNextEntityBySize(context.Context, *FetchNextEntityBySizeRequest) (*FetchNextEntityBySizeResponse, error)
	FindEntitiesByFeatureIDs(context.Context, *FindEntitiesByFeatureIDsRequest) (*FindEntitiesByFeatureIDsResponse, error)
	GetAvailableMemory(context.Context, *GetAvailableMemoryRequest) (*GetAvailableMemoryResponse, error)
	GetDataSourceCounts(context.Context, *GetDataSourceCountsRequest) (*GetDataSourceCountsResponse, error)
	GetDBInfo(context.Context, *GetDBInfoRequest) (*GetDBInfoResponse, error)
	GetEntityDetails(context.Context, *GetEntityDetailsRequest) (*GetEntityDetailsResponse, error)
	GetEntityListBySize(context.Context, *GetEntityListBySizeRequest) (*GetEntityListBySizeResponse, error)
	GetEntityResume(context.Context, *GetEntityResumeRequest) (*GetEntityResumeResponse, error)
	GetEntitySizeBreakdown(context.Context, *GetEntitySizeBreakdownRequest) (*GetEntitySizeBreakdownResponse, error)
	GetFeature(context.Context, *GetFeatureRequest) (*GetFeatureResponse, error)
	GetGenericFeatures(context.Context, *GetGenericFeaturesRequest) (*GetGenericFeaturesResponse, error)
	GetLogicalCores(context.Context, *GetLogicalCoresRequest) (*GetLogicalCoresResponse, error)
	GetMappingStatistics(context.Context, *GetMappingStatisticsRequest) (*GetMappingStatisticsResponse, error)
	GetPhysicalCores(context.Context, *GetPhysicalCoresRequest) (*GetPhysicalCoresResponse, error)
	GetRelationshipDetails(context.Context, *GetRelationshipDetailsRequest) (*GetRelationshipDetailsResponse, error)
	GetResolutionStatistics(context.Context, *GetResolutionStatisticsRequest) (*GetResolutionStatisticsResponse, error)
	GetTotalSystemMemory(context.Context, *GetTotalSystemMemoryRequest) (*GetTotalSystemMemoryResponse, error)
	Init(context.Context, *InitRequest) (*InitResponse, error)
	InitWithConfigID(context.Context, *InitWithConfigIDRequest) (*InitWithConfigIDResponse, error)
	Reinit(context.Context, *ReinitRequest) (*ReinitResponse, error)
	StreamEntityListBySize(*StreamEntityListBySizeRequest, G2Diagnostic_StreamEntityListBySizeServer) error
	mustEmbedUnimplementedG2DiagnosticServer()
}

// UnimplementedG2DiagnosticServer must be embedded to have forward compatible implementations.
type UnimplementedG2DiagnosticServer struct {
}

func (UnimplementedG2DiagnosticServer) CheckDBPerf(context.Context, *CheckDBPerfRequest) (*CheckDBPerfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDBPerf not implemented")
}
func (UnimplementedG2DiagnosticServer) CloseEntityListBySize(context.Context, *CloseEntityListBySizeRequest) (*CloseEntityListBySizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseEntityListBySize not implemented")
}
func (UnimplementedG2DiagnosticServer) Destroy(context.Context, *DestroyRequest) (*DestroyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedG2DiagnosticServer) FetchNextEntityBySize(context.Context, *FetchNextEntityBySizeRequest) (*FetchNextEntityBySizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchNextEntityBySize not implemented")
}
func (UnimplementedG2DiagnosticServer) FindEntitiesByFeatureIDs(context.Context, *FindEntitiesByFeatureIDsRequest) (*FindEntitiesByFeatureIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEntitiesByFeatureIDs not implemented")
}
func (UnimplementedG2DiagnosticServer) GetAvailableMemory(context.Context, *GetAvailableMemoryRequest) (*GetAvailableMemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableMemory not implemented")
}
func (UnimplementedG2DiagnosticServer) GetDataSourceCounts(context.Context, *GetDataSourceCountsRequest) (*GetDataSourceCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSourceCounts not implemented")
}
func (UnimplementedG2DiagnosticServer) GetDBInfo(context.Context, *GetDBInfoRequest) (*GetDBInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDBInfo not implemented")
}
func (UnimplementedG2DiagnosticServer) GetEntityDetails(context.Context, *GetEntityDetailsRequest) (*GetEntityDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityDetails not implemented")
}
func (UnimplementedG2DiagnosticServer) GetEntityListBySize(context.Context, *GetEntityListBySizeRequest) (*GetEntityListBySizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityListBySize not implemented")
}
func (UnimplementedG2DiagnosticServer) GetEntityResume(context.Context, *GetEntityResumeRequest) (*GetEntityResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityResume not implemented")
}
func (UnimplementedG2DiagnosticServer) GetEntitySizeBreakdown(context.Context, *GetEntitySizeBreakdownRequest) (*GetEntitySizeBreakdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntitySizeBreakdown not implemented")
}
func (UnimplementedG2DiagnosticServer) GetFeature(context.Context, *GetFeatureRequest) (*GetFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
}
func (UnimplementedG2DiagnosticServer) GetGenericFeatures(context.Context, *GetGenericFeaturesRequest) (*GetGenericFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenericFeatures not implemented")
}
func (UnimplementedG2DiagnosticServer) GetLogicalCores(context.Context, *GetLogicalCoresRequest) (*GetLogicalCoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogicalCores not implemented")
}
func (UnimplementedG2DiagnosticServer) GetMappingStatistics(context.Context, *GetMappingStatisticsRequest) (*GetMappingStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMappingStatistics not implemented")
}
func (UnimplementedG2DiagnosticServer) GetPhysicalCores(context.Context, *GetPhysicalCoresRequest) (*GetPhysicalCoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhysicalCores not implemented")
}
func (UnimplementedG2DiagnosticServer) GetRelationshipDetails(context.Context, *GetRelationshipDetailsRequest) (*GetRelationshipDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationshipDetails not implemented")
}
func (UnimplementedG2DiagnosticServer) GetResolutionStatistics(context.Context, *GetResolutionStatisticsRequest) (*GetResolutionStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResolutionStatistics not implemented")
}
func (UnimplementedG2DiagnosticServer) GetTotalSystemMemory(context.Context, *GetTotalSystemMemoryRequest) (*GetTotalSystemMemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalSystemMemory not implemented")
}
func (UnimplementedG2DiagnosticServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedG2DiagnosticServer) InitWithConfigID(context.Context, *InitWithConfigIDRequest) (*InitWithConfigIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitWithConfigID not implemented")
}
func (UnimplementedG2DiagnosticServer) Reinit(context.Context, *ReinitRequest) (*ReinitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reinit not implemented")
}
func (UnimplementedG2DiagnosticServer) StreamEntityListBySize(*StreamEntityListBySizeRequest, G2Diagnostic_StreamEntityListBySizeServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEntityListBySize not implemented")
}
func (UnimplementedG2DiagnosticServer) mustEmbedUnimplementedG2DiagnosticServer() {}

// UnsafeG2DiagnosticServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to G2DiagnosticServer will
// result in compilation errors.
type UnsafeG2DiagnosticServer interface {
	mustEmbedUnimplementedG2DiagnosticServer()
}

func RegisterG2DiagnosticServer(s grpc.ServiceRegistrar, srv G2DiagnosticServer) {
	s.RegisterService(&G2Diagnostic_ServiceDesc, srv)
}

func _G2Diagnostic_CheckDBPerf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDBPerfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).CheckDBPerf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/CheckDBPerf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).CheckDBPerf(ctx, req.(*CheckDBPerfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_CloseEntityListBySize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseEntityListBySizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).CloseEntityListBySize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/CloseEntityListBySize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).CloseEntityListBySize(ctx, req.(*CloseEntityListBySizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).Destroy(ctx, req.(*DestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_FetchNextEntityBySize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchNextEntityBySizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).FetchNextEntityBySize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/FetchNextEntityBySize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).FetchNextEntityBySize(ctx, req.(*FetchNextEntityBySizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_FindEntitiesByFeatureIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEntitiesByFeatureIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).FindEntitiesByFeatureIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/FindEntitiesByFeatureIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).FindEntitiesByFeatureIDs(ctx, req.(*FindEntitiesByFeatureIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_GetAvailableMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).GetAvailableMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/GetAvailableMemory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).GetAvailableMemory(ctx, req.(*GetAvailableMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_GetDataSourceCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataSourceCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).GetDataSourceCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/GetDataSourceCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).GetDataSourceCounts(ctx, req.(*GetDataSourceCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_GetDBInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDBInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).GetDBInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/GetDBInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).GetDBInfo(ctx, req.(*GetDBInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_GetEntityDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).GetEntityDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/GetEntityDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).GetEntityDetails(ctx, req.(*GetEntityDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_GetEntityListBySize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityListBySizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).GetEntityListBySize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/GetEntityListBySize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).GetEntityListBySize(ctx, req.(*GetEntityListBySizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_GetEntityResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).GetEntityResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/GetEntityResume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).GetEntityResume(ctx, req.(*GetEntityResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_GetEntitySizeBreakdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntitySizeBreakdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).GetEntitySizeBreakdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/GetEntitySizeBreakdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).GetEntitySizeBreakdown(ctx, req.(*GetEntitySizeBreakdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/GetFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).GetFeature(ctx, req.(*GetFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_GetGenericFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenericFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).GetGenericFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/GetGenericFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).GetGenericFeatures(ctx, req.(*GetGenericFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_GetLogicalCores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogicalCoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).GetLogicalCores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/GetLogicalCores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).GetLogicalCores(ctx, req.(*GetLogicalCoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_GetMappingStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMappingStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).GetMappingStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/GetMappingStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).GetMappingStatistics(ctx, req.(*GetMappingStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_GetPhysicalCores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhysicalCoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).GetPhysicalCores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/GetPhysicalCores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).GetPhysicalCores(ctx, req.(*GetPhysicalCoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_GetRelationshipDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationshipDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).GetRelationshipDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/GetRelationshipDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).GetRelationshipDetails(ctx, req.(*GetRelationshipDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_GetResolutionStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResolutionStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).GetResolutionStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/GetResolutionStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).GetResolutionStatistics(ctx, req.(*GetResolutionStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_GetTotalSystemMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalSystemMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).GetTotalSystemMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/GetTotalSystemMemory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).GetTotalSystemMemory(ctx, req.(*GetTotalSystemMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_InitWithConfigID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitWithConfigIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).InitWithConfigID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/InitWithConfigID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).InitWithConfigID(ctx, req.(*InitWithConfigIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_Reinit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReinitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2DiagnosticServer).Reinit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2diagnostic.G2Diagnostic/Reinit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2DiagnosticServer).Reinit(ctx, req.(*ReinitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Diagnostic_StreamEntityListBySize_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEntityListBySizeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(G2DiagnosticServer).StreamEntityListBySize(m, &g2DiagnosticStreamEntityListBySizeServer{stream})
}

type G2Diagnostic_StreamEntityListBySizeServer interface {
	Send(*StreamEntityListBySizeResponse) error
	grpc.ServerStream
}

type g2DiagnosticStreamEntityListBySizeServer struct {
	grpc.ServerStream
}

func (x *g2DiagnosticStreamEntityListBySizeServer) Send(m *StreamEntityListBySizeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// G2Diagnostic_ServiceDesc is the grpc.ServiceDesc for G2Diagnostic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var G2Diagnostic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "g2diagnostic.G2Diagnostic",
	HandlerType: (*G2DiagnosticServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckDBPerf",
			Handler:    _G2Diagnostic_CheckDBPerf_Handler,
		},
		{
			MethodName: "CloseEntityListBySize",
			Handler:    _G2Diagnostic_CloseEntityListBySize_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _G2Diagnostic_Destroy_Handler,
		},
		{
			MethodName: "FetchNextEntityBySize",
			Handler:    _G2Diagnostic_FetchNextEntityBySize_Handler,
		},
		{
			MethodName: "FindEntitiesByFeatureIDs",
			Handler:    _G2Diagnostic_FindEntitiesByFeatureIDs_Handler,
		},
		{
			MethodName: "GetAvailableMemory",
			Handler:    _G2Diagnostic_GetAvailableMemory_Handler,
		},
		{
			MethodName: "GetDataSourceCounts",
			Handler:    _G2Diagnostic_GetDataSourceCounts_Handler,
		},
		{
			MethodName: "GetDBInfo",
			Handler:    _G2Diagnostic_GetDBInfo_Handler,
		},
		{
			MethodName: "GetEntityDetails",
			Handler:    _G2Diagnostic_GetEntityDetails_Handler,
		},
		{
			MethodName: "GetEntityListBySize",
			Handler:    _G2Diagnostic_GetEntityListBySize_Handler,
		},
		{
			MethodName: "GetEntityResume",
			Handler:    _G2Diagnostic_GetEntityResume_Handler,
		},
		{
			MethodName: "GetEntitySizeBreakdown",
			Handler:    _G2Diagnostic_GetEntitySizeBreakdown_Handler,
		},
		{
			MethodName: "GetFeature",
			Handler:    _G2Diagnostic_GetFeature_Handler,
		},
		{
			MethodName: "GetGenericFeatures",
			Handler:    _G2Diagnostic_GetGenericFeatures_Handler,
		},
		{
			MethodName: "GetLogicalCores",
			Handler:    _G2Diagnostic_GetLogicalCores_Handler,
		},
		{
			MethodName: "GetMappingStatistics",
			Handler:    _G2Diagnostic_GetMappingStatistics_Handler,
		},
		{
			MethodName: "GetPhysicalCores",
			Handler:    _G2Diagnostic_GetPhysicalCores_Handler,
		},
		{
			MethodName: "GetRelationshipDetails",
			Handler:    _G2Diagnostic_GetRelationshipDetails_Handler,
		},
		{
			MethodName: "GetResolutionStatistics",
			Handler:    _G2Diagnostic_GetResolutionStatistics_Handler,
		},
		{
			MethodName: "GetTotalSystemMemory",
			Handler:    _G2Diagnostic_GetTotalSystemMemory_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _G2Diagnostic_Init_Handler,
		},
		{
			MethodName: "InitWithConfigID",
			Handler:    _G2Diagnostic_InitWithConfigID_Handler,
		},
		{
			MethodName: "Reinit",
			Handler:    _G2Diagnostic_Reinit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEntityListBySize",
			Handler:       _G2Diagnostic_StreamEntityListBySize_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "g2diagnostic.proto",
}
