// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: szconfigmanager.proto

package szconfigmanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SzConfigManagerClient is the client API for SzConfigManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SzConfigManagerClient interface {
	AddConfig(ctx context.Context, in *AddConfigRequest, opts ...grpc.CallOption) (*AddConfigResponse, error)
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	GetConfigList(ctx context.Context, in *GetConfigListRequest, opts ...grpc.CallOption) (*GetConfigListResponse, error)
	GetDefaultConfigId(ctx context.Context, in *GetDefaultConfigIdRequest, opts ...grpc.CallOption) (*GetDefaultConfigIdResponse, error)
	ReplaceDefaultConfigId(ctx context.Context, in *ReplaceDefaultConfigIdRequest, opts ...grpc.CallOption) (*ReplaceDefaultConfigIdResponse, error)
	SetDefaultConfigId(ctx context.Context, in *SetDefaultConfigIdRequest, opts ...grpc.CallOption) (*SetDefaultConfigIdResponse, error)
}

type szConfigManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSzConfigManagerClient(cc grpc.ClientConnInterface) SzConfigManagerClient {
	return &szConfigManagerClient{cc}
}

func (c *szConfigManagerClient) AddConfig(ctx context.Context, in *AddConfigRequest, opts ...grpc.CallOption) (*AddConfigResponse, error) {
	out := new(AddConfigResponse)
	err := c.cc.Invoke(ctx, "/szconfigmanager.SzConfigManager/AddConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigManagerClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, "/szconfigmanager.SzConfigManager/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigManagerClient) GetConfigList(ctx context.Context, in *GetConfigListRequest, opts ...grpc.CallOption) (*GetConfigListResponse, error) {
	out := new(GetConfigListResponse)
	err := c.cc.Invoke(ctx, "/szconfigmanager.SzConfigManager/GetConfigList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigManagerClient) GetDefaultConfigId(ctx context.Context, in *GetDefaultConfigIdRequest, opts ...grpc.CallOption) (*GetDefaultConfigIdResponse, error) {
	out := new(GetDefaultConfigIdResponse)
	err := c.cc.Invoke(ctx, "/szconfigmanager.SzConfigManager/GetDefaultConfigId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigManagerClient) ReplaceDefaultConfigId(ctx context.Context, in *ReplaceDefaultConfigIdRequest, opts ...grpc.CallOption) (*ReplaceDefaultConfigIdResponse, error) {
	out := new(ReplaceDefaultConfigIdResponse)
	err := c.cc.Invoke(ctx, "/szconfigmanager.SzConfigManager/ReplaceDefaultConfigId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *szConfigManagerClient) SetDefaultConfigId(ctx context.Context, in *SetDefaultConfigIdRequest, opts ...grpc.CallOption) (*SetDefaultConfigIdResponse, error) {
	out := new(SetDefaultConfigIdResponse)
	err := c.cc.Invoke(ctx, "/szconfigmanager.SzConfigManager/SetDefaultConfigId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SzConfigManagerServer is the server API for SzConfigManager service.
// All implementations must embed UnimplementedSzConfigManagerServer
// for forward compatibility
type SzConfigManagerServer interface {
	AddConfig(context.Context, *AddConfigRequest) (*AddConfigResponse, error)
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	GetConfigList(context.Context, *GetConfigListRequest) (*GetConfigListResponse, error)
	GetDefaultConfigId(context.Context, *GetDefaultConfigIdRequest) (*GetDefaultConfigIdResponse, error)
	ReplaceDefaultConfigId(context.Context, *ReplaceDefaultConfigIdRequest) (*ReplaceDefaultConfigIdResponse, error)
	SetDefaultConfigId(context.Context, *SetDefaultConfigIdRequest) (*SetDefaultConfigIdResponse, error)
	mustEmbedUnimplementedSzConfigManagerServer()
}

// UnimplementedSzConfigManagerServer must be embedded to have forward compatible implementations.
type UnimplementedSzConfigManagerServer struct {
}

func (UnimplementedSzConfigManagerServer) AddConfig(context.Context, *AddConfigRequest) (*AddConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConfig not implemented")
}
func (UnimplementedSzConfigManagerServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedSzConfigManagerServer) GetConfigList(context.Context, *GetConfigListRequest) (*GetConfigListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigList not implemented")
}
func (UnimplementedSzConfigManagerServer) GetDefaultConfigId(context.Context, *GetDefaultConfigIdRequest) (*GetDefaultConfigIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultConfigId not implemented")
}
func (UnimplementedSzConfigManagerServer) ReplaceDefaultConfigId(context.Context, *ReplaceDefaultConfigIdRequest) (*ReplaceDefaultConfigIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceDefaultConfigId not implemented")
}
func (UnimplementedSzConfigManagerServer) SetDefaultConfigId(context.Context, *SetDefaultConfigIdRequest) (*SetDefaultConfigIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultConfigId not implemented")
}
func (UnimplementedSzConfigManagerServer) mustEmbedUnimplementedSzConfigManagerServer() {}

// UnsafeSzConfigManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SzConfigManagerServer will
// result in compilation errors.
type UnsafeSzConfigManagerServer interface {
	mustEmbedUnimplementedSzConfigManagerServer()
}

func RegisterSzConfigManagerServer(s grpc.ServiceRegistrar, srv SzConfigManagerServer) {
	s.RegisterService(&SzConfigManager_ServiceDesc, srv)
}

func _SzConfigManager_AddConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigManagerServer).AddConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szconfigmanager.SzConfigManager/AddConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigManagerServer).AddConfig(ctx, req.(*AddConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfigManager_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigManagerServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szconfigmanager.SzConfigManager/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigManagerServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfigManager_GetConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigManagerServer).GetConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szconfigmanager.SzConfigManager/GetConfigList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigManagerServer).GetConfigList(ctx, req.(*GetConfigListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfigManager_GetDefaultConfigId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultConfigIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigManagerServer).GetDefaultConfigId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szconfigmanager.SzConfigManager/GetDefaultConfigId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigManagerServer).GetDefaultConfigId(ctx, req.(*GetDefaultConfigIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfigManager_ReplaceDefaultConfigId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceDefaultConfigIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigManagerServer).ReplaceDefaultConfigId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szconfigmanager.SzConfigManager/ReplaceDefaultConfigId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigManagerServer).ReplaceDefaultConfigId(ctx, req.(*ReplaceDefaultConfigIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SzConfigManager_SetDefaultConfigId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultConfigIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SzConfigManagerServer).SetDefaultConfigId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/szconfigmanager.SzConfigManager/SetDefaultConfigId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SzConfigManagerServer).SetDefaultConfigId(ctx, req.(*SetDefaultConfigIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SzConfigManager_ServiceDesc is the grpc.ServiceDesc for SzConfigManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SzConfigManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "szconfigmanager.SzConfigManager",
	HandlerType: (*SzConfigManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddConfig",
			Handler:    _SzConfigManager_AddConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _SzConfigManager_GetConfig_Handler,
		},
		{
			MethodName: "GetConfigList",
			Handler:    _SzConfigManager_GetConfigList_Handler,
		},
		{
			MethodName: "GetDefaultConfigId",
			Handler:    _SzConfigManager_GetDefaultConfigId_Handler,
		},
		{
			MethodName: "ReplaceDefaultConfigId",
			Handler:    _SzConfigManager_ReplaceDefaultConfigId_Handler,
		},
		{
			MethodName: "SetDefaultConfigId",
			Handler:    _SzConfigManager_SetDefaultConfigId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "szconfigmanager.proto",
}
