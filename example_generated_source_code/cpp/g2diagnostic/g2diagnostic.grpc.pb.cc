// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: g2diagnostic.proto

#include "g2diagnostic.pb.h"
#include "g2diagnostic.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace g2diagnostic {

static const char* G2Diagnostic_method_names[] = {
  "/g2diagnostic.G2Diagnostic/CheckDBPerf",
  "/g2diagnostic.G2Diagnostic/Destroy",
  "/g2diagnostic.G2Diagnostic/Init",
  "/g2diagnostic.G2Diagnostic/InitWithConfigID",
  "/g2diagnostic.G2Diagnostic/PurgeRepository",
  "/g2diagnostic.G2Diagnostic/Reinit",
};

std::unique_ptr< G2Diagnostic::Stub> G2Diagnostic::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< G2Diagnostic::Stub> stub(new G2Diagnostic::Stub(channel, options));
  return stub;
}

G2Diagnostic::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CheckDBPerf_(G2Diagnostic_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destroy_(G2Diagnostic_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Init_(G2Diagnostic_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InitWithConfigID_(G2Diagnostic_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PurgeRepository_(G2Diagnostic_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reinit_(G2Diagnostic_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status G2Diagnostic::Stub::CheckDBPerf(::grpc::ClientContext* context, const ::g2diagnostic::CheckDBPerfRequest& request, ::g2diagnostic::CheckDBPerfResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2diagnostic::CheckDBPerfRequest, ::g2diagnostic::CheckDBPerfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckDBPerf_, context, request, response);
}

void G2Diagnostic::Stub::async::CheckDBPerf(::grpc::ClientContext* context, const ::g2diagnostic::CheckDBPerfRequest* request, ::g2diagnostic::CheckDBPerfResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2diagnostic::CheckDBPerfRequest, ::g2diagnostic::CheckDBPerfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckDBPerf_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::CheckDBPerf(::grpc::ClientContext* context, const ::g2diagnostic::CheckDBPerfRequest* request, ::g2diagnostic::CheckDBPerfResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckDBPerf_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2diagnostic::CheckDBPerfResponse>* G2Diagnostic::Stub::PrepareAsyncCheckDBPerfRaw(::grpc::ClientContext* context, const ::g2diagnostic::CheckDBPerfRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2diagnostic::CheckDBPerfResponse, ::g2diagnostic::CheckDBPerfRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckDBPerf_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2diagnostic::CheckDBPerfResponse>* G2Diagnostic::Stub::AsyncCheckDBPerfRaw(::grpc::ClientContext* context, const ::g2diagnostic::CheckDBPerfRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckDBPerfRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::Destroy(::grpc::ClientContext* context, const ::g2diagnostic::DestroyRequest& request, ::g2diagnostic::DestroyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2diagnostic::DestroyRequest, ::g2diagnostic::DestroyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destroy_, context, request, response);
}

void G2Diagnostic::Stub::async::Destroy(::grpc::ClientContext* context, const ::g2diagnostic::DestroyRequest* request, ::g2diagnostic::DestroyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2diagnostic::DestroyRequest, ::g2diagnostic::DestroyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::Destroy(::grpc::ClientContext* context, const ::g2diagnostic::DestroyRequest* request, ::g2diagnostic::DestroyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2diagnostic::DestroyResponse>* G2Diagnostic::Stub::PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::g2diagnostic::DestroyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2diagnostic::DestroyResponse, ::g2diagnostic::DestroyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2diagnostic::DestroyResponse>* G2Diagnostic::Stub::AsyncDestroyRaw(::grpc::ClientContext* context, const ::g2diagnostic::DestroyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::Init(::grpc::ClientContext* context, const ::g2diagnostic::InitRequest& request, ::g2diagnostic::InitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2diagnostic::InitRequest, ::g2diagnostic::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Init_, context, request, response);
}

void G2Diagnostic::Stub::async::Init(::grpc::ClientContext* context, const ::g2diagnostic::InitRequest* request, ::g2diagnostic::InitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2diagnostic::InitRequest, ::g2diagnostic::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::Init(::grpc::ClientContext* context, const ::g2diagnostic::InitRequest* request, ::g2diagnostic::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2diagnostic::InitResponse>* G2Diagnostic::Stub::PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::g2diagnostic::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2diagnostic::InitResponse, ::g2diagnostic::InitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2diagnostic::InitResponse>* G2Diagnostic::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::g2diagnostic::InitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::InitWithConfigID(::grpc::ClientContext* context, const ::g2diagnostic::InitWithConfigIDRequest& request, ::g2diagnostic::InitWithConfigIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2diagnostic::InitWithConfigIDRequest, ::g2diagnostic::InitWithConfigIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InitWithConfigID_, context, request, response);
}

void G2Diagnostic::Stub::async::InitWithConfigID(::grpc::ClientContext* context, const ::g2diagnostic::InitWithConfigIDRequest* request, ::g2diagnostic::InitWithConfigIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2diagnostic::InitWithConfigIDRequest, ::g2diagnostic::InitWithConfigIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitWithConfigID_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::InitWithConfigID(::grpc::ClientContext* context, const ::g2diagnostic::InitWithConfigIDRequest* request, ::g2diagnostic::InitWithConfigIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitWithConfigID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2diagnostic::InitWithConfigIDResponse>* G2Diagnostic::Stub::PrepareAsyncInitWithConfigIDRaw(::grpc::ClientContext* context, const ::g2diagnostic::InitWithConfigIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2diagnostic::InitWithConfigIDResponse, ::g2diagnostic::InitWithConfigIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InitWithConfigID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2diagnostic::InitWithConfigIDResponse>* G2Diagnostic::Stub::AsyncInitWithConfigIDRaw(::grpc::ClientContext* context, const ::g2diagnostic::InitWithConfigIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitWithConfigIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::PurgeRepository(::grpc::ClientContext* context, const ::g2diagnostic::PurgeRepositoryRequest& request, ::g2diagnostic::PurgeRepositoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2diagnostic::PurgeRepositoryRequest, ::g2diagnostic::PurgeRepositoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PurgeRepository_, context, request, response);
}

void G2Diagnostic::Stub::async::PurgeRepository(::grpc::ClientContext* context, const ::g2diagnostic::PurgeRepositoryRequest* request, ::g2diagnostic::PurgeRepositoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2diagnostic::PurgeRepositoryRequest, ::g2diagnostic::PurgeRepositoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PurgeRepository_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::PurgeRepository(::grpc::ClientContext* context, const ::g2diagnostic::PurgeRepositoryRequest* request, ::g2diagnostic::PurgeRepositoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PurgeRepository_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2diagnostic::PurgeRepositoryResponse>* G2Diagnostic::Stub::PrepareAsyncPurgeRepositoryRaw(::grpc::ClientContext* context, const ::g2diagnostic::PurgeRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2diagnostic::PurgeRepositoryResponse, ::g2diagnostic::PurgeRepositoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PurgeRepository_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2diagnostic::PurgeRepositoryResponse>* G2Diagnostic::Stub::AsyncPurgeRepositoryRaw(::grpc::ClientContext* context, const ::g2diagnostic::PurgeRepositoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPurgeRepositoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status G2Diagnostic::Stub::Reinit(::grpc::ClientContext* context, const ::g2diagnostic::ReinitRequest& request, ::g2diagnostic::ReinitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::g2diagnostic::ReinitRequest, ::g2diagnostic::ReinitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Reinit_, context, request, response);
}

void G2Diagnostic::Stub::async::Reinit(::grpc::ClientContext* context, const ::g2diagnostic::ReinitRequest* request, ::g2diagnostic::ReinitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::g2diagnostic::ReinitRequest, ::g2diagnostic::ReinitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reinit_, context, request, response, std::move(f));
}

void G2Diagnostic::Stub::async::Reinit(::grpc::ClientContext* context, const ::g2diagnostic::ReinitRequest* request, ::g2diagnostic::ReinitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reinit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::g2diagnostic::ReinitResponse>* G2Diagnostic::Stub::PrepareAsyncReinitRaw(::grpc::ClientContext* context, const ::g2diagnostic::ReinitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::g2diagnostic::ReinitResponse, ::g2diagnostic::ReinitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Reinit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::g2diagnostic::ReinitResponse>* G2Diagnostic::Stub::AsyncReinitRaw(::grpc::ClientContext* context, const ::g2diagnostic::ReinitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReinitRaw(context, request, cq);
  result->StartCall();
  return result;
}

G2Diagnostic::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2diagnostic::CheckDBPerfRequest, ::g2diagnostic::CheckDBPerfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2diagnostic::CheckDBPerfRequest* req,
             ::g2diagnostic::CheckDBPerfResponse* resp) {
               return service->CheckDBPerf(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2diagnostic::DestroyRequest, ::g2diagnostic::DestroyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2diagnostic::DestroyRequest* req,
             ::g2diagnostic::DestroyResponse* resp) {
               return service->Destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2diagnostic::InitRequest, ::g2diagnostic::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2diagnostic::InitRequest* req,
             ::g2diagnostic::InitResponse* resp) {
               return service->Init(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2diagnostic::InitWithConfigIDRequest, ::g2diagnostic::InitWithConfigIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2diagnostic::InitWithConfigIDRequest* req,
             ::g2diagnostic::InitWithConfigIDResponse* resp) {
               return service->InitWithConfigID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2diagnostic::PurgeRepositoryRequest, ::g2diagnostic::PurgeRepositoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2diagnostic::PurgeRepositoryRequest* req,
             ::g2diagnostic::PurgeRepositoryResponse* resp) {
               return service->PurgeRepository(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      G2Diagnostic_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< G2Diagnostic::Service, ::g2diagnostic::ReinitRequest, ::g2diagnostic::ReinitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](G2Diagnostic::Service* service,
             ::grpc::ServerContext* ctx,
             const ::g2diagnostic::ReinitRequest* req,
             ::g2diagnostic::ReinitResponse* resp) {
               return service->Reinit(ctx, req, resp);
             }, this)));
}

G2Diagnostic::Service::~Service() {
}

::grpc::Status G2Diagnostic::Service::CheckDBPerf(::grpc::ServerContext* context, const ::g2diagnostic::CheckDBPerfRequest* request, ::g2diagnostic::CheckDBPerfResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::Destroy(::grpc::ServerContext* context, const ::g2diagnostic::DestroyRequest* request, ::g2diagnostic::DestroyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::Init(::grpc::ServerContext* context, const ::g2diagnostic::InitRequest* request, ::g2diagnostic::InitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::InitWithConfigID(::grpc::ServerContext* context, const ::g2diagnostic::InitWithConfigIDRequest* request, ::g2diagnostic::InitWithConfigIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::PurgeRepository(::grpc::ServerContext* context, const ::g2diagnostic::PurgeRepositoryRequest* request, ::g2diagnostic::PurgeRepositoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status G2Diagnostic::Service::Reinit(::grpc::ServerContext* context, const ::g2diagnostic::ReinitRequest* request, ::g2diagnostic::ReinitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace g2diagnostic

