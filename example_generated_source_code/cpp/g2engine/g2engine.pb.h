// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: g2engine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_g2engine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_g2engine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_g2engine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_g2engine_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_g2engine_2eproto;
namespace g2engine {
class AddRecordRequest;
struct AddRecordRequestDefaultTypeInternal;
extern AddRecordRequestDefaultTypeInternal _AddRecordRequest_default_instance_;
class AddRecordResponse;
struct AddRecordResponseDefaultTypeInternal;
extern AddRecordResponseDefaultTypeInternal _AddRecordResponse_default_instance_;
class AddRecordWithInfoRequest;
struct AddRecordWithInfoRequestDefaultTypeInternal;
extern AddRecordWithInfoRequestDefaultTypeInternal _AddRecordWithInfoRequest_default_instance_;
class AddRecordWithInfoResponse;
struct AddRecordWithInfoResponseDefaultTypeInternal;
extern AddRecordWithInfoResponseDefaultTypeInternal _AddRecordWithInfoResponse_default_instance_;
class AddRecordWithInfoWithReturnedRecordIDRequest;
struct AddRecordWithInfoWithReturnedRecordIDRequestDefaultTypeInternal;
extern AddRecordWithInfoWithReturnedRecordIDRequestDefaultTypeInternal _AddRecordWithInfoWithReturnedRecordIDRequest_default_instance_;
class AddRecordWithInfoWithReturnedRecordIDResponse;
struct AddRecordWithInfoWithReturnedRecordIDResponseDefaultTypeInternal;
extern AddRecordWithInfoWithReturnedRecordIDResponseDefaultTypeInternal _AddRecordWithInfoWithReturnedRecordIDResponse_default_instance_;
class AddRecordWithReturnedRecordIDRequest;
struct AddRecordWithReturnedRecordIDRequestDefaultTypeInternal;
extern AddRecordWithReturnedRecordIDRequestDefaultTypeInternal _AddRecordWithReturnedRecordIDRequest_default_instance_;
class AddRecordWithReturnedRecordIDResponse;
struct AddRecordWithReturnedRecordIDResponseDefaultTypeInternal;
extern AddRecordWithReturnedRecordIDResponseDefaultTypeInternal _AddRecordWithReturnedRecordIDResponse_default_instance_;
class CheckRecordRequest;
struct CheckRecordRequestDefaultTypeInternal;
extern CheckRecordRequestDefaultTypeInternal _CheckRecordRequest_default_instance_;
class CheckRecordResponse;
struct CheckRecordResponseDefaultTypeInternal;
extern CheckRecordResponseDefaultTypeInternal _CheckRecordResponse_default_instance_;
class CloseExportRequest;
struct CloseExportRequestDefaultTypeInternal;
extern CloseExportRequestDefaultTypeInternal _CloseExportRequest_default_instance_;
class CloseExportResponse;
struct CloseExportResponseDefaultTypeInternal;
extern CloseExportResponseDefaultTypeInternal _CloseExportResponse_default_instance_;
class CountRedoRecordsRequest;
struct CountRedoRecordsRequestDefaultTypeInternal;
extern CountRedoRecordsRequestDefaultTypeInternal _CountRedoRecordsRequest_default_instance_;
class CountRedoRecordsResponse;
struct CountRedoRecordsResponseDefaultTypeInternal;
extern CountRedoRecordsResponseDefaultTypeInternal _CountRedoRecordsResponse_default_instance_;
class DeleteRecordRequest;
struct DeleteRecordRequestDefaultTypeInternal;
extern DeleteRecordRequestDefaultTypeInternal _DeleteRecordRequest_default_instance_;
class DeleteRecordResponse;
struct DeleteRecordResponseDefaultTypeInternal;
extern DeleteRecordResponseDefaultTypeInternal _DeleteRecordResponse_default_instance_;
class DeleteRecordWithInfoRequest;
struct DeleteRecordWithInfoRequestDefaultTypeInternal;
extern DeleteRecordWithInfoRequestDefaultTypeInternal _DeleteRecordWithInfoRequest_default_instance_;
class DeleteRecordWithInfoResponse;
struct DeleteRecordWithInfoResponseDefaultTypeInternal;
extern DeleteRecordWithInfoResponseDefaultTypeInternal _DeleteRecordWithInfoResponse_default_instance_;
class DestroyRequest;
struct DestroyRequestDefaultTypeInternal;
extern DestroyRequestDefaultTypeInternal _DestroyRequest_default_instance_;
class DestroyResponse;
struct DestroyResponseDefaultTypeInternal;
extern DestroyResponseDefaultTypeInternal _DestroyResponse_default_instance_;
class ExportCSVEntityReportRequest;
struct ExportCSVEntityReportRequestDefaultTypeInternal;
extern ExportCSVEntityReportRequestDefaultTypeInternal _ExportCSVEntityReportRequest_default_instance_;
class ExportCSVEntityReportResponse;
struct ExportCSVEntityReportResponseDefaultTypeInternal;
extern ExportCSVEntityReportResponseDefaultTypeInternal _ExportCSVEntityReportResponse_default_instance_;
class ExportConfigAndConfigIDRequest;
struct ExportConfigAndConfigIDRequestDefaultTypeInternal;
extern ExportConfigAndConfigIDRequestDefaultTypeInternal _ExportConfigAndConfigIDRequest_default_instance_;
class ExportConfigAndConfigIDResponse;
struct ExportConfigAndConfigIDResponseDefaultTypeInternal;
extern ExportConfigAndConfigIDResponseDefaultTypeInternal _ExportConfigAndConfigIDResponse_default_instance_;
class ExportConfigRequest;
struct ExportConfigRequestDefaultTypeInternal;
extern ExportConfigRequestDefaultTypeInternal _ExportConfigRequest_default_instance_;
class ExportConfigResponse;
struct ExportConfigResponseDefaultTypeInternal;
extern ExportConfigResponseDefaultTypeInternal _ExportConfigResponse_default_instance_;
class ExportJSONEntityReportRequest;
struct ExportJSONEntityReportRequestDefaultTypeInternal;
extern ExportJSONEntityReportRequestDefaultTypeInternal _ExportJSONEntityReportRequest_default_instance_;
class ExportJSONEntityReportResponse;
struct ExportJSONEntityReportResponseDefaultTypeInternal;
extern ExportJSONEntityReportResponseDefaultTypeInternal _ExportJSONEntityReportResponse_default_instance_;
class FetchNextRequest;
struct FetchNextRequestDefaultTypeInternal;
extern FetchNextRequestDefaultTypeInternal _FetchNextRequest_default_instance_;
class FetchNextResponse;
struct FetchNextResponseDefaultTypeInternal;
extern FetchNextResponseDefaultTypeInternal _FetchNextResponse_default_instance_;
class FindInterestingEntitiesByEntityIDRequest;
struct FindInterestingEntitiesByEntityIDRequestDefaultTypeInternal;
extern FindInterestingEntitiesByEntityIDRequestDefaultTypeInternal _FindInterestingEntitiesByEntityIDRequest_default_instance_;
class FindInterestingEntitiesByEntityIDResponse;
struct FindInterestingEntitiesByEntityIDResponseDefaultTypeInternal;
extern FindInterestingEntitiesByEntityIDResponseDefaultTypeInternal _FindInterestingEntitiesByEntityIDResponse_default_instance_;
class FindInterestingEntitiesByRecordIDRequest;
struct FindInterestingEntitiesByRecordIDRequestDefaultTypeInternal;
extern FindInterestingEntitiesByRecordIDRequestDefaultTypeInternal _FindInterestingEntitiesByRecordIDRequest_default_instance_;
class FindInterestingEntitiesByRecordIDResponse;
struct FindInterestingEntitiesByRecordIDResponseDefaultTypeInternal;
extern FindInterestingEntitiesByRecordIDResponseDefaultTypeInternal _FindInterestingEntitiesByRecordIDResponse_default_instance_;
class FindNetworkByEntityIDRequest;
struct FindNetworkByEntityIDRequestDefaultTypeInternal;
extern FindNetworkByEntityIDRequestDefaultTypeInternal _FindNetworkByEntityIDRequest_default_instance_;
class FindNetworkByEntityIDResponse;
struct FindNetworkByEntityIDResponseDefaultTypeInternal;
extern FindNetworkByEntityIDResponseDefaultTypeInternal _FindNetworkByEntityIDResponse_default_instance_;
class FindNetworkByEntityID_V2Request;
struct FindNetworkByEntityID_V2RequestDefaultTypeInternal;
extern FindNetworkByEntityID_V2RequestDefaultTypeInternal _FindNetworkByEntityID_V2Request_default_instance_;
class FindNetworkByEntityID_V2Response;
struct FindNetworkByEntityID_V2ResponseDefaultTypeInternal;
extern FindNetworkByEntityID_V2ResponseDefaultTypeInternal _FindNetworkByEntityID_V2Response_default_instance_;
class FindNetworkByRecordIDRequest;
struct FindNetworkByRecordIDRequestDefaultTypeInternal;
extern FindNetworkByRecordIDRequestDefaultTypeInternal _FindNetworkByRecordIDRequest_default_instance_;
class FindNetworkByRecordIDResponse;
struct FindNetworkByRecordIDResponseDefaultTypeInternal;
extern FindNetworkByRecordIDResponseDefaultTypeInternal _FindNetworkByRecordIDResponse_default_instance_;
class FindNetworkByRecordID_V2Request;
struct FindNetworkByRecordID_V2RequestDefaultTypeInternal;
extern FindNetworkByRecordID_V2RequestDefaultTypeInternal _FindNetworkByRecordID_V2Request_default_instance_;
class FindNetworkByRecordID_V2Response;
struct FindNetworkByRecordID_V2ResponseDefaultTypeInternal;
extern FindNetworkByRecordID_V2ResponseDefaultTypeInternal _FindNetworkByRecordID_V2Response_default_instance_;
class FindPathByEntityIDRequest;
struct FindPathByEntityIDRequestDefaultTypeInternal;
extern FindPathByEntityIDRequestDefaultTypeInternal _FindPathByEntityIDRequest_default_instance_;
class FindPathByEntityIDResponse;
struct FindPathByEntityIDResponseDefaultTypeInternal;
extern FindPathByEntityIDResponseDefaultTypeInternal _FindPathByEntityIDResponse_default_instance_;
class FindPathByEntityID_V2Request;
struct FindPathByEntityID_V2RequestDefaultTypeInternal;
extern FindPathByEntityID_V2RequestDefaultTypeInternal _FindPathByEntityID_V2Request_default_instance_;
class FindPathByEntityID_V2Response;
struct FindPathByEntityID_V2ResponseDefaultTypeInternal;
extern FindPathByEntityID_V2ResponseDefaultTypeInternal _FindPathByEntityID_V2Response_default_instance_;
class FindPathByRecordIDRequest;
struct FindPathByRecordIDRequestDefaultTypeInternal;
extern FindPathByRecordIDRequestDefaultTypeInternal _FindPathByRecordIDRequest_default_instance_;
class FindPathByRecordIDResponse;
struct FindPathByRecordIDResponseDefaultTypeInternal;
extern FindPathByRecordIDResponseDefaultTypeInternal _FindPathByRecordIDResponse_default_instance_;
class FindPathByRecordID_V2Request;
struct FindPathByRecordID_V2RequestDefaultTypeInternal;
extern FindPathByRecordID_V2RequestDefaultTypeInternal _FindPathByRecordID_V2Request_default_instance_;
class FindPathByRecordID_V2Response;
struct FindPathByRecordID_V2ResponseDefaultTypeInternal;
extern FindPathByRecordID_V2ResponseDefaultTypeInternal _FindPathByRecordID_V2Response_default_instance_;
class FindPathExcludingByEntityIDRequest;
struct FindPathExcludingByEntityIDRequestDefaultTypeInternal;
extern FindPathExcludingByEntityIDRequestDefaultTypeInternal _FindPathExcludingByEntityIDRequest_default_instance_;
class FindPathExcludingByEntityIDResponse;
struct FindPathExcludingByEntityIDResponseDefaultTypeInternal;
extern FindPathExcludingByEntityIDResponseDefaultTypeInternal _FindPathExcludingByEntityIDResponse_default_instance_;
class FindPathExcludingByEntityID_V2Request;
struct FindPathExcludingByEntityID_V2RequestDefaultTypeInternal;
extern FindPathExcludingByEntityID_V2RequestDefaultTypeInternal _FindPathExcludingByEntityID_V2Request_default_instance_;
class FindPathExcludingByEntityID_V2Response;
struct FindPathExcludingByEntityID_V2ResponseDefaultTypeInternal;
extern FindPathExcludingByEntityID_V2ResponseDefaultTypeInternal _FindPathExcludingByEntityID_V2Response_default_instance_;
class FindPathExcludingByRecordIDRequest;
struct FindPathExcludingByRecordIDRequestDefaultTypeInternal;
extern FindPathExcludingByRecordIDRequestDefaultTypeInternal _FindPathExcludingByRecordIDRequest_default_instance_;
class FindPathExcludingByRecordIDResponse;
struct FindPathExcludingByRecordIDResponseDefaultTypeInternal;
extern FindPathExcludingByRecordIDResponseDefaultTypeInternal _FindPathExcludingByRecordIDResponse_default_instance_;
class FindPathExcludingByRecordID_V2Request;
struct FindPathExcludingByRecordID_V2RequestDefaultTypeInternal;
extern FindPathExcludingByRecordID_V2RequestDefaultTypeInternal _FindPathExcludingByRecordID_V2Request_default_instance_;
class FindPathExcludingByRecordID_V2Response;
struct FindPathExcludingByRecordID_V2ResponseDefaultTypeInternal;
extern FindPathExcludingByRecordID_V2ResponseDefaultTypeInternal _FindPathExcludingByRecordID_V2Response_default_instance_;
class FindPathIncludingSourceByEntityIDRequest;
struct FindPathIncludingSourceByEntityIDRequestDefaultTypeInternal;
extern FindPathIncludingSourceByEntityIDRequestDefaultTypeInternal _FindPathIncludingSourceByEntityIDRequest_default_instance_;
class FindPathIncludingSourceByEntityIDResponse;
struct FindPathIncludingSourceByEntityIDResponseDefaultTypeInternal;
extern FindPathIncludingSourceByEntityIDResponseDefaultTypeInternal _FindPathIncludingSourceByEntityIDResponse_default_instance_;
class FindPathIncludingSourceByEntityID_V2Request;
struct FindPathIncludingSourceByEntityID_V2RequestDefaultTypeInternal;
extern FindPathIncludingSourceByEntityID_V2RequestDefaultTypeInternal _FindPathIncludingSourceByEntityID_V2Request_default_instance_;
class FindPathIncludingSourceByEntityID_V2Response;
struct FindPathIncludingSourceByEntityID_V2ResponseDefaultTypeInternal;
extern FindPathIncludingSourceByEntityID_V2ResponseDefaultTypeInternal _FindPathIncludingSourceByEntityID_V2Response_default_instance_;
class FindPathIncludingSourceByRecordIDRequest;
struct FindPathIncludingSourceByRecordIDRequestDefaultTypeInternal;
extern FindPathIncludingSourceByRecordIDRequestDefaultTypeInternal _FindPathIncludingSourceByRecordIDRequest_default_instance_;
class FindPathIncludingSourceByRecordIDResponse;
struct FindPathIncludingSourceByRecordIDResponseDefaultTypeInternal;
extern FindPathIncludingSourceByRecordIDResponseDefaultTypeInternal _FindPathIncludingSourceByRecordIDResponse_default_instance_;
class FindPathIncludingSourceByRecordID_V2Request;
struct FindPathIncludingSourceByRecordID_V2RequestDefaultTypeInternal;
extern FindPathIncludingSourceByRecordID_V2RequestDefaultTypeInternal _FindPathIncludingSourceByRecordID_V2Request_default_instance_;
class FindPathIncludingSourceByRecordID_V2Response;
struct FindPathIncludingSourceByRecordID_V2ResponseDefaultTypeInternal;
extern FindPathIncludingSourceByRecordID_V2ResponseDefaultTypeInternal _FindPathIncludingSourceByRecordID_V2Response_default_instance_;
class GetActiveConfigIDRequest;
struct GetActiveConfigIDRequestDefaultTypeInternal;
extern GetActiveConfigIDRequestDefaultTypeInternal _GetActiveConfigIDRequest_default_instance_;
class GetActiveConfigIDResponse;
struct GetActiveConfigIDResponseDefaultTypeInternal;
extern GetActiveConfigIDResponseDefaultTypeInternal _GetActiveConfigIDResponse_default_instance_;
class GetEntityByEntityIDRequest;
struct GetEntityByEntityIDRequestDefaultTypeInternal;
extern GetEntityByEntityIDRequestDefaultTypeInternal _GetEntityByEntityIDRequest_default_instance_;
class GetEntityByEntityIDResponse;
struct GetEntityByEntityIDResponseDefaultTypeInternal;
extern GetEntityByEntityIDResponseDefaultTypeInternal _GetEntityByEntityIDResponse_default_instance_;
class GetEntityByEntityID_V2Request;
struct GetEntityByEntityID_V2RequestDefaultTypeInternal;
extern GetEntityByEntityID_V2RequestDefaultTypeInternal _GetEntityByEntityID_V2Request_default_instance_;
class GetEntityByEntityID_V2Response;
struct GetEntityByEntityID_V2ResponseDefaultTypeInternal;
extern GetEntityByEntityID_V2ResponseDefaultTypeInternal _GetEntityByEntityID_V2Response_default_instance_;
class GetEntityByRecordIDRequest;
struct GetEntityByRecordIDRequestDefaultTypeInternal;
extern GetEntityByRecordIDRequestDefaultTypeInternal _GetEntityByRecordIDRequest_default_instance_;
class GetEntityByRecordIDResponse;
struct GetEntityByRecordIDResponseDefaultTypeInternal;
extern GetEntityByRecordIDResponseDefaultTypeInternal _GetEntityByRecordIDResponse_default_instance_;
class GetEntityByRecordID_V2Request;
struct GetEntityByRecordID_V2RequestDefaultTypeInternal;
extern GetEntityByRecordID_V2RequestDefaultTypeInternal _GetEntityByRecordID_V2Request_default_instance_;
class GetEntityByRecordID_V2Response;
struct GetEntityByRecordID_V2ResponseDefaultTypeInternal;
extern GetEntityByRecordID_V2ResponseDefaultTypeInternal _GetEntityByRecordID_V2Response_default_instance_;
class GetRecordRequest;
struct GetRecordRequestDefaultTypeInternal;
extern GetRecordRequestDefaultTypeInternal _GetRecordRequest_default_instance_;
class GetRecordResponse;
struct GetRecordResponseDefaultTypeInternal;
extern GetRecordResponseDefaultTypeInternal _GetRecordResponse_default_instance_;
class GetRecord_V2Request;
struct GetRecord_V2RequestDefaultTypeInternal;
extern GetRecord_V2RequestDefaultTypeInternal _GetRecord_V2Request_default_instance_;
class GetRecord_V2Response;
struct GetRecord_V2ResponseDefaultTypeInternal;
extern GetRecord_V2ResponseDefaultTypeInternal _GetRecord_V2Response_default_instance_;
class GetRedoRecordRequest;
struct GetRedoRecordRequestDefaultTypeInternal;
extern GetRedoRecordRequestDefaultTypeInternal _GetRedoRecordRequest_default_instance_;
class GetRedoRecordResponse;
struct GetRedoRecordResponseDefaultTypeInternal;
extern GetRedoRecordResponseDefaultTypeInternal _GetRedoRecordResponse_default_instance_;
class GetRepositoryLastModifiedTimeRequest;
struct GetRepositoryLastModifiedTimeRequestDefaultTypeInternal;
extern GetRepositoryLastModifiedTimeRequestDefaultTypeInternal _GetRepositoryLastModifiedTimeRequest_default_instance_;
class GetRepositoryLastModifiedTimeResponse;
struct GetRepositoryLastModifiedTimeResponseDefaultTypeInternal;
extern GetRepositoryLastModifiedTimeResponseDefaultTypeInternal _GetRepositoryLastModifiedTimeResponse_default_instance_;
class GetVirtualEntityByRecordIDRequest;
struct GetVirtualEntityByRecordIDRequestDefaultTypeInternal;
extern GetVirtualEntityByRecordIDRequestDefaultTypeInternal _GetVirtualEntityByRecordIDRequest_default_instance_;
class GetVirtualEntityByRecordIDResponse;
struct GetVirtualEntityByRecordIDResponseDefaultTypeInternal;
extern GetVirtualEntityByRecordIDResponseDefaultTypeInternal _GetVirtualEntityByRecordIDResponse_default_instance_;
class GetVirtualEntityByRecordID_V2Request;
struct GetVirtualEntityByRecordID_V2RequestDefaultTypeInternal;
extern GetVirtualEntityByRecordID_V2RequestDefaultTypeInternal _GetVirtualEntityByRecordID_V2Request_default_instance_;
class GetVirtualEntityByRecordID_V2Response;
struct GetVirtualEntityByRecordID_V2ResponseDefaultTypeInternal;
extern GetVirtualEntityByRecordID_V2ResponseDefaultTypeInternal _GetVirtualEntityByRecordID_V2Response_default_instance_;
class HowEntityByEntityIDRequest;
struct HowEntityByEntityIDRequestDefaultTypeInternal;
extern HowEntityByEntityIDRequestDefaultTypeInternal _HowEntityByEntityIDRequest_default_instance_;
class HowEntityByEntityIDResponse;
struct HowEntityByEntityIDResponseDefaultTypeInternal;
extern HowEntityByEntityIDResponseDefaultTypeInternal _HowEntityByEntityIDResponse_default_instance_;
class HowEntityByEntityID_V2Request;
struct HowEntityByEntityID_V2RequestDefaultTypeInternal;
extern HowEntityByEntityID_V2RequestDefaultTypeInternal _HowEntityByEntityID_V2Request_default_instance_;
class HowEntityByEntityID_V2Response;
struct HowEntityByEntityID_V2ResponseDefaultTypeInternal;
extern HowEntityByEntityID_V2ResponseDefaultTypeInternal _HowEntityByEntityID_V2Response_default_instance_;
class InitRequest;
struct InitRequestDefaultTypeInternal;
extern InitRequestDefaultTypeInternal _InitRequest_default_instance_;
class InitResponse;
struct InitResponseDefaultTypeInternal;
extern InitResponseDefaultTypeInternal _InitResponse_default_instance_;
class InitWithConfigIDRequest;
struct InitWithConfigIDRequestDefaultTypeInternal;
extern InitWithConfigIDRequestDefaultTypeInternal _InitWithConfigIDRequest_default_instance_;
class InitWithConfigIDResponse;
struct InitWithConfigIDResponseDefaultTypeInternal;
extern InitWithConfigIDResponseDefaultTypeInternal _InitWithConfigIDResponse_default_instance_;
class PrimeEngineRequest;
struct PrimeEngineRequestDefaultTypeInternal;
extern PrimeEngineRequestDefaultTypeInternal _PrimeEngineRequest_default_instance_;
class PrimeEngineResponse;
struct PrimeEngineResponseDefaultTypeInternal;
extern PrimeEngineResponseDefaultTypeInternal _PrimeEngineResponse_default_instance_;
class ProcessRedoRecordRequest;
struct ProcessRedoRecordRequestDefaultTypeInternal;
extern ProcessRedoRecordRequestDefaultTypeInternal _ProcessRedoRecordRequest_default_instance_;
class ProcessRedoRecordResponse;
struct ProcessRedoRecordResponseDefaultTypeInternal;
extern ProcessRedoRecordResponseDefaultTypeInternal _ProcessRedoRecordResponse_default_instance_;
class ProcessRedoRecordWithInfoRequest;
struct ProcessRedoRecordWithInfoRequestDefaultTypeInternal;
extern ProcessRedoRecordWithInfoRequestDefaultTypeInternal _ProcessRedoRecordWithInfoRequest_default_instance_;
class ProcessRedoRecordWithInfoResponse;
struct ProcessRedoRecordWithInfoResponseDefaultTypeInternal;
extern ProcessRedoRecordWithInfoResponseDefaultTypeInternal _ProcessRedoRecordWithInfoResponse_default_instance_;
class ProcessRequest;
struct ProcessRequestDefaultTypeInternal;
extern ProcessRequestDefaultTypeInternal _ProcessRequest_default_instance_;
class ProcessResponse;
struct ProcessResponseDefaultTypeInternal;
extern ProcessResponseDefaultTypeInternal _ProcessResponse_default_instance_;
class ProcessWithInfoRequest;
struct ProcessWithInfoRequestDefaultTypeInternal;
extern ProcessWithInfoRequestDefaultTypeInternal _ProcessWithInfoRequest_default_instance_;
class ProcessWithInfoResponse;
struct ProcessWithInfoResponseDefaultTypeInternal;
extern ProcessWithInfoResponseDefaultTypeInternal _ProcessWithInfoResponse_default_instance_;
class ProcessWithResponseRequest;
struct ProcessWithResponseRequestDefaultTypeInternal;
extern ProcessWithResponseRequestDefaultTypeInternal _ProcessWithResponseRequest_default_instance_;
class ProcessWithResponseResizeRequest;
struct ProcessWithResponseResizeRequestDefaultTypeInternal;
extern ProcessWithResponseResizeRequestDefaultTypeInternal _ProcessWithResponseResizeRequest_default_instance_;
class ProcessWithResponseResizeResponse;
struct ProcessWithResponseResizeResponseDefaultTypeInternal;
extern ProcessWithResponseResizeResponseDefaultTypeInternal _ProcessWithResponseResizeResponse_default_instance_;
class ProcessWithResponseResponse;
struct ProcessWithResponseResponseDefaultTypeInternal;
extern ProcessWithResponseResponseDefaultTypeInternal _ProcessWithResponseResponse_default_instance_;
class PurgeRepositoryRequest;
struct PurgeRepositoryRequestDefaultTypeInternal;
extern PurgeRepositoryRequestDefaultTypeInternal _PurgeRepositoryRequest_default_instance_;
class PurgeRepositoryResponse;
struct PurgeRepositoryResponseDefaultTypeInternal;
extern PurgeRepositoryResponseDefaultTypeInternal _PurgeRepositoryResponse_default_instance_;
class ReevaluateEntityRequest;
struct ReevaluateEntityRequestDefaultTypeInternal;
extern ReevaluateEntityRequestDefaultTypeInternal _ReevaluateEntityRequest_default_instance_;
class ReevaluateEntityResponse;
struct ReevaluateEntityResponseDefaultTypeInternal;
extern ReevaluateEntityResponseDefaultTypeInternal _ReevaluateEntityResponse_default_instance_;
class ReevaluateEntityWithInfoRequest;
struct ReevaluateEntityWithInfoRequestDefaultTypeInternal;
extern ReevaluateEntityWithInfoRequestDefaultTypeInternal _ReevaluateEntityWithInfoRequest_default_instance_;
class ReevaluateEntityWithInfoResponse;
struct ReevaluateEntityWithInfoResponseDefaultTypeInternal;
extern ReevaluateEntityWithInfoResponseDefaultTypeInternal _ReevaluateEntityWithInfoResponse_default_instance_;
class ReevaluateRecordRequest;
struct ReevaluateRecordRequestDefaultTypeInternal;
extern ReevaluateRecordRequestDefaultTypeInternal _ReevaluateRecordRequest_default_instance_;
class ReevaluateRecordResponse;
struct ReevaluateRecordResponseDefaultTypeInternal;
extern ReevaluateRecordResponseDefaultTypeInternal _ReevaluateRecordResponse_default_instance_;
class ReevaluateRecordWithInfoRequest;
struct ReevaluateRecordWithInfoRequestDefaultTypeInternal;
extern ReevaluateRecordWithInfoRequestDefaultTypeInternal _ReevaluateRecordWithInfoRequest_default_instance_;
class ReevaluateRecordWithInfoResponse;
struct ReevaluateRecordWithInfoResponseDefaultTypeInternal;
extern ReevaluateRecordWithInfoResponseDefaultTypeInternal _ReevaluateRecordWithInfoResponse_default_instance_;
class ReinitRequest;
struct ReinitRequestDefaultTypeInternal;
extern ReinitRequestDefaultTypeInternal _ReinitRequest_default_instance_;
class ReinitResponse;
struct ReinitResponseDefaultTypeInternal;
extern ReinitResponseDefaultTypeInternal _ReinitResponse_default_instance_;
class ReplaceRecordRequest;
struct ReplaceRecordRequestDefaultTypeInternal;
extern ReplaceRecordRequestDefaultTypeInternal _ReplaceRecordRequest_default_instance_;
class ReplaceRecordResponse;
struct ReplaceRecordResponseDefaultTypeInternal;
extern ReplaceRecordResponseDefaultTypeInternal _ReplaceRecordResponse_default_instance_;
class ReplaceRecordWithInfoRequest;
struct ReplaceRecordWithInfoRequestDefaultTypeInternal;
extern ReplaceRecordWithInfoRequestDefaultTypeInternal _ReplaceRecordWithInfoRequest_default_instance_;
class ReplaceRecordWithInfoResponse;
struct ReplaceRecordWithInfoResponseDefaultTypeInternal;
extern ReplaceRecordWithInfoResponseDefaultTypeInternal _ReplaceRecordWithInfoResponse_default_instance_;
class SearchByAttributesRequest;
struct SearchByAttributesRequestDefaultTypeInternal;
extern SearchByAttributesRequestDefaultTypeInternal _SearchByAttributesRequest_default_instance_;
class SearchByAttributesResponse;
struct SearchByAttributesResponseDefaultTypeInternal;
extern SearchByAttributesResponseDefaultTypeInternal _SearchByAttributesResponse_default_instance_;
class SearchByAttributes_V2Request;
struct SearchByAttributes_V2RequestDefaultTypeInternal;
extern SearchByAttributes_V2RequestDefaultTypeInternal _SearchByAttributes_V2Request_default_instance_;
class SearchByAttributes_V2Response;
struct SearchByAttributes_V2ResponseDefaultTypeInternal;
extern SearchByAttributes_V2ResponseDefaultTypeInternal _SearchByAttributes_V2Response_default_instance_;
class StatsRequest;
struct StatsRequestDefaultTypeInternal;
extern StatsRequestDefaultTypeInternal _StatsRequest_default_instance_;
class StatsResponse;
struct StatsResponseDefaultTypeInternal;
extern StatsResponseDefaultTypeInternal _StatsResponse_default_instance_;
class StreamExportCSVEntityReportRequest;
struct StreamExportCSVEntityReportRequestDefaultTypeInternal;
extern StreamExportCSVEntityReportRequestDefaultTypeInternal _StreamExportCSVEntityReportRequest_default_instance_;
class StreamExportCSVEntityReportResponse;
struct StreamExportCSVEntityReportResponseDefaultTypeInternal;
extern StreamExportCSVEntityReportResponseDefaultTypeInternal _StreamExportCSVEntityReportResponse_default_instance_;
class StreamExportJSONEntityReportRequest;
struct StreamExportJSONEntityReportRequestDefaultTypeInternal;
extern StreamExportJSONEntityReportRequestDefaultTypeInternal _StreamExportJSONEntityReportRequest_default_instance_;
class StreamExportJSONEntityReportResponse;
struct StreamExportJSONEntityReportResponseDefaultTypeInternal;
extern StreamExportJSONEntityReportResponseDefaultTypeInternal _StreamExportJSONEntityReportResponse_default_instance_;
class WhyEntitiesRequest;
struct WhyEntitiesRequestDefaultTypeInternal;
extern WhyEntitiesRequestDefaultTypeInternal _WhyEntitiesRequest_default_instance_;
class WhyEntitiesResponse;
struct WhyEntitiesResponseDefaultTypeInternal;
extern WhyEntitiesResponseDefaultTypeInternal _WhyEntitiesResponse_default_instance_;
class WhyEntities_V2Request;
struct WhyEntities_V2RequestDefaultTypeInternal;
extern WhyEntities_V2RequestDefaultTypeInternal _WhyEntities_V2Request_default_instance_;
class WhyEntities_V2Response;
struct WhyEntities_V2ResponseDefaultTypeInternal;
extern WhyEntities_V2ResponseDefaultTypeInternal _WhyEntities_V2Response_default_instance_;
class WhyEntityByEntityIDRequest;
struct WhyEntityByEntityIDRequestDefaultTypeInternal;
extern WhyEntityByEntityIDRequestDefaultTypeInternal _WhyEntityByEntityIDRequest_default_instance_;
class WhyEntityByEntityIDResponse;
struct WhyEntityByEntityIDResponseDefaultTypeInternal;
extern WhyEntityByEntityIDResponseDefaultTypeInternal _WhyEntityByEntityIDResponse_default_instance_;
class WhyEntityByEntityID_V2Request;
struct WhyEntityByEntityID_V2RequestDefaultTypeInternal;
extern WhyEntityByEntityID_V2RequestDefaultTypeInternal _WhyEntityByEntityID_V2Request_default_instance_;
class WhyEntityByEntityID_V2Response;
struct WhyEntityByEntityID_V2ResponseDefaultTypeInternal;
extern WhyEntityByEntityID_V2ResponseDefaultTypeInternal _WhyEntityByEntityID_V2Response_default_instance_;
class WhyEntityByRecordIDRequest;
struct WhyEntityByRecordIDRequestDefaultTypeInternal;
extern WhyEntityByRecordIDRequestDefaultTypeInternal _WhyEntityByRecordIDRequest_default_instance_;
class WhyEntityByRecordIDResponse;
struct WhyEntityByRecordIDResponseDefaultTypeInternal;
extern WhyEntityByRecordIDResponseDefaultTypeInternal _WhyEntityByRecordIDResponse_default_instance_;
class WhyEntityByRecordID_V2Request;
struct WhyEntityByRecordID_V2RequestDefaultTypeInternal;
extern WhyEntityByRecordID_V2RequestDefaultTypeInternal _WhyEntityByRecordID_V2Request_default_instance_;
class WhyEntityByRecordID_V2Response;
struct WhyEntityByRecordID_V2ResponseDefaultTypeInternal;
extern WhyEntityByRecordID_V2ResponseDefaultTypeInternal _WhyEntityByRecordID_V2Response_default_instance_;
class WhyRecordsRequest;
struct WhyRecordsRequestDefaultTypeInternal;
extern WhyRecordsRequestDefaultTypeInternal _WhyRecordsRequest_default_instance_;
class WhyRecordsResponse;
struct WhyRecordsResponseDefaultTypeInternal;
extern WhyRecordsResponseDefaultTypeInternal _WhyRecordsResponse_default_instance_;
class WhyRecords_V2Request;
struct WhyRecords_V2RequestDefaultTypeInternal;
extern WhyRecords_V2RequestDefaultTypeInternal _WhyRecords_V2Request_default_instance_;
class WhyRecords_V2Response;
struct WhyRecords_V2ResponseDefaultTypeInternal;
extern WhyRecords_V2ResponseDefaultTypeInternal _WhyRecords_V2Response_default_instance_;
}  // namespace g2engine
PROTOBUF_NAMESPACE_OPEN
template<> ::g2engine::AddRecordRequest* Arena::CreateMaybeMessage<::g2engine::AddRecordRequest>(Arena*);
template<> ::g2engine::AddRecordResponse* Arena::CreateMaybeMessage<::g2engine::AddRecordResponse>(Arena*);
template<> ::g2engine::AddRecordWithInfoRequest* Arena::CreateMaybeMessage<::g2engine::AddRecordWithInfoRequest>(Arena*);
template<> ::g2engine::AddRecordWithInfoResponse* Arena::CreateMaybeMessage<::g2engine::AddRecordWithInfoResponse>(Arena*);
template<> ::g2engine::AddRecordWithInfoWithReturnedRecordIDRequest* Arena::CreateMaybeMessage<::g2engine::AddRecordWithInfoWithReturnedRecordIDRequest>(Arena*);
template<> ::g2engine::AddRecordWithInfoWithReturnedRecordIDResponse* Arena::CreateMaybeMessage<::g2engine::AddRecordWithInfoWithReturnedRecordIDResponse>(Arena*);
template<> ::g2engine::AddRecordWithReturnedRecordIDRequest* Arena::CreateMaybeMessage<::g2engine::AddRecordWithReturnedRecordIDRequest>(Arena*);
template<> ::g2engine::AddRecordWithReturnedRecordIDResponse* Arena::CreateMaybeMessage<::g2engine::AddRecordWithReturnedRecordIDResponse>(Arena*);
template<> ::g2engine::CheckRecordRequest* Arena::CreateMaybeMessage<::g2engine::CheckRecordRequest>(Arena*);
template<> ::g2engine::CheckRecordResponse* Arena::CreateMaybeMessage<::g2engine::CheckRecordResponse>(Arena*);
template<> ::g2engine::CloseExportRequest* Arena::CreateMaybeMessage<::g2engine::CloseExportRequest>(Arena*);
template<> ::g2engine::CloseExportResponse* Arena::CreateMaybeMessage<::g2engine::CloseExportResponse>(Arena*);
template<> ::g2engine::CountRedoRecordsRequest* Arena::CreateMaybeMessage<::g2engine::CountRedoRecordsRequest>(Arena*);
template<> ::g2engine::CountRedoRecordsResponse* Arena::CreateMaybeMessage<::g2engine::CountRedoRecordsResponse>(Arena*);
template<> ::g2engine::DeleteRecordRequest* Arena::CreateMaybeMessage<::g2engine::DeleteRecordRequest>(Arena*);
template<> ::g2engine::DeleteRecordResponse* Arena::CreateMaybeMessage<::g2engine::DeleteRecordResponse>(Arena*);
template<> ::g2engine::DeleteRecordWithInfoRequest* Arena::CreateMaybeMessage<::g2engine::DeleteRecordWithInfoRequest>(Arena*);
template<> ::g2engine::DeleteRecordWithInfoResponse* Arena::CreateMaybeMessage<::g2engine::DeleteRecordWithInfoResponse>(Arena*);
template<> ::g2engine::DestroyRequest* Arena::CreateMaybeMessage<::g2engine::DestroyRequest>(Arena*);
template<> ::g2engine::DestroyResponse* Arena::CreateMaybeMessage<::g2engine::DestroyResponse>(Arena*);
template<> ::g2engine::ExportCSVEntityReportRequest* Arena::CreateMaybeMessage<::g2engine::ExportCSVEntityReportRequest>(Arena*);
template<> ::g2engine::ExportCSVEntityReportResponse* Arena::CreateMaybeMessage<::g2engine::ExportCSVEntityReportResponse>(Arena*);
template<> ::g2engine::ExportConfigAndConfigIDRequest* Arena::CreateMaybeMessage<::g2engine::ExportConfigAndConfigIDRequest>(Arena*);
template<> ::g2engine::ExportConfigAndConfigIDResponse* Arena::CreateMaybeMessage<::g2engine::ExportConfigAndConfigIDResponse>(Arena*);
template<> ::g2engine::ExportConfigRequest* Arena::CreateMaybeMessage<::g2engine::ExportConfigRequest>(Arena*);
template<> ::g2engine::ExportConfigResponse* Arena::CreateMaybeMessage<::g2engine::ExportConfigResponse>(Arena*);
template<> ::g2engine::ExportJSONEntityReportRequest* Arena::CreateMaybeMessage<::g2engine::ExportJSONEntityReportRequest>(Arena*);
template<> ::g2engine::ExportJSONEntityReportResponse* Arena::CreateMaybeMessage<::g2engine::ExportJSONEntityReportResponse>(Arena*);
template<> ::g2engine::FetchNextRequest* Arena::CreateMaybeMessage<::g2engine::FetchNextRequest>(Arena*);
template<> ::g2engine::FetchNextResponse* Arena::CreateMaybeMessage<::g2engine::FetchNextResponse>(Arena*);
template<> ::g2engine::FindInterestingEntitiesByEntityIDRequest* Arena::CreateMaybeMessage<::g2engine::FindInterestingEntitiesByEntityIDRequest>(Arena*);
template<> ::g2engine::FindInterestingEntitiesByEntityIDResponse* Arena::CreateMaybeMessage<::g2engine::FindInterestingEntitiesByEntityIDResponse>(Arena*);
template<> ::g2engine::FindInterestingEntitiesByRecordIDRequest* Arena::CreateMaybeMessage<::g2engine::FindInterestingEntitiesByRecordIDRequest>(Arena*);
template<> ::g2engine::FindInterestingEntitiesByRecordIDResponse* Arena::CreateMaybeMessage<::g2engine::FindInterestingEntitiesByRecordIDResponse>(Arena*);
template<> ::g2engine::FindNetworkByEntityIDRequest* Arena::CreateMaybeMessage<::g2engine::FindNetworkByEntityIDRequest>(Arena*);
template<> ::g2engine::FindNetworkByEntityIDResponse* Arena::CreateMaybeMessage<::g2engine::FindNetworkByEntityIDResponse>(Arena*);
template<> ::g2engine::FindNetworkByEntityID_V2Request* Arena::CreateMaybeMessage<::g2engine::FindNetworkByEntityID_V2Request>(Arena*);
template<> ::g2engine::FindNetworkByEntityID_V2Response* Arena::CreateMaybeMessage<::g2engine::FindNetworkByEntityID_V2Response>(Arena*);
template<> ::g2engine::FindNetworkByRecordIDRequest* Arena::CreateMaybeMessage<::g2engine::FindNetworkByRecordIDRequest>(Arena*);
template<> ::g2engine::FindNetworkByRecordIDResponse* Arena::CreateMaybeMessage<::g2engine::FindNetworkByRecordIDResponse>(Arena*);
template<> ::g2engine::FindNetworkByRecordID_V2Request* Arena::CreateMaybeMessage<::g2engine::FindNetworkByRecordID_V2Request>(Arena*);
template<> ::g2engine::FindNetworkByRecordID_V2Response* Arena::CreateMaybeMessage<::g2engine::FindNetworkByRecordID_V2Response>(Arena*);
template<> ::g2engine::FindPathByEntityIDRequest* Arena::CreateMaybeMessage<::g2engine::FindPathByEntityIDRequest>(Arena*);
template<> ::g2engine::FindPathByEntityIDResponse* Arena::CreateMaybeMessage<::g2engine::FindPathByEntityIDResponse>(Arena*);
template<> ::g2engine::FindPathByEntityID_V2Request* Arena::CreateMaybeMessage<::g2engine::FindPathByEntityID_V2Request>(Arena*);
template<> ::g2engine::FindPathByEntityID_V2Response* Arena::CreateMaybeMessage<::g2engine::FindPathByEntityID_V2Response>(Arena*);
template<> ::g2engine::FindPathByRecordIDRequest* Arena::CreateMaybeMessage<::g2engine::FindPathByRecordIDRequest>(Arena*);
template<> ::g2engine::FindPathByRecordIDResponse* Arena::CreateMaybeMessage<::g2engine::FindPathByRecordIDResponse>(Arena*);
template<> ::g2engine::FindPathByRecordID_V2Request* Arena::CreateMaybeMessage<::g2engine::FindPathByRecordID_V2Request>(Arena*);
template<> ::g2engine::FindPathByRecordID_V2Response* Arena::CreateMaybeMessage<::g2engine::FindPathByRecordID_V2Response>(Arena*);
template<> ::g2engine::FindPathExcludingByEntityIDRequest* Arena::CreateMaybeMessage<::g2engine::FindPathExcludingByEntityIDRequest>(Arena*);
template<> ::g2engine::FindPathExcludingByEntityIDResponse* Arena::CreateMaybeMessage<::g2engine::FindPathExcludingByEntityIDResponse>(Arena*);
template<> ::g2engine::FindPathExcludingByEntityID_V2Request* Arena::CreateMaybeMessage<::g2engine::FindPathExcludingByEntityID_V2Request>(Arena*);
template<> ::g2engine::FindPathExcludingByEntityID_V2Response* Arena::CreateMaybeMessage<::g2engine::FindPathExcludingByEntityID_V2Response>(Arena*);
template<> ::g2engine::FindPathExcludingByRecordIDRequest* Arena::CreateMaybeMessage<::g2engine::FindPathExcludingByRecordIDRequest>(Arena*);
template<> ::g2engine::FindPathExcludingByRecordIDResponse* Arena::CreateMaybeMessage<::g2engine::FindPathExcludingByRecordIDResponse>(Arena*);
template<> ::g2engine::FindPathExcludingByRecordID_V2Request* Arena::CreateMaybeMessage<::g2engine::FindPathExcludingByRecordID_V2Request>(Arena*);
template<> ::g2engine::FindPathExcludingByRecordID_V2Response* Arena::CreateMaybeMessage<::g2engine::FindPathExcludingByRecordID_V2Response>(Arena*);
template<> ::g2engine::FindPathIncludingSourceByEntityIDRequest* Arena::CreateMaybeMessage<::g2engine::FindPathIncludingSourceByEntityIDRequest>(Arena*);
template<> ::g2engine::FindPathIncludingSourceByEntityIDResponse* Arena::CreateMaybeMessage<::g2engine::FindPathIncludingSourceByEntityIDResponse>(Arena*);
template<> ::g2engine::FindPathIncludingSourceByEntityID_V2Request* Arena::CreateMaybeMessage<::g2engine::FindPathIncludingSourceByEntityID_V2Request>(Arena*);
template<> ::g2engine::FindPathIncludingSourceByEntityID_V2Response* Arena::CreateMaybeMessage<::g2engine::FindPathIncludingSourceByEntityID_V2Response>(Arena*);
template<> ::g2engine::FindPathIncludingSourceByRecordIDRequest* Arena::CreateMaybeMessage<::g2engine::FindPathIncludingSourceByRecordIDRequest>(Arena*);
template<> ::g2engine::FindPathIncludingSourceByRecordIDResponse* Arena::CreateMaybeMessage<::g2engine::FindPathIncludingSourceByRecordIDResponse>(Arena*);
template<> ::g2engine::FindPathIncludingSourceByRecordID_V2Request* Arena::CreateMaybeMessage<::g2engine::FindPathIncludingSourceByRecordID_V2Request>(Arena*);
template<> ::g2engine::FindPathIncludingSourceByRecordID_V2Response* Arena::CreateMaybeMessage<::g2engine::FindPathIncludingSourceByRecordID_V2Response>(Arena*);
template<> ::g2engine::GetActiveConfigIDRequest* Arena::CreateMaybeMessage<::g2engine::GetActiveConfigIDRequest>(Arena*);
template<> ::g2engine::GetActiveConfigIDResponse* Arena::CreateMaybeMessage<::g2engine::GetActiveConfigIDResponse>(Arena*);
template<> ::g2engine::GetEntityByEntityIDRequest* Arena::CreateMaybeMessage<::g2engine::GetEntityByEntityIDRequest>(Arena*);
template<> ::g2engine::GetEntityByEntityIDResponse* Arena::CreateMaybeMessage<::g2engine::GetEntityByEntityIDResponse>(Arena*);
template<> ::g2engine::GetEntityByEntityID_V2Request* Arena::CreateMaybeMessage<::g2engine::GetEntityByEntityID_V2Request>(Arena*);
template<> ::g2engine::GetEntityByEntityID_V2Response* Arena::CreateMaybeMessage<::g2engine::GetEntityByEntityID_V2Response>(Arena*);
template<> ::g2engine::GetEntityByRecordIDRequest* Arena::CreateMaybeMessage<::g2engine::GetEntityByRecordIDRequest>(Arena*);
template<> ::g2engine::GetEntityByRecordIDResponse* Arena::CreateMaybeMessage<::g2engine::GetEntityByRecordIDResponse>(Arena*);
template<> ::g2engine::GetEntityByRecordID_V2Request* Arena::CreateMaybeMessage<::g2engine::GetEntityByRecordID_V2Request>(Arena*);
template<> ::g2engine::GetEntityByRecordID_V2Response* Arena::CreateMaybeMessage<::g2engine::GetEntityByRecordID_V2Response>(Arena*);
template<> ::g2engine::GetRecordRequest* Arena::CreateMaybeMessage<::g2engine::GetRecordRequest>(Arena*);
template<> ::g2engine::GetRecordResponse* Arena::CreateMaybeMessage<::g2engine::GetRecordResponse>(Arena*);
template<> ::g2engine::GetRecord_V2Request* Arena::CreateMaybeMessage<::g2engine::GetRecord_V2Request>(Arena*);
template<> ::g2engine::GetRecord_V2Response* Arena::CreateMaybeMessage<::g2engine::GetRecord_V2Response>(Arena*);
template<> ::g2engine::GetRedoRecordRequest* Arena::CreateMaybeMessage<::g2engine::GetRedoRecordRequest>(Arena*);
template<> ::g2engine::GetRedoRecordResponse* Arena::CreateMaybeMessage<::g2engine::GetRedoRecordResponse>(Arena*);
template<> ::g2engine::GetRepositoryLastModifiedTimeRequest* Arena::CreateMaybeMessage<::g2engine::GetRepositoryLastModifiedTimeRequest>(Arena*);
template<> ::g2engine::GetRepositoryLastModifiedTimeResponse* Arena::CreateMaybeMessage<::g2engine::GetRepositoryLastModifiedTimeResponse>(Arena*);
template<> ::g2engine::GetVirtualEntityByRecordIDRequest* Arena::CreateMaybeMessage<::g2engine::GetVirtualEntityByRecordIDRequest>(Arena*);
template<> ::g2engine::GetVirtualEntityByRecordIDResponse* Arena::CreateMaybeMessage<::g2engine::GetVirtualEntityByRecordIDResponse>(Arena*);
template<> ::g2engine::GetVirtualEntityByRecordID_V2Request* Arena::CreateMaybeMessage<::g2engine::GetVirtualEntityByRecordID_V2Request>(Arena*);
template<> ::g2engine::GetVirtualEntityByRecordID_V2Response* Arena::CreateMaybeMessage<::g2engine::GetVirtualEntityByRecordID_V2Response>(Arena*);
template<> ::g2engine::HowEntityByEntityIDRequest* Arena::CreateMaybeMessage<::g2engine::HowEntityByEntityIDRequest>(Arena*);
template<> ::g2engine::HowEntityByEntityIDResponse* Arena::CreateMaybeMessage<::g2engine::HowEntityByEntityIDResponse>(Arena*);
template<> ::g2engine::HowEntityByEntityID_V2Request* Arena::CreateMaybeMessage<::g2engine::HowEntityByEntityID_V2Request>(Arena*);
template<> ::g2engine::HowEntityByEntityID_V2Response* Arena::CreateMaybeMessage<::g2engine::HowEntityByEntityID_V2Response>(Arena*);
template<> ::g2engine::InitRequest* Arena::CreateMaybeMessage<::g2engine::InitRequest>(Arena*);
template<> ::g2engine::InitResponse* Arena::CreateMaybeMessage<::g2engine::InitResponse>(Arena*);
template<> ::g2engine::InitWithConfigIDRequest* Arena::CreateMaybeMessage<::g2engine::InitWithConfigIDRequest>(Arena*);
template<> ::g2engine::InitWithConfigIDResponse* Arena::CreateMaybeMessage<::g2engine::InitWithConfigIDResponse>(Arena*);
template<> ::g2engine::PrimeEngineRequest* Arena::CreateMaybeMessage<::g2engine::PrimeEngineRequest>(Arena*);
template<> ::g2engine::PrimeEngineResponse* Arena::CreateMaybeMessage<::g2engine::PrimeEngineResponse>(Arena*);
template<> ::g2engine::ProcessRedoRecordRequest* Arena::CreateMaybeMessage<::g2engine::ProcessRedoRecordRequest>(Arena*);
template<> ::g2engine::ProcessRedoRecordResponse* Arena::CreateMaybeMessage<::g2engine::ProcessRedoRecordResponse>(Arena*);
template<> ::g2engine::ProcessRedoRecordWithInfoRequest* Arena::CreateMaybeMessage<::g2engine::ProcessRedoRecordWithInfoRequest>(Arena*);
template<> ::g2engine::ProcessRedoRecordWithInfoResponse* Arena::CreateMaybeMessage<::g2engine::ProcessRedoRecordWithInfoResponse>(Arena*);
template<> ::g2engine::ProcessRequest* Arena::CreateMaybeMessage<::g2engine::ProcessRequest>(Arena*);
template<> ::g2engine::ProcessResponse* Arena::CreateMaybeMessage<::g2engine::ProcessResponse>(Arena*);
template<> ::g2engine::ProcessWithInfoRequest* Arena::CreateMaybeMessage<::g2engine::ProcessWithInfoRequest>(Arena*);
template<> ::g2engine::ProcessWithInfoResponse* Arena::CreateMaybeMessage<::g2engine::ProcessWithInfoResponse>(Arena*);
template<> ::g2engine::ProcessWithResponseRequest* Arena::CreateMaybeMessage<::g2engine::ProcessWithResponseRequest>(Arena*);
template<> ::g2engine::ProcessWithResponseResizeRequest* Arena::CreateMaybeMessage<::g2engine::ProcessWithResponseResizeRequest>(Arena*);
template<> ::g2engine::ProcessWithResponseResizeResponse* Arena::CreateMaybeMessage<::g2engine::ProcessWithResponseResizeResponse>(Arena*);
template<> ::g2engine::ProcessWithResponseResponse* Arena::CreateMaybeMessage<::g2engine::ProcessWithResponseResponse>(Arena*);
template<> ::g2engine::PurgeRepositoryRequest* Arena::CreateMaybeMessage<::g2engine::PurgeRepositoryRequest>(Arena*);
template<> ::g2engine::PurgeRepositoryResponse* Arena::CreateMaybeMessage<::g2engine::PurgeRepositoryResponse>(Arena*);
template<> ::g2engine::ReevaluateEntityRequest* Arena::CreateMaybeMessage<::g2engine::ReevaluateEntityRequest>(Arena*);
template<> ::g2engine::ReevaluateEntityResponse* Arena::CreateMaybeMessage<::g2engine::ReevaluateEntityResponse>(Arena*);
template<> ::g2engine::ReevaluateEntityWithInfoRequest* Arena::CreateMaybeMessage<::g2engine::ReevaluateEntityWithInfoRequest>(Arena*);
template<> ::g2engine::ReevaluateEntityWithInfoResponse* Arena::CreateMaybeMessage<::g2engine::ReevaluateEntityWithInfoResponse>(Arena*);
template<> ::g2engine::ReevaluateRecordRequest* Arena::CreateMaybeMessage<::g2engine::ReevaluateRecordRequest>(Arena*);
template<> ::g2engine::ReevaluateRecordResponse* Arena::CreateMaybeMessage<::g2engine::ReevaluateRecordResponse>(Arena*);
template<> ::g2engine::ReevaluateRecordWithInfoRequest* Arena::CreateMaybeMessage<::g2engine::ReevaluateRecordWithInfoRequest>(Arena*);
template<> ::g2engine::ReevaluateRecordWithInfoResponse* Arena::CreateMaybeMessage<::g2engine::ReevaluateRecordWithInfoResponse>(Arena*);
template<> ::g2engine::ReinitRequest* Arena::CreateMaybeMessage<::g2engine::ReinitRequest>(Arena*);
template<> ::g2engine::ReinitResponse* Arena::CreateMaybeMessage<::g2engine::ReinitResponse>(Arena*);
template<> ::g2engine::ReplaceRecordRequest* Arena::CreateMaybeMessage<::g2engine::ReplaceRecordRequest>(Arena*);
template<> ::g2engine::ReplaceRecordResponse* Arena::CreateMaybeMessage<::g2engine::ReplaceRecordResponse>(Arena*);
template<> ::g2engine::ReplaceRecordWithInfoRequest* Arena::CreateMaybeMessage<::g2engine::ReplaceRecordWithInfoRequest>(Arena*);
template<> ::g2engine::ReplaceRecordWithInfoResponse* Arena::CreateMaybeMessage<::g2engine::ReplaceRecordWithInfoResponse>(Arena*);
template<> ::g2engine::SearchByAttributesRequest* Arena::CreateMaybeMessage<::g2engine::SearchByAttributesRequest>(Arena*);
template<> ::g2engine::SearchByAttributesResponse* Arena::CreateMaybeMessage<::g2engine::SearchByAttributesResponse>(Arena*);
template<> ::g2engine::SearchByAttributes_V2Request* Arena::CreateMaybeMessage<::g2engine::SearchByAttributes_V2Request>(Arena*);
template<> ::g2engine::SearchByAttributes_V2Response* Arena::CreateMaybeMessage<::g2engine::SearchByAttributes_V2Response>(Arena*);
template<> ::g2engine::StatsRequest* Arena::CreateMaybeMessage<::g2engine::StatsRequest>(Arena*);
template<> ::g2engine::StatsResponse* Arena::CreateMaybeMessage<::g2engine::StatsResponse>(Arena*);
template<> ::g2engine::StreamExportCSVEntityReportRequest* Arena::CreateMaybeMessage<::g2engine::StreamExportCSVEntityReportRequest>(Arena*);
template<> ::g2engine::StreamExportCSVEntityReportResponse* Arena::CreateMaybeMessage<::g2engine::StreamExportCSVEntityReportResponse>(Arena*);
template<> ::g2engine::StreamExportJSONEntityReportRequest* Arena::CreateMaybeMessage<::g2engine::StreamExportJSONEntityReportRequest>(Arena*);
template<> ::g2engine::StreamExportJSONEntityReportResponse* Arena::CreateMaybeMessage<::g2engine::StreamExportJSONEntityReportResponse>(Arena*);
template<> ::g2engine::WhyEntitiesRequest* Arena::CreateMaybeMessage<::g2engine::WhyEntitiesRequest>(Arena*);
template<> ::g2engine::WhyEntitiesResponse* Arena::CreateMaybeMessage<::g2engine::WhyEntitiesResponse>(Arena*);
template<> ::g2engine::WhyEntities_V2Request* Arena::CreateMaybeMessage<::g2engine::WhyEntities_V2Request>(Arena*);
template<> ::g2engine::WhyEntities_V2Response* Arena::CreateMaybeMessage<::g2engine::WhyEntities_V2Response>(Arena*);
template<> ::g2engine::WhyEntityByEntityIDRequest* Arena::CreateMaybeMessage<::g2engine::WhyEntityByEntityIDRequest>(Arena*);
template<> ::g2engine::WhyEntityByEntityIDResponse* Arena::CreateMaybeMessage<::g2engine::WhyEntityByEntityIDResponse>(Arena*);
template<> ::g2engine::WhyEntityByEntityID_V2Request* Arena::CreateMaybeMessage<::g2engine::WhyEntityByEntityID_V2Request>(Arena*);
template<> ::g2engine::WhyEntityByEntityID_V2Response* Arena::CreateMaybeMessage<::g2engine::WhyEntityByEntityID_V2Response>(Arena*);
template<> ::g2engine::WhyEntityByRecordIDRequest* Arena::CreateMaybeMessage<::g2engine::WhyEntityByRecordIDRequest>(Arena*);
template<> ::g2engine::WhyEntityByRecordIDResponse* Arena::CreateMaybeMessage<::g2engine::WhyEntityByRecordIDResponse>(Arena*);
template<> ::g2engine::WhyEntityByRecordID_V2Request* Arena::CreateMaybeMessage<::g2engine::WhyEntityByRecordID_V2Request>(Arena*);
template<> ::g2engine::WhyEntityByRecordID_V2Response* Arena::CreateMaybeMessage<::g2engine::WhyEntityByRecordID_V2Response>(Arena*);
template<> ::g2engine::WhyRecordsRequest* Arena::CreateMaybeMessage<::g2engine::WhyRecordsRequest>(Arena*);
template<> ::g2engine::WhyRecordsResponse* Arena::CreateMaybeMessage<::g2engine::WhyRecordsResponse>(Arena*);
template<> ::g2engine::WhyRecords_V2Request* Arena::CreateMaybeMessage<::g2engine::WhyRecords_V2Request>(Arena*);
template<> ::g2engine::WhyRecords_V2Response* Arena::CreateMaybeMessage<::g2engine::WhyRecords_V2Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace g2engine {

// ===================================================================

class AddRecordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.AddRecordRequest) */ {
 public:
  inline AddRecordRequest() : AddRecordRequest(nullptr) {}
  ~AddRecordRequest() override;
  explicit PROTOBUF_CONSTEXPR AddRecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRecordRequest(const AddRecordRequest& from);
  AddRecordRequest(AddRecordRequest&& from) noexcept
    : AddRecordRequest() {
    *this = ::std::move(from);
  }

  inline AddRecordRequest& operator=(const AddRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRecordRequest& operator=(AddRecordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRecordRequest* internal_default_instance() {
    return reinterpret_cast<const AddRecordRequest*>(
               &_AddRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddRecordRequest& a, AddRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRecordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddRecordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRecordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddRecordRequest& from) {
    AddRecordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRecordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.AddRecordRequest";
  }
  protected:
  explicit AddRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIDFieldNumber = 2,
    kJsonDataFieldNumber = 3,
    kLoadIDFieldNumber = 4,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode();
  PROTOBUF_NODISCARD std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordID = 2;
  void clear_recordid();
  const std::string& recordid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid();
  PROTOBUF_NODISCARD std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // string jsonData = 3;
  void clear_jsondata();
  const std::string& jsondata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jsondata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jsondata();
  PROTOBUF_NODISCARD std::string* release_jsondata();
  void set_allocated_jsondata(std::string* jsondata);
  private:
  const std::string& _internal_jsondata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jsondata(const std::string& value);
  std::string* _internal_mutable_jsondata();
  public:

  // string loadID = 4;
  void clear_loadid();
  const std::string& loadid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loadid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loadid();
  PROTOBUF_NODISCARD std::string* release_loadid();
  void set_allocated_loadid(std::string* loadid);
  private:
  const std::string& _internal_loadid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loadid(const std::string& value);
  std::string* _internal_mutable_loadid();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.AddRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jsondata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loadid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class AddRecordResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.AddRecordResponse) */ {
 public:
  inline AddRecordResponse() : AddRecordResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AddRecordResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRecordResponse(const AddRecordResponse& from);
  AddRecordResponse(AddRecordResponse&& from) noexcept
    : AddRecordResponse() {
    *this = ::std::move(from);
  }

  inline AddRecordResponse& operator=(const AddRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRecordResponse& operator=(AddRecordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRecordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRecordResponse* internal_default_instance() {
    return reinterpret_cast<const AddRecordResponse*>(
               &_AddRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddRecordResponse& a, AddRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRecordResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddRecordResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddRecordResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddRecordResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.AddRecordResponse";
  }
  protected:
  explicit AddRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.AddRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class AddRecordWithInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.AddRecordWithInfoRequest) */ {
 public:
  inline AddRecordWithInfoRequest() : AddRecordWithInfoRequest(nullptr) {}
  ~AddRecordWithInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR AddRecordWithInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRecordWithInfoRequest(const AddRecordWithInfoRequest& from);
  AddRecordWithInfoRequest(AddRecordWithInfoRequest&& from) noexcept
    : AddRecordWithInfoRequest() {
    *this = ::std::move(from);
  }

  inline AddRecordWithInfoRequest& operator=(const AddRecordWithInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRecordWithInfoRequest& operator=(AddRecordWithInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRecordWithInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRecordWithInfoRequest* internal_default_instance() {
    return reinterpret_cast<const AddRecordWithInfoRequest*>(
               &_AddRecordWithInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddRecordWithInfoRequest& a, AddRecordWithInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRecordWithInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRecordWithInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRecordWithInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddRecordWithInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRecordWithInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddRecordWithInfoRequest& from) {
    AddRecordWithInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRecordWithInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.AddRecordWithInfoRequest";
  }
  protected:
  explicit AddRecordWithInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIDFieldNumber = 2,
    kJsonDataFieldNumber = 3,
    kLoadIDFieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode();
  PROTOBUF_NODISCARD std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordID = 2;
  void clear_recordid();
  const std::string& recordid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid();
  PROTOBUF_NODISCARD std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // string jsonData = 3;
  void clear_jsondata();
  const std::string& jsondata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jsondata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jsondata();
  PROTOBUF_NODISCARD std::string* release_jsondata();
  void set_allocated_jsondata(std::string* jsondata);
  private:
  const std::string& _internal_jsondata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jsondata(const std::string& value);
  std::string* _internal_mutable_jsondata();
  public:

  // string loadID = 4;
  void clear_loadid();
  const std::string& loadid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loadid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loadid();
  PROTOBUF_NODISCARD std::string* release_loadid();
  void set_allocated_loadid(std::string* loadid);
  private:
  const std::string& _internal_loadid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loadid(const std::string& value);
  std::string* _internal_mutable_loadid();
  public:

  // int64 flags = 5;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.AddRecordWithInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jsondata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loadid_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class AddRecordWithInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.AddRecordWithInfoResponse) */ {
 public:
  inline AddRecordWithInfoResponse() : AddRecordWithInfoResponse(nullptr) {}
  ~AddRecordWithInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR AddRecordWithInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRecordWithInfoResponse(const AddRecordWithInfoResponse& from);
  AddRecordWithInfoResponse(AddRecordWithInfoResponse&& from) noexcept
    : AddRecordWithInfoResponse() {
    *this = ::std::move(from);
  }

  inline AddRecordWithInfoResponse& operator=(const AddRecordWithInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRecordWithInfoResponse& operator=(AddRecordWithInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRecordWithInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRecordWithInfoResponse* internal_default_instance() {
    return reinterpret_cast<const AddRecordWithInfoResponse*>(
               &_AddRecordWithInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddRecordWithInfoResponse& a, AddRecordWithInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRecordWithInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRecordWithInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRecordWithInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddRecordWithInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRecordWithInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddRecordWithInfoResponse& from) {
    AddRecordWithInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRecordWithInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.AddRecordWithInfoResponse";
  }
  protected:
  explicit AddRecordWithInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.AddRecordWithInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class AddRecordWithInfoWithReturnedRecordIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest) */ {
 public:
  inline AddRecordWithInfoWithReturnedRecordIDRequest() : AddRecordWithInfoWithReturnedRecordIDRequest(nullptr) {}
  ~AddRecordWithInfoWithReturnedRecordIDRequest() override;
  explicit PROTOBUF_CONSTEXPR AddRecordWithInfoWithReturnedRecordIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRecordWithInfoWithReturnedRecordIDRequest(const AddRecordWithInfoWithReturnedRecordIDRequest& from);
  AddRecordWithInfoWithReturnedRecordIDRequest(AddRecordWithInfoWithReturnedRecordIDRequest&& from) noexcept
    : AddRecordWithInfoWithReturnedRecordIDRequest() {
    *this = ::std::move(from);
  }

  inline AddRecordWithInfoWithReturnedRecordIDRequest& operator=(const AddRecordWithInfoWithReturnedRecordIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRecordWithInfoWithReturnedRecordIDRequest& operator=(AddRecordWithInfoWithReturnedRecordIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRecordWithInfoWithReturnedRecordIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRecordWithInfoWithReturnedRecordIDRequest* internal_default_instance() {
    return reinterpret_cast<const AddRecordWithInfoWithReturnedRecordIDRequest*>(
               &_AddRecordWithInfoWithReturnedRecordIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddRecordWithInfoWithReturnedRecordIDRequest& a, AddRecordWithInfoWithReturnedRecordIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRecordWithInfoWithReturnedRecordIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRecordWithInfoWithReturnedRecordIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRecordWithInfoWithReturnedRecordIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddRecordWithInfoWithReturnedRecordIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRecordWithInfoWithReturnedRecordIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddRecordWithInfoWithReturnedRecordIDRequest& from) {
    AddRecordWithInfoWithReturnedRecordIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRecordWithInfoWithReturnedRecordIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.AddRecordWithInfoWithReturnedRecordIDRequest";
  }
  protected:
  explicit AddRecordWithInfoWithReturnedRecordIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kJsonDataFieldNumber = 2,
    kLoadIDFieldNumber = 3,
    kFlagsFieldNumber = 4,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode();
  PROTOBUF_NODISCARD std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string jsonData = 2;
  void clear_jsondata();
  const std::string& jsondata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jsondata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jsondata();
  PROTOBUF_NODISCARD std::string* release_jsondata();
  void set_allocated_jsondata(std::string* jsondata);
  private:
  const std::string& _internal_jsondata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jsondata(const std::string& value);
  std::string* _internal_mutable_jsondata();
  public:

  // string loadID = 3;
  void clear_loadid();
  const std::string& loadid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loadid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loadid();
  PROTOBUF_NODISCARD std::string* release_loadid();
  void set_allocated_loadid(std::string* loadid);
  private:
  const std::string& _internal_loadid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loadid(const std::string& value);
  std::string* _internal_mutable_loadid();
  public:

  // int64 flags = 4;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jsondata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loadid_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class AddRecordWithInfoWithReturnedRecordIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.AddRecordWithInfoWithReturnedRecordIDResponse) */ {
 public:
  inline AddRecordWithInfoWithReturnedRecordIDResponse() : AddRecordWithInfoWithReturnedRecordIDResponse(nullptr) {}
  ~AddRecordWithInfoWithReturnedRecordIDResponse() override;
  explicit PROTOBUF_CONSTEXPR AddRecordWithInfoWithReturnedRecordIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRecordWithInfoWithReturnedRecordIDResponse(const AddRecordWithInfoWithReturnedRecordIDResponse& from);
  AddRecordWithInfoWithReturnedRecordIDResponse(AddRecordWithInfoWithReturnedRecordIDResponse&& from) noexcept
    : AddRecordWithInfoWithReturnedRecordIDResponse() {
    *this = ::std::move(from);
  }

  inline AddRecordWithInfoWithReturnedRecordIDResponse& operator=(const AddRecordWithInfoWithReturnedRecordIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRecordWithInfoWithReturnedRecordIDResponse& operator=(AddRecordWithInfoWithReturnedRecordIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRecordWithInfoWithReturnedRecordIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRecordWithInfoWithReturnedRecordIDResponse* internal_default_instance() {
    return reinterpret_cast<const AddRecordWithInfoWithReturnedRecordIDResponse*>(
               &_AddRecordWithInfoWithReturnedRecordIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddRecordWithInfoWithReturnedRecordIDResponse& a, AddRecordWithInfoWithReturnedRecordIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRecordWithInfoWithReturnedRecordIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRecordWithInfoWithReturnedRecordIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRecordWithInfoWithReturnedRecordIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddRecordWithInfoWithReturnedRecordIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRecordWithInfoWithReturnedRecordIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddRecordWithInfoWithReturnedRecordIDResponse& from) {
    AddRecordWithInfoWithReturnedRecordIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRecordWithInfoWithReturnedRecordIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.AddRecordWithInfoWithReturnedRecordIDResponse";
  }
  protected:
  explicit AddRecordWithInfoWithReturnedRecordIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWithInfoFieldNumber = 1,
    kRecordIDFieldNumber = 2,
  };
  // string withInfo = 1;
  void clear_withinfo();
  const std::string& withinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_withinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_withinfo();
  PROTOBUF_NODISCARD std::string* release_withinfo();
  void set_allocated_withinfo(std::string* withinfo);
  private:
  const std::string& _internal_withinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_withinfo(const std::string& value);
  std::string* _internal_mutable_withinfo();
  public:

  // string recordID = 2;
  void clear_recordid();
  const std::string& recordid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid();
  PROTOBUF_NODISCARD std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.AddRecordWithInfoWithReturnedRecordIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr withinfo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class AddRecordWithReturnedRecordIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.AddRecordWithReturnedRecordIDRequest) */ {
 public:
  inline AddRecordWithReturnedRecordIDRequest() : AddRecordWithReturnedRecordIDRequest(nullptr) {}
  ~AddRecordWithReturnedRecordIDRequest() override;
  explicit PROTOBUF_CONSTEXPR AddRecordWithReturnedRecordIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRecordWithReturnedRecordIDRequest(const AddRecordWithReturnedRecordIDRequest& from);
  AddRecordWithReturnedRecordIDRequest(AddRecordWithReturnedRecordIDRequest&& from) noexcept
    : AddRecordWithReturnedRecordIDRequest() {
    *this = ::std::move(from);
  }

  inline AddRecordWithReturnedRecordIDRequest& operator=(const AddRecordWithReturnedRecordIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRecordWithReturnedRecordIDRequest& operator=(AddRecordWithReturnedRecordIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRecordWithReturnedRecordIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRecordWithReturnedRecordIDRequest* internal_default_instance() {
    return reinterpret_cast<const AddRecordWithReturnedRecordIDRequest*>(
               &_AddRecordWithReturnedRecordIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AddRecordWithReturnedRecordIDRequest& a, AddRecordWithReturnedRecordIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRecordWithReturnedRecordIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRecordWithReturnedRecordIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRecordWithReturnedRecordIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddRecordWithReturnedRecordIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRecordWithReturnedRecordIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddRecordWithReturnedRecordIDRequest& from) {
    AddRecordWithReturnedRecordIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRecordWithReturnedRecordIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.AddRecordWithReturnedRecordIDRequest";
  }
  protected:
  explicit AddRecordWithReturnedRecordIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kJsonDataFieldNumber = 2,
    kLoadIDFieldNumber = 3,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode();
  PROTOBUF_NODISCARD std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string jsonData = 2;
  void clear_jsondata();
  const std::string& jsondata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jsondata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jsondata();
  PROTOBUF_NODISCARD std::string* release_jsondata();
  void set_allocated_jsondata(std::string* jsondata);
  private:
  const std::string& _internal_jsondata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jsondata(const std::string& value);
  std::string* _internal_mutable_jsondata();
  public:

  // string loadID = 3;
  void clear_loadid();
  const std::string& loadid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loadid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loadid();
  PROTOBUF_NODISCARD std::string* release_loadid();
  void set_allocated_loadid(std::string* loadid);
  private:
  const std::string& _internal_loadid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loadid(const std::string& value);
  std::string* _internal_mutable_loadid();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.AddRecordWithReturnedRecordIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jsondata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loadid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class AddRecordWithReturnedRecordIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.AddRecordWithReturnedRecordIDResponse) */ {
 public:
  inline AddRecordWithReturnedRecordIDResponse() : AddRecordWithReturnedRecordIDResponse(nullptr) {}
  ~AddRecordWithReturnedRecordIDResponse() override;
  explicit PROTOBUF_CONSTEXPR AddRecordWithReturnedRecordIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRecordWithReturnedRecordIDResponse(const AddRecordWithReturnedRecordIDResponse& from);
  AddRecordWithReturnedRecordIDResponse(AddRecordWithReturnedRecordIDResponse&& from) noexcept
    : AddRecordWithReturnedRecordIDResponse() {
    *this = ::std::move(from);
  }

  inline AddRecordWithReturnedRecordIDResponse& operator=(const AddRecordWithReturnedRecordIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRecordWithReturnedRecordIDResponse& operator=(AddRecordWithReturnedRecordIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRecordWithReturnedRecordIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRecordWithReturnedRecordIDResponse* internal_default_instance() {
    return reinterpret_cast<const AddRecordWithReturnedRecordIDResponse*>(
               &_AddRecordWithReturnedRecordIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AddRecordWithReturnedRecordIDResponse& a, AddRecordWithReturnedRecordIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRecordWithReturnedRecordIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRecordWithReturnedRecordIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRecordWithReturnedRecordIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddRecordWithReturnedRecordIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRecordWithReturnedRecordIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddRecordWithReturnedRecordIDResponse& from) {
    AddRecordWithReturnedRecordIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRecordWithReturnedRecordIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.AddRecordWithReturnedRecordIDResponse";
  }
  protected:
  explicit AddRecordWithReturnedRecordIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.AddRecordWithReturnedRecordIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class CheckRecordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.CheckRecordRequest) */ {
 public:
  inline CheckRecordRequest() : CheckRecordRequest(nullptr) {}
  ~CheckRecordRequest() override;
  explicit PROTOBUF_CONSTEXPR CheckRecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckRecordRequest(const CheckRecordRequest& from);
  CheckRecordRequest(CheckRecordRequest&& from) noexcept
    : CheckRecordRequest() {
    *this = ::std::move(from);
  }

  inline CheckRecordRequest& operator=(const CheckRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckRecordRequest& operator=(CheckRecordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckRecordRequest* internal_default_instance() {
    return reinterpret_cast<const CheckRecordRequest*>(
               &_CheckRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CheckRecordRequest& a, CheckRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckRecordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckRecordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckRecordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckRecordRequest& from) {
    CheckRecordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckRecordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.CheckRecordRequest";
  }
  protected:
  explicit CheckRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 1,
    kRecordQueryListFieldNumber = 2,
  };
  // string record = 1;
  void clear_record();
  const std::string& record() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record();
  PROTOBUF_NODISCARD std::string* release_record();
  void set_allocated_record(std::string* record);
  private:
  const std::string& _internal_record() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record(const std::string& value);
  std::string* _internal_mutable_record();
  public:

  // string recordQueryList = 2;
  void clear_recordquerylist();
  const std::string& recordquerylist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordquerylist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordquerylist();
  PROTOBUF_NODISCARD std::string* release_recordquerylist();
  void set_allocated_recordquerylist(std::string* recordquerylist);
  private:
  const std::string& _internal_recordquerylist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordquerylist(const std::string& value);
  std::string* _internal_mutable_recordquerylist();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.CheckRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordquerylist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class CheckRecordResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.CheckRecordResponse) */ {
 public:
  inline CheckRecordResponse() : CheckRecordResponse(nullptr) {}
  ~CheckRecordResponse() override;
  explicit PROTOBUF_CONSTEXPR CheckRecordResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckRecordResponse(const CheckRecordResponse& from);
  CheckRecordResponse(CheckRecordResponse&& from) noexcept
    : CheckRecordResponse() {
    *this = ::std::move(from);
  }

  inline CheckRecordResponse& operator=(const CheckRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckRecordResponse& operator=(CheckRecordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckRecordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckRecordResponse* internal_default_instance() {
    return reinterpret_cast<const CheckRecordResponse*>(
               &_CheckRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CheckRecordResponse& a, CheckRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckRecordResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckRecordResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckRecordResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckRecordResponse& from) {
    CheckRecordResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckRecordResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.CheckRecordResponse";
  }
  protected:
  explicit CheckRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.CheckRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class CloseExportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.CloseExportRequest) */ {
 public:
  inline CloseExportRequest() : CloseExportRequest(nullptr) {}
  ~CloseExportRequest() override;
  explicit PROTOBUF_CONSTEXPR CloseExportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseExportRequest(const CloseExportRequest& from);
  CloseExportRequest(CloseExportRequest&& from) noexcept
    : CloseExportRequest() {
    *this = ::std::move(from);
  }

  inline CloseExportRequest& operator=(const CloseExportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseExportRequest& operator=(CloseExportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseExportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseExportRequest* internal_default_instance() {
    return reinterpret_cast<const CloseExportRequest*>(
               &_CloseExportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CloseExportRequest& a, CloseExportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseExportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseExportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseExportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseExportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseExportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CloseExportRequest& from) {
    CloseExportRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseExportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.CloseExportRequest";
  }
  protected:
  explicit CloseExportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseHandleFieldNumber = 1,
  };
  // int64 responseHandle = 1;
  void clear_responsehandle();
  int64_t responsehandle() const;
  void set_responsehandle(int64_t value);
  private:
  int64_t _internal_responsehandle() const;
  void _internal_set_responsehandle(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.CloseExportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t responsehandle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class CloseExportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.CloseExportResponse) */ {
 public:
  inline CloseExportResponse() : CloseExportResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CloseExportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseExportResponse(const CloseExportResponse& from);
  CloseExportResponse(CloseExportResponse&& from) noexcept
    : CloseExportResponse() {
    *this = ::std::move(from);
  }

  inline CloseExportResponse& operator=(const CloseExportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseExportResponse& operator=(CloseExportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseExportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseExportResponse* internal_default_instance() {
    return reinterpret_cast<const CloseExportResponse*>(
               &_CloseExportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CloseExportResponse& a, CloseExportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseExportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseExportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseExportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseExportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CloseExportResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CloseExportResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.CloseExportResponse";
  }
  protected:
  explicit CloseExportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.CloseExportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class CountRedoRecordsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.CountRedoRecordsRequest) */ {
 public:
  inline CountRedoRecordsRequest() : CountRedoRecordsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CountRedoRecordsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CountRedoRecordsRequest(const CountRedoRecordsRequest& from);
  CountRedoRecordsRequest(CountRedoRecordsRequest&& from) noexcept
    : CountRedoRecordsRequest() {
    *this = ::std::move(from);
  }

  inline CountRedoRecordsRequest& operator=(const CountRedoRecordsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CountRedoRecordsRequest& operator=(CountRedoRecordsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CountRedoRecordsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CountRedoRecordsRequest* internal_default_instance() {
    return reinterpret_cast<const CountRedoRecordsRequest*>(
               &_CountRedoRecordsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CountRedoRecordsRequest& a, CountRedoRecordsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CountRedoRecordsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CountRedoRecordsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CountRedoRecordsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CountRedoRecordsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CountRedoRecordsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CountRedoRecordsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.CountRedoRecordsRequest";
  }
  protected:
  explicit CountRedoRecordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.CountRedoRecordsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class CountRedoRecordsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.CountRedoRecordsResponse) */ {
 public:
  inline CountRedoRecordsResponse() : CountRedoRecordsResponse(nullptr) {}
  ~CountRedoRecordsResponse() override;
  explicit PROTOBUF_CONSTEXPR CountRedoRecordsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CountRedoRecordsResponse(const CountRedoRecordsResponse& from);
  CountRedoRecordsResponse(CountRedoRecordsResponse&& from) noexcept
    : CountRedoRecordsResponse() {
    *this = ::std::move(from);
  }

  inline CountRedoRecordsResponse& operator=(const CountRedoRecordsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CountRedoRecordsResponse& operator=(CountRedoRecordsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CountRedoRecordsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CountRedoRecordsResponse* internal_default_instance() {
    return reinterpret_cast<const CountRedoRecordsResponse*>(
               &_CountRedoRecordsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CountRedoRecordsResponse& a, CountRedoRecordsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CountRedoRecordsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CountRedoRecordsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CountRedoRecordsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CountRedoRecordsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CountRedoRecordsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CountRedoRecordsResponse& from) {
    CountRedoRecordsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CountRedoRecordsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.CountRedoRecordsResponse";
  }
  protected:
  explicit CountRedoRecordsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  int64_t result() const;
  void set_result(int64_t value);
  private:
  int64_t _internal_result() const;
  void _internal_set_result(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.CountRedoRecordsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class DeleteRecordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.DeleteRecordRequest) */ {
 public:
  inline DeleteRecordRequest() : DeleteRecordRequest(nullptr) {}
  ~DeleteRecordRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteRecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRecordRequest(const DeleteRecordRequest& from);
  DeleteRecordRequest(DeleteRecordRequest&& from) noexcept
    : DeleteRecordRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRecordRequest& operator=(const DeleteRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRecordRequest& operator=(DeleteRecordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRecordRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRecordRequest*>(
               &_DeleteRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DeleteRecordRequest& a, DeleteRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRecordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRecordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRecordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteRecordRequest& from) {
    DeleteRecordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRecordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.DeleteRecordRequest";
  }
  protected:
  explicit DeleteRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIDFieldNumber = 2,
    kLoadIDFieldNumber = 3,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode();
  PROTOBUF_NODISCARD std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordID = 2;
  void clear_recordid();
  const std::string& recordid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid();
  PROTOBUF_NODISCARD std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // string loadID = 3;
  void clear_loadid();
  const std::string& loadid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loadid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loadid();
  PROTOBUF_NODISCARD std::string* release_loadid();
  void set_allocated_loadid(std::string* loadid);
  private:
  const std::string& _internal_loadid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loadid(const std::string& value);
  std::string* _internal_mutable_loadid();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.DeleteRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loadid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class DeleteRecordResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.DeleteRecordResponse) */ {
 public:
  inline DeleteRecordResponse() : DeleteRecordResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DeleteRecordResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRecordResponse(const DeleteRecordResponse& from);
  DeleteRecordResponse(DeleteRecordResponse&& from) noexcept
    : DeleteRecordResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRecordResponse& operator=(const DeleteRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRecordResponse& operator=(DeleteRecordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRecordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRecordResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRecordResponse*>(
               &_DeleteRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DeleteRecordResponse& a, DeleteRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRecordResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRecordResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeleteRecordResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeleteRecordResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.DeleteRecordResponse";
  }
  protected:
  explicit DeleteRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.DeleteRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class DeleteRecordWithInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.DeleteRecordWithInfoRequest) */ {
 public:
  inline DeleteRecordWithInfoRequest() : DeleteRecordWithInfoRequest(nullptr) {}
  ~DeleteRecordWithInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteRecordWithInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRecordWithInfoRequest(const DeleteRecordWithInfoRequest& from);
  DeleteRecordWithInfoRequest(DeleteRecordWithInfoRequest&& from) noexcept
    : DeleteRecordWithInfoRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRecordWithInfoRequest& operator=(const DeleteRecordWithInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRecordWithInfoRequest& operator=(DeleteRecordWithInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRecordWithInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRecordWithInfoRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRecordWithInfoRequest*>(
               &_DeleteRecordWithInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DeleteRecordWithInfoRequest& a, DeleteRecordWithInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRecordWithInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRecordWithInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRecordWithInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRecordWithInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRecordWithInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteRecordWithInfoRequest& from) {
    DeleteRecordWithInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRecordWithInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.DeleteRecordWithInfoRequest";
  }
  protected:
  explicit DeleteRecordWithInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIDFieldNumber = 2,
    kLoadIDFieldNumber = 3,
    kFlagsFieldNumber = 4,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode();
  PROTOBUF_NODISCARD std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordID = 2;
  void clear_recordid();
  const std::string& recordid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid();
  PROTOBUF_NODISCARD std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // string loadID = 3;
  void clear_loadid();
  const std::string& loadid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loadid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loadid();
  PROTOBUF_NODISCARD std::string* release_loadid();
  void set_allocated_loadid(std::string* loadid);
  private:
  const std::string& _internal_loadid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loadid(const std::string& value);
  std::string* _internal_mutable_loadid();
  public:

  // int64 flags = 4;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.DeleteRecordWithInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loadid_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class DeleteRecordWithInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.DeleteRecordWithInfoResponse) */ {
 public:
  inline DeleteRecordWithInfoResponse() : DeleteRecordWithInfoResponse(nullptr) {}
  ~DeleteRecordWithInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteRecordWithInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRecordWithInfoResponse(const DeleteRecordWithInfoResponse& from);
  DeleteRecordWithInfoResponse(DeleteRecordWithInfoResponse&& from) noexcept
    : DeleteRecordWithInfoResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRecordWithInfoResponse& operator=(const DeleteRecordWithInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRecordWithInfoResponse& operator=(DeleteRecordWithInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRecordWithInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRecordWithInfoResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRecordWithInfoResponse*>(
               &_DeleteRecordWithInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DeleteRecordWithInfoResponse& a, DeleteRecordWithInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRecordWithInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRecordWithInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRecordWithInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRecordWithInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRecordWithInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteRecordWithInfoResponse& from) {
    DeleteRecordWithInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRecordWithInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.DeleteRecordWithInfoResponse";
  }
  protected:
  explicit DeleteRecordWithInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.DeleteRecordWithInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class DestroyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.DestroyRequest) */ {
 public:
  inline DestroyRequest() : DestroyRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DestroyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DestroyRequest(const DestroyRequest& from);
  DestroyRequest(DestroyRequest&& from) noexcept
    : DestroyRequest() {
    *this = ::std::move(from);
  }

  inline DestroyRequest& operator=(const DestroyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyRequest& operator=(DestroyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DestroyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DestroyRequest* internal_default_instance() {
    return reinterpret_cast<const DestroyRequest*>(
               &_DestroyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DestroyRequest& a, DestroyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestroyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DestroyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DestroyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DestroyRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DestroyRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.DestroyRequest";
  }
  protected:
  explicit DestroyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.DestroyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class DestroyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.DestroyResponse) */ {
 public:
  inline DestroyResponse() : DestroyResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DestroyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DestroyResponse(const DestroyResponse& from);
  DestroyResponse(DestroyResponse&& from) noexcept
    : DestroyResponse() {
    *this = ::std::move(from);
  }

  inline DestroyResponse& operator=(const DestroyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyResponse& operator=(DestroyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DestroyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DestroyResponse* internal_default_instance() {
    return reinterpret_cast<const DestroyResponse*>(
               &_DestroyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DestroyResponse& a, DestroyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestroyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DestroyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DestroyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DestroyResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DestroyResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.DestroyResponse";
  }
  protected:
  explicit DestroyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.DestroyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ExportConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.ExportConfigRequest) */ {
 public:
  inline ExportConfigRequest() : ExportConfigRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ExportConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportConfigRequest(const ExportConfigRequest& from);
  ExportConfigRequest(ExportConfigRequest&& from) noexcept
    : ExportConfigRequest() {
    *this = ::std::move(from);
  }

  inline ExportConfigRequest& operator=(const ExportConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportConfigRequest& operator=(ExportConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportConfigRequest* internal_default_instance() {
    return reinterpret_cast<const ExportConfigRequest*>(
               &_ExportConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ExportConfigRequest& a, ExportConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ExportConfigRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ExportConfigRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ExportConfigRequest";
  }
  protected:
  explicit ExportConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.ExportConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ExportConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ExportConfigResponse) */ {
 public:
  inline ExportConfigResponse() : ExportConfigResponse(nullptr) {}
  ~ExportConfigResponse() override;
  explicit PROTOBUF_CONSTEXPR ExportConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportConfigResponse(const ExportConfigResponse& from);
  ExportConfigResponse(ExportConfigResponse&& from) noexcept
    : ExportConfigResponse() {
    *this = ::std::move(from);
  }

  inline ExportConfigResponse& operator=(const ExportConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportConfigResponse& operator=(ExportConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportConfigResponse* internal_default_instance() {
    return reinterpret_cast<const ExportConfigResponse*>(
               &_ExportConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ExportConfigResponse& a, ExportConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExportConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExportConfigResponse& from) {
    ExportConfigResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ExportConfigResponse";
  }
  protected:
  explicit ExportConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ExportConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ExportConfigAndConfigIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.ExportConfigAndConfigIDRequest) */ {
 public:
  inline ExportConfigAndConfigIDRequest() : ExportConfigAndConfigIDRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ExportConfigAndConfigIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportConfigAndConfigIDRequest(const ExportConfigAndConfigIDRequest& from);
  ExportConfigAndConfigIDRequest(ExportConfigAndConfigIDRequest&& from) noexcept
    : ExportConfigAndConfigIDRequest() {
    *this = ::std::move(from);
  }

  inline ExportConfigAndConfigIDRequest& operator=(const ExportConfigAndConfigIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportConfigAndConfigIDRequest& operator=(ExportConfigAndConfigIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportConfigAndConfigIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportConfigAndConfigIDRequest* internal_default_instance() {
    return reinterpret_cast<const ExportConfigAndConfigIDRequest*>(
               &_ExportConfigAndConfigIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ExportConfigAndConfigIDRequest& a, ExportConfigAndConfigIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportConfigAndConfigIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportConfigAndConfigIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportConfigAndConfigIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportConfigAndConfigIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ExportConfigAndConfigIDRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ExportConfigAndConfigIDRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ExportConfigAndConfigIDRequest";
  }
  protected:
  explicit ExportConfigAndConfigIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.ExportConfigAndConfigIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ExportConfigAndConfigIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ExportConfigAndConfigIDResponse) */ {
 public:
  inline ExportConfigAndConfigIDResponse() : ExportConfigAndConfigIDResponse(nullptr) {}
  ~ExportConfigAndConfigIDResponse() override;
  explicit PROTOBUF_CONSTEXPR ExportConfigAndConfigIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportConfigAndConfigIDResponse(const ExportConfigAndConfigIDResponse& from);
  ExportConfigAndConfigIDResponse(ExportConfigAndConfigIDResponse&& from) noexcept
    : ExportConfigAndConfigIDResponse() {
    *this = ::std::move(from);
  }

  inline ExportConfigAndConfigIDResponse& operator=(const ExportConfigAndConfigIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportConfigAndConfigIDResponse& operator=(ExportConfigAndConfigIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportConfigAndConfigIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportConfigAndConfigIDResponse* internal_default_instance() {
    return reinterpret_cast<const ExportConfigAndConfigIDResponse*>(
               &_ExportConfigAndConfigIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ExportConfigAndConfigIDResponse& a, ExportConfigAndConfigIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportConfigAndConfigIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportConfigAndConfigIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportConfigAndConfigIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportConfigAndConfigIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExportConfigAndConfigIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExportConfigAndConfigIDResponse& from) {
    ExportConfigAndConfigIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportConfigAndConfigIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ExportConfigAndConfigIDResponse";
  }
  protected:
  explicit ExportConfigAndConfigIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kConfigIDFieldNumber = 2,
  };
  // string config = 1;
  void clear_config();
  const std::string& config() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config();
  PROTOBUF_NODISCARD std::string* release_config();
  void set_allocated_config(std::string* config);
  private:
  const std::string& _internal_config() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config(const std::string& value);
  std::string* _internal_mutable_config();
  public:

  // int64 configID = 2;
  void clear_configid();
  int64_t configid() const;
  void set_configid(int64_t value);
  private:
  int64_t _internal_configid() const;
  void _internal_set_configid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ExportConfigAndConfigIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_;
    int64_t configid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ExportCSVEntityReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ExportCSVEntityReportRequest) */ {
 public:
  inline ExportCSVEntityReportRequest() : ExportCSVEntityReportRequest(nullptr) {}
  ~ExportCSVEntityReportRequest() override;
  explicit PROTOBUF_CONSTEXPR ExportCSVEntityReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportCSVEntityReportRequest(const ExportCSVEntityReportRequest& from);
  ExportCSVEntityReportRequest(ExportCSVEntityReportRequest&& from) noexcept
    : ExportCSVEntityReportRequest() {
    *this = ::std::move(from);
  }

  inline ExportCSVEntityReportRequest& operator=(const ExportCSVEntityReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportCSVEntityReportRequest& operator=(ExportCSVEntityReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportCSVEntityReportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportCSVEntityReportRequest* internal_default_instance() {
    return reinterpret_cast<const ExportCSVEntityReportRequest*>(
               &_ExportCSVEntityReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ExportCSVEntityReportRequest& a, ExportCSVEntityReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportCSVEntityReportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportCSVEntityReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportCSVEntityReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportCSVEntityReportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExportCSVEntityReportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExportCSVEntityReportRequest& from) {
    ExportCSVEntityReportRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportCSVEntityReportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ExportCSVEntityReportRequest";
  }
  protected:
  explicit ExportCSVEntityReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCsvColumnListFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // string csvColumnList = 1;
  void clear_csvcolumnlist();
  const std::string& csvcolumnlist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_csvcolumnlist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_csvcolumnlist();
  PROTOBUF_NODISCARD std::string* release_csvcolumnlist();
  void set_allocated_csvcolumnlist(std::string* csvcolumnlist);
  private:
  const std::string& _internal_csvcolumnlist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_csvcolumnlist(const std::string& value);
  std::string* _internal_mutable_csvcolumnlist();
  public:

  // int64 flags = 2;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ExportCSVEntityReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csvcolumnlist_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ExportCSVEntityReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ExportCSVEntityReportResponse) */ {
 public:
  inline ExportCSVEntityReportResponse() : ExportCSVEntityReportResponse(nullptr) {}
  ~ExportCSVEntityReportResponse() override;
  explicit PROTOBUF_CONSTEXPR ExportCSVEntityReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportCSVEntityReportResponse(const ExportCSVEntityReportResponse& from);
  ExportCSVEntityReportResponse(ExportCSVEntityReportResponse&& from) noexcept
    : ExportCSVEntityReportResponse() {
    *this = ::std::move(from);
  }

  inline ExportCSVEntityReportResponse& operator=(const ExportCSVEntityReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportCSVEntityReportResponse& operator=(ExportCSVEntityReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportCSVEntityReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportCSVEntityReportResponse* internal_default_instance() {
    return reinterpret_cast<const ExportCSVEntityReportResponse*>(
               &_ExportCSVEntityReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ExportCSVEntityReportResponse& a, ExportCSVEntityReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportCSVEntityReportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportCSVEntityReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportCSVEntityReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportCSVEntityReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExportCSVEntityReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExportCSVEntityReportResponse& from) {
    ExportCSVEntityReportResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportCSVEntityReportResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ExportCSVEntityReportResponse";
  }
  protected:
  explicit ExportCSVEntityReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  int64_t result() const;
  void set_result(int64_t value);
  private:
  int64_t _internal_result() const;
  void _internal_set_result(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ExportCSVEntityReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ExportJSONEntityReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ExportJSONEntityReportRequest) */ {
 public:
  inline ExportJSONEntityReportRequest() : ExportJSONEntityReportRequest(nullptr) {}
  ~ExportJSONEntityReportRequest() override;
  explicit PROTOBUF_CONSTEXPR ExportJSONEntityReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportJSONEntityReportRequest(const ExportJSONEntityReportRequest& from);
  ExportJSONEntityReportRequest(ExportJSONEntityReportRequest&& from) noexcept
    : ExportJSONEntityReportRequest() {
    *this = ::std::move(from);
  }

  inline ExportJSONEntityReportRequest& operator=(const ExportJSONEntityReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportJSONEntityReportRequest& operator=(ExportJSONEntityReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportJSONEntityReportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportJSONEntityReportRequest* internal_default_instance() {
    return reinterpret_cast<const ExportJSONEntityReportRequest*>(
               &_ExportJSONEntityReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ExportJSONEntityReportRequest& a, ExportJSONEntityReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportJSONEntityReportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportJSONEntityReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportJSONEntityReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportJSONEntityReportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExportJSONEntityReportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExportJSONEntityReportRequest& from) {
    ExportJSONEntityReportRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportJSONEntityReportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ExportJSONEntityReportRequest";
  }
  protected:
  explicit ExportJSONEntityReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
  };
  // int64 flags = 1;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ExportJSONEntityReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ExportJSONEntityReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ExportJSONEntityReportResponse) */ {
 public:
  inline ExportJSONEntityReportResponse() : ExportJSONEntityReportResponse(nullptr) {}
  ~ExportJSONEntityReportResponse() override;
  explicit PROTOBUF_CONSTEXPR ExportJSONEntityReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportJSONEntityReportResponse(const ExportJSONEntityReportResponse& from);
  ExportJSONEntityReportResponse(ExportJSONEntityReportResponse&& from) noexcept
    : ExportJSONEntityReportResponse() {
    *this = ::std::move(from);
  }

  inline ExportJSONEntityReportResponse& operator=(const ExportJSONEntityReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportJSONEntityReportResponse& operator=(ExportJSONEntityReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExportJSONEntityReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportJSONEntityReportResponse* internal_default_instance() {
    return reinterpret_cast<const ExportJSONEntityReportResponse*>(
               &_ExportJSONEntityReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ExportJSONEntityReportResponse& a, ExportJSONEntityReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportJSONEntityReportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportJSONEntityReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExportJSONEntityReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExportJSONEntityReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExportJSONEntityReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExportJSONEntityReportResponse& from) {
    ExportJSONEntityReportResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportJSONEntityReportResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ExportJSONEntityReportResponse";
  }
  protected:
  explicit ExportJSONEntityReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  int64_t result() const;
  void set_result(int64_t value);
  private:
  int64_t _internal_result() const;
  void _internal_set_result(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ExportJSONEntityReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FetchNextRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FetchNextRequest) */ {
 public:
  inline FetchNextRequest() : FetchNextRequest(nullptr) {}
  ~FetchNextRequest() override;
  explicit PROTOBUF_CONSTEXPR FetchNextRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchNextRequest(const FetchNextRequest& from);
  FetchNextRequest(FetchNextRequest&& from) noexcept
    : FetchNextRequest() {
    *this = ::std::move(from);
  }

  inline FetchNextRequest& operator=(const FetchNextRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchNextRequest& operator=(FetchNextRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchNextRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchNextRequest* internal_default_instance() {
    return reinterpret_cast<const FetchNextRequest*>(
               &_FetchNextRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(FetchNextRequest& a, FetchNextRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchNextRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchNextRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchNextRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchNextRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchNextRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FetchNextRequest& from) {
    FetchNextRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchNextRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FetchNextRequest";
  }
  protected:
  explicit FetchNextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseHandleFieldNumber = 1,
  };
  // int64 responseHandle = 1;
  void clear_responsehandle();
  int64_t responsehandle() const;
  void set_responsehandle(int64_t value);
  private:
  int64_t _internal_responsehandle() const;
  void _internal_set_responsehandle(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FetchNextRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t responsehandle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FetchNextResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FetchNextResponse) */ {
 public:
  inline FetchNextResponse() : FetchNextResponse(nullptr) {}
  ~FetchNextResponse() override;
  explicit PROTOBUF_CONSTEXPR FetchNextResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchNextResponse(const FetchNextResponse& from);
  FetchNextResponse(FetchNextResponse&& from) noexcept
    : FetchNextResponse() {
    *this = ::std::move(from);
  }

  inline FetchNextResponse& operator=(const FetchNextResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchNextResponse& operator=(FetchNextResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchNextResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchNextResponse* internal_default_instance() {
    return reinterpret_cast<const FetchNextResponse*>(
               &_FetchNextResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(FetchNextResponse& a, FetchNextResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchNextResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchNextResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchNextResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchNextResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchNextResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FetchNextResponse& from) {
    FetchNextResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchNextResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FetchNextResponse";
  }
  protected:
  explicit FetchNextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FetchNextResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindInterestingEntitiesByEntityIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindInterestingEntitiesByEntityIDRequest) */ {
 public:
  inline FindInterestingEntitiesByEntityIDRequest() : FindInterestingEntitiesByEntityIDRequest(nullptr) {}
  ~FindInterestingEntitiesByEntityIDRequest() override;
  explicit PROTOBUF_CONSTEXPR FindInterestingEntitiesByEntityIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindInterestingEntitiesByEntityIDRequest(const FindInterestingEntitiesByEntityIDRequest& from);
  FindInterestingEntitiesByEntityIDRequest(FindInterestingEntitiesByEntityIDRequest&& from) noexcept
    : FindInterestingEntitiesByEntityIDRequest() {
    *this = ::std::move(from);
  }

  inline FindInterestingEntitiesByEntityIDRequest& operator=(const FindInterestingEntitiesByEntityIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindInterestingEntitiesByEntityIDRequest& operator=(FindInterestingEntitiesByEntityIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindInterestingEntitiesByEntityIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindInterestingEntitiesByEntityIDRequest* internal_default_instance() {
    return reinterpret_cast<const FindInterestingEntitiesByEntityIDRequest*>(
               &_FindInterestingEntitiesByEntityIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(FindInterestingEntitiesByEntityIDRequest& a, FindInterestingEntitiesByEntityIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindInterestingEntitiesByEntityIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindInterestingEntitiesByEntityIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindInterestingEntitiesByEntityIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindInterestingEntitiesByEntityIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindInterestingEntitiesByEntityIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindInterestingEntitiesByEntityIDRequest& from) {
    FindInterestingEntitiesByEntityIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindInterestingEntitiesByEntityIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindInterestingEntitiesByEntityIDRequest";
  }
  protected:
  explicit FindInterestingEntitiesByEntityIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIDFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // int64 entityID = 1;
  void clear_entityid();
  int64_t entityid() const;
  void set_entityid(int64_t value);
  private:
  int64_t _internal_entityid() const;
  void _internal_set_entityid(int64_t value);
  public:

  // int64 flags = 2;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindInterestingEntitiesByEntityIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t entityid_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindInterestingEntitiesByEntityIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindInterestingEntitiesByEntityIDResponse) */ {
 public:
  inline FindInterestingEntitiesByEntityIDResponse() : FindInterestingEntitiesByEntityIDResponse(nullptr) {}
  ~FindInterestingEntitiesByEntityIDResponse() override;
  explicit PROTOBUF_CONSTEXPR FindInterestingEntitiesByEntityIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindInterestingEntitiesByEntityIDResponse(const FindInterestingEntitiesByEntityIDResponse& from);
  FindInterestingEntitiesByEntityIDResponse(FindInterestingEntitiesByEntityIDResponse&& from) noexcept
    : FindInterestingEntitiesByEntityIDResponse() {
    *this = ::std::move(from);
  }

  inline FindInterestingEntitiesByEntityIDResponse& operator=(const FindInterestingEntitiesByEntityIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindInterestingEntitiesByEntityIDResponse& operator=(FindInterestingEntitiesByEntityIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindInterestingEntitiesByEntityIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindInterestingEntitiesByEntityIDResponse* internal_default_instance() {
    return reinterpret_cast<const FindInterestingEntitiesByEntityIDResponse*>(
               &_FindInterestingEntitiesByEntityIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(FindInterestingEntitiesByEntityIDResponse& a, FindInterestingEntitiesByEntityIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindInterestingEntitiesByEntityIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindInterestingEntitiesByEntityIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindInterestingEntitiesByEntityIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindInterestingEntitiesByEntityIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindInterestingEntitiesByEntityIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindInterestingEntitiesByEntityIDResponse& from) {
    FindInterestingEntitiesByEntityIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindInterestingEntitiesByEntityIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindInterestingEntitiesByEntityIDResponse";
  }
  protected:
  explicit FindInterestingEntitiesByEntityIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindInterestingEntitiesByEntityIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindInterestingEntitiesByRecordIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindInterestingEntitiesByRecordIDRequest) */ {
 public:
  inline FindInterestingEntitiesByRecordIDRequest() : FindInterestingEntitiesByRecordIDRequest(nullptr) {}
  ~FindInterestingEntitiesByRecordIDRequest() override;
  explicit PROTOBUF_CONSTEXPR FindInterestingEntitiesByRecordIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindInterestingEntitiesByRecordIDRequest(const FindInterestingEntitiesByRecordIDRequest& from);
  FindInterestingEntitiesByRecordIDRequest(FindInterestingEntitiesByRecordIDRequest&& from) noexcept
    : FindInterestingEntitiesByRecordIDRequest() {
    *this = ::std::move(from);
  }

  inline FindInterestingEntitiesByRecordIDRequest& operator=(const FindInterestingEntitiesByRecordIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindInterestingEntitiesByRecordIDRequest& operator=(FindInterestingEntitiesByRecordIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindInterestingEntitiesByRecordIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindInterestingEntitiesByRecordIDRequest* internal_default_instance() {
    return reinterpret_cast<const FindInterestingEntitiesByRecordIDRequest*>(
               &_FindInterestingEntitiesByRecordIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(FindInterestingEntitiesByRecordIDRequest& a, FindInterestingEntitiesByRecordIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindInterestingEntitiesByRecordIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindInterestingEntitiesByRecordIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindInterestingEntitiesByRecordIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindInterestingEntitiesByRecordIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindInterestingEntitiesByRecordIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindInterestingEntitiesByRecordIDRequest& from) {
    FindInterestingEntitiesByRecordIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindInterestingEntitiesByRecordIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindInterestingEntitiesByRecordIDRequest";
  }
  protected:
  explicit FindInterestingEntitiesByRecordIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIDFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode();
  PROTOBUF_NODISCARD std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordID = 2;
  void clear_recordid();
  const std::string& recordid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid();
  PROTOBUF_NODISCARD std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // int64 flags = 3;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindInterestingEntitiesByRecordIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindInterestingEntitiesByRecordIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindInterestingEntitiesByRecordIDResponse) */ {
 public:
  inline FindInterestingEntitiesByRecordIDResponse() : FindInterestingEntitiesByRecordIDResponse(nullptr) {}
  ~FindInterestingEntitiesByRecordIDResponse() override;
  explicit PROTOBUF_CONSTEXPR FindInterestingEntitiesByRecordIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindInterestingEntitiesByRecordIDResponse(const FindInterestingEntitiesByRecordIDResponse& from);
  FindInterestingEntitiesByRecordIDResponse(FindInterestingEntitiesByRecordIDResponse&& from) noexcept
    : FindInterestingEntitiesByRecordIDResponse() {
    *this = ::std::move(from);
  }

  inline FindInterestingEntitiesByRecordIDResponse& operator=(const FindInterestingEntitiesByRecordIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindInterestingEntitiesByRecordIDResponse& operator=(FindInterestingEntitiesByRecordIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindInterestingEntitiesByRecordIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindInterestingEntitiesByRecordIDResponse* internal_default_instance() {
    return reinterpret_cast<const FindInterestingEntitiesByRecordIDResponse*>(
               &_FindInterestingEntitiesByRecordIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(FindInterestingEntitiesByRecordIDResponse& a, FindInterestingEntitiesByRecordIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindInterestingEntitiesByRecordIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindInterestingEntitiesByRecordIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindInterestingEntitiesByRecordIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindInterestingEntitiesByRecordIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindInterestingEntitiesByRecordIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindInterestingEntitiesByRecordIDResponse& from) {
    FindInterestingEntitiesByRecordIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindInterestingEntitiesByRecordIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindInterestingEntitiesByRecordIDResponse";
  }
  protected:
  explicit FindInterestingEntitiesByRecordIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindInterestingEntitiesByRecordIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindNetworkByEntityIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindNetworkByEntityIDRequest) */ {
 public:
  inline FindNetworkByEntityIDRequest() : FindNetworkByEntityIDRequest(nullptr) {}
  ~FindNetworkByEntityIDRequest() override;
  explicit PROTOBUF_CONSTEXPR FindNetworkByEntityIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindNetworkByEntityIDRequest(const FindNetworkByEntityIDRequest& from);
  FindNetworkByEntityIDRequest(FindNetworkByEntityIDRequest&& from) noexcept
    : FindNetworkByEntityIDRequest() {
    *this = ::std::move(from);
  }

  inline FindNetworkByEntityIDRequest& operator=(const FindNetworkByEntityIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNetworkByEntityIDRequest& operator=(FindNetworkByEntityIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindNetworkByEntityIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindNetworkByEntityIDRequest* internal_default_instance() {
    return reinterpret_cast<const FindNetworkByEntityIDRequest*>(
               &_FindNetworkByEntityIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(FindNetworkByEntityIDRequest& a, FindNetworkByEntityIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNetworkByEntityIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNetworkByEntityIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindNetworkByEntityIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindNetworkByEntityIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindNetworkByEntityIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindNetworkByEntityIDRequest& from) {
    FindNetworkByEntityIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNetworkByEntityIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindNetworkByEntityIDRequest";
  }
  protected:
  explicit FindNetworkByEntityIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityListFieldNumber = 1,
    kMaxDegreeFieldNumber = 2,
    kBuildOutDegreeFieldNumber = 3,
    kMaxEntitiesFieldNumber = 4,
  };
  // string entityList = 1;
  void clear_entitylist();
  const std::string& entitylist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entitylist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entitylist();
  PROTOBUF_NODISCARD std::string* release_entitylist();
  void set_allocated_entitylist(std::string* entitylist);
  private:
  const std::string& _internal_entitylist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entitylist(const std::string& value);
  std::string* _internal_mutable_entitylist();
  public:

  // int32 maxDegree = 2;
  void clear_maxdegree();
  int32_t maxdegree() const;
  void set_maxdegree(int32_t value);
  private:
  int32_t _internal_maxdegree() const;
  void _internal_set_maxdegree(int32_t value);
  public:

  // int32 buildOutDegree = 3;
  void clear_buildoutdegree();
  int32_t buildoutdegree() const;
  void set_buildoutdegree(int32_t value);
  private:
  int32_t _internal_buildoutdegree() const;
  void _internal_set_buildoutdegree(int32_t value);
  public:

  // int32 maxEntities = 4;
  void clear_maxentities();
  int32_t maxentities() const;
  void set_maxentities(int32_t value);
  private:
  int32_t _internal_maxentities() const;
  void _internal_set_maxentities(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindNetworkByEntityIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entitylist_;
    int32_t maxdegree_;
    int32_t buildoutdegree_;
    int32_t maxentities_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindNetworkByEntityIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindNetworkByEntityIDResponse) */ {
 public:
  inline FindNetworkByEntityIDResponse() : FindNetworkByEntityIDResponse(nullptr) {}
  ~FindNetworkByEntityIDResponse() override;
  explicit PROTOBUF_CONSTEXPR FindNetworkByEntityIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindNetworkByEntityIDResponse(const FindNetworkByEntityIDResponse& from);
  FindNetworkByEntityIDResponse(FindNetworkByEntityIDResponse&& from) noexcept
    : FindNetworkByEntityIDResponse() {
    *this = ::std::move(from);
  }

  inline FindNetworkByEntityIDResponse& operator=(const FindNetworkByEntityIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNetworkByEntityIDResponse& operator=(FindNetworkByEntityIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindNetworkByEntityIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindNetworkByEntityIDResponse* internal_default_instance() {
    return reinterpret_cast<const FindNetworkByEntityIDResponse*>(
               &_FindNetworkByEntityIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(FindNetworkByEntityIDResponse& a, FindNetworkByEntityIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNetworkByEntityIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNetworkByEntityIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindNetworkByEntityIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindNetworkByEntityIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindNetworkByEntityIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindNetworkByEntityIDResponse& from) {
    FindNetworkByEntityIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNetworkByEntityIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindNetworkByEntityIDResponse";
  }
  protected:
  explicit FindNetworkByEntityIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindNetworkByEntityIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindNetworkByEntityID_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindNetworkByEntityID_V2Request) */ {
 public:
  inline FindNetworkByEntityID_V2Request() : FindNetworkByEntityID_V2Request(nullptr) {}
  ~FindNetworkByEntityID_V2Request() override;
  explicit PROTOBUF_CONSTEXPR FindNetworkByEntityID_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindNetworkByEntityID_V2Request(const FindNetworkByEntityID_V2Request& from);
  FindNetworkByEntityID_V2Request(FindNetworkByEntityID_V2Request&& from) noexcept
    : FindNetworkByEntityID_V2Request() {
    *this = ::std::move(from);
  }

  inline FindNetworkByEntityID_V2Request& operator=(const FindNetworkByEntityID_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNetworkByEntityID_V2Request& operator=(FindNetworkByEntityID_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindNetworkByEntityID_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindNetworkByEntityID_V2Request* internal_default_instance() {
    return reinterpret_cast<const FindNetworkByEntityID_V2Request*>(
               &_FindNetworkByEntityID_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(FindNetworkByEntityID_V2Request& a, FindNetworkByEntityID_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNetworkByEntityID_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNetworkByEntityID_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindNetworkByEntityID_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindNetworkByEntityID_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindNetworkByEntityID_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindNetworkByEntityID_V2Request& from) {
    FindNetworkByEntityID_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNetworkByEntityID_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindNetworkByEntityID_V2Request";
  }
  protected:
  explicit FindNetworkByEntityID_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityListFieldNumber = 1,
    kMaxDegreeFieldNumber = 2,
    kBuildOutDegreeFieldNumber = 3,
    kFlagsFieldNumber = 5,
    kMaxEntitiesFieldNumber = 4,
  };
  // string entityList = 1;
  void clear_entitylist();
  const std::string& entitylist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entitylist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entitylist();
  PROTOBUF_NODISCARD std::string* release_entitylist();
  void set_allocated_entitylist(std::string* entitylist);
  private:
  const std::string& _internal_entitylist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entitylist(const std::string& value);
  std::string* _internal_mutable_entitylist();
  public:

  // int32 maxDegree = 2;
  void clear_maxdegree();
  int32_t maxdegree() const;
  void set_maxdegree(int32_t value);
  private:
  int32_t _internal_maxdegree() const;
  void _internal_set_maxdegree(int32_t value);
  public:

  // int32 buildOutDegree = 3;
  void clear_buildoutdegree();
  int32_t buildoutdegree() const;
  void set_buildoutdegree(int32_t value);
  private:
  int32_t _internal_buildoutdegree() const;
  void _internal_set_buildoutdegree(int32_t value);
  public:

  // int64 flags = 5;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // int32 maxEntities = 4;
  void clear_maxentities();
  int32_t maxentities() const;
  void set_maxentities(int32_t value);
  private:
  int32_t _internal_maxentities() const;
  void _internal_set_maxentities(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindNetworkByEntityID_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entitylist_;
    int32_t maxdegree_;
    int32_t buildoutdegree_;
    int64_t flags_;
    int32_t maxentities_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindNetworkByEntityID_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindNetworkByEntityID_V2Response) */ {
 public:
  inline FindNetworkByEntityID_V2Response() : FindNetworkByEntityID_V2Response(nullptr) {}
  ~FindNetworkByEntityID_V2Response() override;
  explicit PROTOBUF_CONSTEXPR FindNetworkByEntityID_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindNetworkByEntityID_V2Response(const FindNetworkByEntityID_V2Response& from);
  FindNetworkByEntityID_V2Response(FindNetworkByEntityID_V2Response&& from) noexcept
    : FindNetworkByEntityID_V2Response() {
    *this = ::std::move(from);
  }

  inline FindNetworkByEntityID_V2Response& operator=(const FindNetworkByEntityID_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNetworkByEntityID_V2Response& operator=(FindNetworkByEntityID_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindNetworkByEntityID_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindNetworkByEntityID_V2Response* internal_default_instance() {
    return reinterpret_cast<const FindNetworkByEntityID_V2Response*>(
               &_FindNetworkByEntityID_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(FindNetworkByEntityID_V2Response& a, FindNetworkByEntityID_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNetworkByEntityID_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNetworkByEntityID_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindNetworkByEntityID_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindNetworkByEntityID_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindNetworkByEntityID_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindNetworkByEntityID_V2Response& from) {
    FindNetworkByEntityID_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNetworkByEntityID_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindNetworkByEntityID_V2Response";
  }
  protected:
  explicit FindNetworkByEntityID_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindNetworkByEntityID_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindNetworkByRecordIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindNetworkByRecordIDRequest) */ {
 public:
  inline FindNetworkByRecordIDRequest() : FindNetworkByRecordIDRequest(nullptr) {}
  ~FindNetworkByRecordIDRequest() override;
  explicit PROTOBUF_CONSTEXPR FindNetworkByRecordIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindNetworkByRecordIDRequest(const FindNetworkByRecordIDRequest& from);
  FindNetworkByRecordIDRequest(FindNetworkByRecordIDRequest&& from) noexcept
    : FindNetworkByRecordIDRequest() {
    *this = ::std::move(from);
  }

  inline FindNetworkByRecordIDRequest& operator=(const FindNetworkByRecordIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNetworkByRecordIDRequest& operator=(FindNetworkByRecordIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindNetworkByRecordIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindNetworkByRecordIDRequest* internal_default_instance() {
    return reinterpret_cast<const FindNetworkByRecordIDRequest*>(
               &_FindNetworkByRecordIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(FindNetworkByRecordIDRequest& a, FindNetworkByRecordIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNetworkByRecordIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNetworkByRecordIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindNetworkByRecordIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindNetworkByRecordIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindNetworkByRecordIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindNetworkByRecordIDRequest& from) {
    FindNetworkByRecordIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNetworkByRecordIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindNetworkByRecordIDRequest";
  }
  protected:
  explicit FindNetworkByRecordIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordListFieldNumber = 1,
    kMaxDegreeFieldNumber = 2,
    kBuildOutDegreeFieldNumber = 3,
    kMaxEntitiesFieldNumber = 4,
  };
  // string recordList = 1;
  void clear_recordlist();
  const std::string& recordlist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordlist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordlist();
  PROTOBUF_NODISCARD std::string* release_recordlist();
  void set_allocated_recordlist(std::string* recordlist);
  private:
  const std::string& _internal_recordlist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordlist(const std::string& value);
  std::string* _internal_mutable_recordlist();
  public:

  // int32 maxDegree = 2;
  void clear_maxdegree();
  int32_t maxdegree() const;
  void set_maxdegree(int32_t value);
  private:
  int32_t _internal_maxdegree() const;
  void _internal_set_maxdegree(int32_t value);
  public:

  // int32 buildOutDegree = 3;
  void clear_buildoutdegree();
  int32_t buildoutdegree() const;
  void set_buildoutdegree(int32_t value);
  private:
  int32_t _internal_buildoutdegree() const;
  void _internal_set_buildoutdegree(int32_t value);
  public:

  // int32 maxEntities = 4;
  void clear_maxentities();
  int32_t maxentities() const;
  void set_maxentities(int32_t value);
  private:
  int32_t _internal_maxentities() const;
  void _internal_set_maxentities(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindNetworkByRecordIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordlist_;
    int32_t maxdegree_;
    int32_t buildoutdegree_;
    int32_t maxentities_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindNetworkByRecordIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindNetworkByRecordIDResponse) */ {
 public:
  inline FindNetworkByRecordIDResponse() : FindNetworkByRecordIDResponse(nullptr) {}
  ~FindNetworkByRecordIDResponse() override;
  explicit PROTOBUF_CONSTEXPR FindNetworkByRecordIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindNetworkByRecordIDResponse(const FindNetworkByRecordIDResponse& from);
  FindNetworkByRecordIDResponse(FindNetworkByRecordIDResponse&& from) noexcept
    : FindNetworkByRecordIDResponse() {
    *this = ::std::move(from);
  }

  inline FindNetworkByRecordIDResponse& operator=(const FindNetworkByRecordIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNetworkByRecordIDResponse& operator=(FindNetworkByRecordIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindNetworkByRecordIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindNetworkByRecordIDResponse* internal_default_instance() {
    return reinterpret_cast<const FindNetworkByRecordIDResponse*>(
               &_FindNetworkByRecordIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(FindNetworkByRecordIDResponse& a, FindNetworkByRecordIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNetworkByRecordIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNetworkByRecordIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindNetworkByRecordIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindNetworkByRecordIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindNetworkByRecordIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindNetworkByRecordIDResponse& from) {
    FindNetworkByRecordIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNetworkByRecordIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindNetworkByRecordIDResponse";
  }
  protected:
  explicit FindNetworkByRecordIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindNetworkByRecordIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindNetworkByRecordID_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindNetworkByRecordID_V2Request) */ {
 public:
  inline FindNetworkByRecordID_V2Request() : FindNetworkByRecordID_V2Request(nullptr) {}
  ~FindNetworkByRecordID_V2Request() override;
  explicit PROTOBUF_CONSTEXPR FindNetworkByRecordID_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindNetworkByRecordID_V2Request(const FindNetworkByRecordID_V2Request& from);
  FindNetworkByRecordID_V2Request(FindNetworkByRecordID_V2Request&& from) noexcept
    : FindNetworkByRecordID_V2Request() {
    *this = ::std::move(from);
  }

  inline FindNetworkByRecordID_V2Request& operator=(const FindNetworkByRecordID_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNetworkByRecordID_V2Request& operator=(FindNetworkByRecordID_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindNetworkByRecordID_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindNetworkByRecordID_V2Request* internal_default_instance() {
    return reinterpret_cast<const FindNetworkByRecordID_V2Request*>(
               &_FindNetworkByRecordID_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(FindNetworkByRecordID_V2Request& a, FindNetworkByRecordID_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNetworkByRecordID_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNetworkByRecordID_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindNetworkByRecordID_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindNetworkByRecordID_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindNetworkByRecordID_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindNetworkByRecordID_V2Request& from) {
    FindNetworkByRecordID_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNetworkByRecordID_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindNetworkByRecordID_V2Request";
  }
  protected:
  explicit FindNetworkByRecordID_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordListFieldNumber = 1,
    kMaxDegreeFieldNumber = 2,
    kBuildOutDegreeFieldNumber = 3,
    kFlagsFieldNumber = 5,
    kMaxEntitiesFieldNumber = 4,
  };
  // string recordList = 1;
  void clear_recordlist();
  const std::string& recordlist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordlist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordlist();
  PROTOBUF_NODISCARD std::string* release_recordlist();
  void set_allocated_recordlist(std::string* recordlist);
  private:
  const std::string& _internal_recordlist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordlist(const std::string& value);
  std::string* _internal_mutable_recordlist();
  public:

  // int32 maxDegree = 2;
  void clear_maxdegree();
  int32_t maxdegree() const;
  void set_maxdegree(int32_t value);
  private:
  int32_t _internal_maxdegree() const;
  void _internal_set_maxdegree(int32_t value);
  public:

  // int32 buildOutDegree = 3;
  void clear_buildoutdegree();
  int32_t buildoutdegree() const;
  void set_buildoutdegree(int32_t value);
  private:
  int32_t _internal_buildoutdegree() const;
  void _internal_set_buildoutdegree(int32_t value);
  public:

  // int64 flags = 5;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // int32 maxEntities = 4;
  void clear_maxentities();
  int32_t maxentities() const;
  void set_maxentities(int32_t value);
  private:
  int32_t _internal_maxentities() const;
  void _internal_set_maxentities(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindNetworkByRecordID_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordlist_;
    int32_t maxdegree_;
    int32_t buildoutdegree_;
    int64_t flags_;
    int32_t maxentities_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindNetworkByRecordID_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindNetworkByRecordID_V2Response) */ {
 public:
  inline FindNetworkByRecordID_V2Response() : FindNetworkByRecordID_V2Response(nullptr) {}
  ~FindNetworkByRecordID_V2Response() override;
  explicit PROTOBUF_CONSTEXPR FindNetworkByRecordID_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindNetworkByRecordID_V2Response(const FindNetworkByRecordID_V2Response& from);
  FindNetworkByRecordID_V2Response(FindNetworkByRecordID_V2Response&& from) noexcept
    : FindNetworkByRecordID_V2Response() {
    *this = ::std::move(from);
  }

  inline FindNetworkByRecordID_V2Response& operator=(const FindNetworkByRecordID_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNetworkByRecordID_V2Response& operator=(FindNetworkByRecordID_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindNetworkByRecordID_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindNetworkByRecordID_V2Response* internal_default_instance() {
    return reinterpret_cast<const FindNetworkByRecordID_V2Response*>(
               &_FindNetworkByRecordID_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(FindNetworkByRecordID_V2Response& a, FindNetworkByRecordID_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNetworkByRecordID_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNetworkByRecordID_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindNetworkByRecordID_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindNetworkByRecordID_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindNetworkByRecordID_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindNetworkByRecordID_V2Response& from) {
    FindNetworkByRecordID_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNetworkByRecordID_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindNetworkByRecordID_V2Response";
  }
  protected:
  explicit FindNetworkByRecordID_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindNetworkByRecordID_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathByEntityIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathByEntityIDRequest) */ {
 public:
  inline FindPathByEntityIDRequest() : FindPathByEntityIDRequest(nullptr) {}
  ~FindPathByEntityIDRequest() override;
  explicit PROTOBUF_CONSTEXPR FindPathByEntityIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathByEntityIDRequest(const FindPathByEntityIDRequest& from);
  FindPathByEntityIDRequest(FindPathByEntityIDRequest&& from) noexcept
    : FindPathByEntityIDRequest() {
    *this = ::std::move(from);
  }

  inline FindPathByEntityIDRequest& operator=(const FindPathByEntityIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathByEntityIDRequest& operator=(FindPathByEntityIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathByEntityIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathByEntityIDRequest* internal_default_instance() {
    return reinterpret_cast<const FindPathByEntityIDRequest*>(
               &_FindPathByEntityIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(FindPathByEntityIDRequest& a, FindPathByEntityIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathByEntityIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathByEntityIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathByEntityIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathByEntityIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathByEntityIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathByEntityIDRequest& from) {
    FindPathByEntityIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathByEntityIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathByEntityIDRequest";
  }
  protected:
  explicit FindPathByEntityIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityID1FieldNumber = 1,
    kEntityID2FieldNumber = 2,
    kMaxDegreeFieldNumber = 3,
  };
  // int64 entityID1 = 1;
  void clear_entityid1();
  int64_t entityid1() const;
  void set_entityid1(int64_t value);
  private:
  int64_t _internal_entityid1() const;
  void _internal_set_entityid1(int64_t value);
  public:

  // int64 entityID2 = 2;
  void clear_entityid2();
  int64_t entityid2() const;
  void set_entityid2(int64_t value);
  private:
  int64_t _internal_entityid2() const;
  void _internal_set_entityid2(int64_t value);
  public:

  // int32 maxDegree = 3;
  void clear_maxdegree();
  int32_t maxdegree() const;
  void set_maxdegree(int32_t value);
  private:
  int32_t _internal_maxdegree() const;
  void _internal_set_maxdegree(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathByEntityIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t entityid1_;
    int64_t entityid2_;
    int32_t maxdegree_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathByEntityIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathByEntityIDResponse) */ {
 public:
  inline FindPathByEntityIDResponse() : FindPathByEntityIDResponse(nullptr) {}
  ~FindPathByEntityIDResponse() override;
  explicit PROTOBUF_CONSTEXPR FindPathByEntityIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathByEntityIDResponse(const FindPathByEntityIDResponse& from);
  FindPathByEntityIDResponse(FindPathByEntityIDResponse&& from) noexcept
    : FindPathByEntityIDResponse() {
    *this = ::std::move(from);
  }

  inline FindPathByEntityIDResponse& operator=(const FindPathByEntityIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathByEntityIDResponse& operator=(FindPathByEntityIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathByEntityIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathByEntityIDResponse* internal_default_instance() {
    return reinterpret_cast<const FindPathByEntityIDResponse*>(
               &_FindPathByEntityIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(FindPathByEntityIDResponse& a, FindPathByEntityIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathByEntityIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathByEntityIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathByEntityIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathByEntityIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathByEntityIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathByEntityIDResponse& from) {
    FindPathByEntityIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathByEntityIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathByEntityIDResponse";
  }
  protected:
  explicit FindPathByEntityIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathByEntityIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathByEntityID_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathByEntityID_V2Request) */ {
 public:
  inline FindPathByEntityID_V2Request() : FindPathByEntityID_V2Request(nullptr) {}
  ~FindPathByEntityID_V2Request() override;
  explicit PROTOBUF_CONSTEXPR FindPathByEntityID_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathByEntityID_V2Request(const FindPathByEntityID_V2Request& from);
  FindPathByEntityID_V2Request(FindPathByEntityID_V2Request&& from) noexcept
    : FindPathByEntityID_V2Request() {
    *this = ::std::move(from);
  }

  inline FindPathByEntityID_V2Request& operator=(const FindPathByEntityID_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathByEntityID_V2Request& operator=(FindPathByEntityID_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathByEntityID_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathByEntityID_V2Request* internal_default_instance() {
    return reinterpret_cast<const FindPathByEntityID_V2Request*>(
               &_FindPathByEntityID_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(FindPathByEntityID_V2Request& a, FindPathByEntityID_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathByEntityID_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathByEntityID_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathByEntityID_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathByEntityID_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathByEntityID_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathByEntityID_V2Request& from) {
    FindPathByEntityID_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathByEntityID_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathByEntityID_V2Request";
  }
  protected:
  explicit FindPathByEntityID_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityID1FieldNumber = 1,
    kEntityID2FieldNumber = 2,
    kFlagsFieldNumber = 4,
    kMaxDegreeFieldNumber = 3,
  };
  // int64 entityID1 = 1;
  void clear_entityid1();
  int64_t entityid1() const;
  void set_entityid1(int64_t value);
  private:
  int64_t _internal_entityid1() const;
  void _internal_set_entityid1(int64_t value);
  public:

  // int64 entityID2 = 2;
  void clear_entityid2();
  int64_t entityid2() const;
  void set_entityid2(int64_t value);
  private:
  int64_t _internal_entityid2() const;
  void _internal_set_entityid2(int64_t value);
  public:

  // int64 flags = 4;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // int32 maxDegree = 3;
  void clear_maxdegree();
  int32_t maxdegree() const;
  void set_maxdegree(int32_t value);
  private:
  int32_t _internal_maxdegree() const;
  void _internal_set_maxdegree(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathByEntityID_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t entityid1_;
    int64_t entityid2_;
    int64_t flags_;
    int32_t maxdegree_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathByEntityID_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathByEntityID_V2Response) */ {
 public:
  inline FindPathByEntityID_V2Response() : FindPathByEntityID_V2Response(nullptr) {}
  ~FindPathByEntityID_V2Response() override;
  explicit PROTOBUF_CONSTEXPR FindPathByEntityID_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathByEntityID_V2Response(const FindPathByEntityID_V2Response& from);
  FindPathByEntityID_V2Response(FindPathByEntityID_V2Response&& from) noexcept
    : FindPathByEntityID_V2Response() {
    *this = ::std::move(from);
  }

  inline FindPathByEntityID_V2Response& operator=(const FindPathByEntityID_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathByEntityID_V2Response& operator=(FindPathByEntityID_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathByEntityID_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathByEntityID_V2Response* internal_default_instance() {
    return reinterpret_cast<const FindPathByEntityID_V2Response*>(
               &_FindPathByEntityID_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(FindPathByEntityID_V2Response& a, FindPathByEntityID_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathByEntityID_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathByEntityID_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathByEntityID_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathByEntityID_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathByEntityID_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathByEntityID_V2Response& from) {
    FindPathByEntityID_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathByEntityID_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathByEntityID_V2Response";
  }
  protected:
  explicit FindPathByEntityID_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathByEntityID_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathByRecordIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathByRecordIDRequest) */ {
 public:
  inline FindPathByRecordIDRequest() : FindPathByRecordIDRequest(nullptr) {}
  ~FindPathByRecordIDRequest() override;
  explicit PROTOBUF_CONSTEXPR FindPathByRecordIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathByRecordIDRequest(const FindPathByRecordIDRequest& from);
  FindPathByRecordIDRequest(FindPathByRecordIDRequest&& from) noexcept
    : FindPathByRecordIDRequest() {
    *this = ::std::move(from);
  }

  inline FindPathByRecordIDRequest& operator=(const FindPathByRecordIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathByRecordIDRequest& operator=(FindPathByRecordIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathByRecordIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathByRecordIDRequest* internal_default_instance() {
    return reinterpret_cast<const FindPathByRecordIDRequest*>(
               &_FindPathByRecordIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(FindPathByRecordIDRequest& a, FindPathByRecordIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathByRecordIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathByRecordIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathByRecordIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathByRecordIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathByRecordIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathByRecordIDRequest& from) {
    FindPathByRecordIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathByRecordIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathByRecordIDRequest";
  }
  protected:
  explicit FindPathByRecordIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCode1FieldNumber = 1,
    kRecordID1FieldNumber = 2,
    kDataSourceCode2FieldNumber = 3,
    kRecordID2FieldNumber = 4,
    kMaxDegreeFieldNumber = 5,
  };
  // string dataSourceCode1 = 1;
  void clear_datasourcecode1();
  const std::string& datasourcecode1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode1();
  PROTOBUF_NODISCARD std::string* release_datasourcecode1();
  void set_allocated_datasourcecode1(std::string* datasourcecode1);
  private:
  const std::string& _internal_datasourcecode1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode1(const std::string& value);
  std::string* _internal_mutable_datasourcecode1();
  public:

  // string recordID1 = 2;
  void clear_recordid1();
  const std::string& recordid1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid1();
  PROTOBUF_NODISCARD std::string* release_recordid1();
  void set_allocated_recordid1(std::string* recordid1);
  private:
  const std::string& _internal_recordid1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid1(const std::string& value);
  std::string* _internal_mutable_recordid1();
  public:

  // string dataSourceCode2 = 3;
  void clear_datasourcecode2();
  const std::string& datasourcecode2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode2();
  PROTOBUF_NODISCARD std::string* release_datasourcecode2();
  void set_allocated_datasourcecode2(std::string* datasourcecode2);
  private:
  const std::string& _internal_datasourcecode2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode2(const std::string& value);
  std::string* _internal_mutable_datasourcecode2();
  public:

  // string recordID2 = 4;
  void clear_recordid2();
  const std::string& recordid2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid2();
  PROTOBUF_NODISCARD std::string* release_recordid2();
  void set_allocated_recordid2(std::string* recordid2);
  private:
  const std::string& _internal_recordid2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid2(const std::string& value);
  std::string* _internal_mutable_recordid2();
  public:

  // int32 maxDegree = 5;
  void clear_maxdegree();
  int32_t maxdegree() const;
  void set_maxdegree(int32_t value);
  private:
  int32_t _internal_maxdegree() const;
  void _internal_set_maxdegree(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathByRecordIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid2_;
    int32_t maxdegree_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathByRecordIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathByRecordIDResponse) */ {
 public:
  inline FindPathByRecordIDResponse() : FindPathByRecordIDResponse(nullptr) {}
  ~FindPathByRecordIDResponse() override;
  explicit PROTOBUF_CONSTEXPR FindPathByRecordIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathByRecordIDResponse(const FindPathByRecordIDResponse& from);
  FindPathByRecordIDResponse(FindPathByRecordIDResponse&& from) noexcept
    : FindPathByRecordIDResponse() {
    *this = ::std::move(from);
  }

  inline FindPathByRecordIDResponse& operator=(const FindPathByRecordIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathByRecordIDResponse& operator=(FindPathByRecordIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathByRecordIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathByRecordIDResponse* internal_default_instance() {
    return reinterpret_cast<const FindPathByRecordIDResponse*>(
               &_FindPathByRecordIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(FindPathByRecordIDResponse& a, FindPathByRecordIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathByRecordIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathByRecordIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathByRecordIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathByRecordIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathByRecordIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathByRecordIDResponse& from) {
    FindPathByRecordIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathByRecordIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathByRecordIDResponse";
  }
  protected:
  explicit FindPathByRecordIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathByRecordIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathByRecordID_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathByRecordID_V2Request) */ {
 public:
  inline FindPathByRecordID_V2Request() : FindPathByRecordID_V2Request(nullptr) {}
  ~FindPathByRecordID_V2Request() override;
  explicit PROTOBUF_CONSTEXPR FindPathByRecordID_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathByRecordID_V2Request(const FindPathByRecordID_V2Request& from);
  FindPathByRecordID_V2Request(FindPathByRecordID_V2Request&& from) noexcept
    : FindPathByRecordID_V2Request() {
    *this = ::std::move(from);
  }

  inline FindPathByRecordID_V2Request& operator=(const FindPathByRecordID_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathByRecordID_V2Request& operator=(FindPathByRecordID_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathByRecordID_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathByRecordID_V2Request* internal_default_instance() {
    return reinterpret_cast<const FindPathByRecordID_V2Request*>(
               &_FindPathByRecordID_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(FindPathByRecordID_V2Request& a, FindPathByRecordID_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathByRecordID_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathByRecordID_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathByRecordID_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathByRecordID_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathByRecordID_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathByRecordID_V2Request& from) {
    FindPathByRecordID_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathByRecordID_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathByRecordID_V2Request";
  }
  protected:
  explicit FindPathByRecordID_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCode1FieldNumber = 1,
    kRecordID1FieldNumber = 2,
    kDataSourceCode2FieldNumber = 3,
    kRecordID2FieldNumber = 4,
    kFlagsFieldNumber = 6,
    kMaxDegreeFieldNumber = 5,
  };
  // string dataSourceCode1 = 1;
  void clear_datasourcecode1();
  const std::string& datasourcecode1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode1();
  PROTOBUF_NODISCARD std::string* release_datasourcecode1();
  void set_allocated_datasourcecode1(std::string* datasourcecode1);
  private:
  const std::string& _internal_datasourcecode1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode1(const std::string& value);
  std::string* _internal_mutable_datasourcecode1();
  public:

  // string recordID1 = 2;
  void clear_recordid1();
  const std::string& recordid1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid1();
  PROTOBUF_NODISCARD std::string* release_recordid1();
  void set_allocated_recordid1(std::string* recordid1);
  private:
  const std::string& _internal_recordid1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid1(const std::string& value);
  std::string* _internal_mutable_recordid1();
  public:

  // string dataSourceCode2 = 3;
  void clear_datasourcecode2();
  const std::string& datasourcecode2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode2();
  PROTOBUF_NODISCARD std::string* release_datasourcecode2();
  void set_allocated_datasourcecode2(std::string* datasourcecode2);
  private:
  const std::string& _internal_datasourcecode2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode2(const std::string& value);
  std::string* _internal_mutable_datasourcecode2();
  public:

  // string recordID2 = 4;
  void clear_recordid2();
  const std::string& recordid2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid2();
  PROTOBUF_NODISCARD std::string* release_recordid2();
  void set_allocated_recordid2(std::string* recordid2);
  private:
  const std::string& _internal_recordid2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid2(const std::string& value);
  std::string* _internal_mutable_recordid2();
  public:

  // int64 flags = 6;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // int32 maxDegree = 5;
  void clear_maxdegree();
  int32_t maxdegree() const;
  void set_maxdegree(int32_t value);
  private:
  int32_t _internal_maxdegree() const;
  void _internal_set_maxdegree(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathByRecordID_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid2_;
    int64_t flags_;
    int32_t maxdegree_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathByRecordID_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathByRecordID_V2Response) */ {
 public:
  inline FindPathByRecordID_V2Response() : FindPathByRecordID_V2Response(nullptr) {}
  ~FindPathByRecordID_V2Response() override;
  explicit PROTOBUF_CONSTEXPR FindPathByRecordID_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathByRecordID_V2Response(const FindPathByRecordID_V2Response& from);
  FindPathByRecordID_V2Response(FindPathByRecordID_V2Response&& from) noexcept
    : FindPathByRecordID_V2Response() {
    *this = ::std::move(from);
  }

  inline FindPathByRecordID_V2Response& operator=(const FindPathByRecordID_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathByRecordID_V2Response& operator=(FindPathByRecordID_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathByRecordID_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathByRecordID_V2Response* internal_default_instance() {
    return reinterpret_cast<const FindPathByRecordID_V2Response*>(
               &_FindPathByRecordID_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(FindPathByRecordID_V2Response& a, FindPathByRecordID_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathByRecordID_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathByRecordID_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathByRecordID_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathByRecordID_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathByRecordID_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathByRecordID_V2Response& from) {
    FindPathByRecordID_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathByRecordID_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathByRecordID_V2Response";
  }
  protected:
  explicit FindPathByRecordID_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathByRecordID_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathExcludingByEntityIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathExcludingByEntityIDRequest) */ {
 public:
  inline FindPathExcludingByEntityIDRequest() : FindPathExcludingByEntityIDRequest(nullptr) {}
  ~FindPathExcludingByEntityIDRequest() override;
  explicit PROTOBUF_CONSTEXPR FindPathExcludingByEntityIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathExcludingByEntityIDRequest(const FindPathExcludingByEntityIDRequest& from);
  FindPathExcludingByEntityIDRequest(FindPathExcludingByEntityIDRequest&& from) noexcept
    : FindPathExcludingByEntityIDRequest() {
    *this = ::std::move(from);
  }

  inline FindPathExcludingByEntityIDRequest& operator=(const FindPathExcludingByEntityIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathExcludingByEntityIDRequest& operator=(FindPathExcludingByEntityIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathExcludingByEntityIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathExcludingByEntityIDRequest* internal_default_instance() {
    return reinterpret_cast<const FindPathExcludingByEntityIDRequest*>(
               &_FindPathExcludingByEntityIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(FindPathExcludingByEntityIDRequest& a, FindPathExcludingByEntityIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathExcludingByEntityIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathExcludingByEntityIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathExcludingByEntityIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathExcludingByEntityIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathExcludingByEntityIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathExcludingByEntityIDRequest& from) {
    FindPathExcludingByEntityIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathExcludingByEntityIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathExcludingByEntityIDRequest";
  }
  protected:
  explicit FindPathExcludingByEntityIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExcludedEntitiesFieldNumber = 4,
    kEntityID1FieldNumber = 1,
    kEntityID2FieldNumber = 2,
    kMaxDegreeFieldNumber = 3,
  };
  // string excludedEntities = 4;
  void clear_excludedentities();
  const std::string& excludedentities() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_excludedentities(ArgT0&& arg0, ArgT... args);
  std::string* mutable_excludedentities();
  PROTOBUF_NODISCARD std::string* release_excludedentities();
  void set_allocated_excludedentities(std::string* excludedentities);
  private:
  const std::string& _internal_excludedentities() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_excludedentities(const std::string& value);
  std::string* _internal_mutable_excludedentities();
  public:

  // int64 entityID1 = 1;
  void clear_entityid1();
  int64_t entityid1() const;
  void set_entityid1(int64_t value);
  private:
  int64_t _internal_entityid1() const;
  void _internal_set_entityid1(int64_t value);
  public:

  // int64 entityID2 = 2;
  void clear_entityid2();
  int64_t entityid2() const;
  void set_entityid2(int64_t value);
  private:
  int64_t _internal_entityid2() const;
  void _internal_set_entityid2(int64_t value);
  public:

  // int32 maxDegree = 3;
  void clear_maxdegree();
  int32_t maxdegree() const;
  void set_maxdegree(int32_t value);
  private:
  int32_t _internal_maxdegree() const;
  void _internal_set_maxdegree(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathExcludingByEntityIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr excludedentities_;
    int64_t entityid1_;
    int64_t entityid2_;
    int32_t maxdegree_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathExcludingByEntityIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathExcludingByEntityIDResponse) */ {
 public:
  inline FindPathExcludingByEntityIDResponse() : FindPathExcludingByEntityIDResponse(nullptr) {}
  ~FindPathExcludingByEntityIDResponse() override;
  explicit PROTOBUF_CONSTEXPR FindPathExcludingByEntityIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathExcludingByEntityIDResponse(const FindPathExcludingByEntityIDResponse& from);
  FindPathExcludingByEntityIDResponse(FindPathExcludingByEntityIDResponse&& from) noexcept
    : FindPathExcludingByEntityIDResponse() {
    *this = ::std::move(from);
  }

  inline FindPathExcludingByEntityIDResponse& operator=(const FindPathExcludingByEntityIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathExcludingByEntityIDResponse& operator=(FindPathExcludingByEntityIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathExcludingByEntityIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathExcludingByEntityIDResponse* internal_default_instance() {
    return reinterpret_cast<const FindPathExcludingByEntityIDResponse*>(
               &_FindPathExcludingByEntityIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(FindPathExcludingByEntityIDResponse& a, FindPathExcludingByEntityIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathExcludingByEntityIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathExcludingByEntityIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathExcludingByEntityIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathExcludingByEntityIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathExcludingByEntityIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathExcludingByEntityIDResponse& from) {
    FindPathExcludingByEntityIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathExcludingByEntityIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathExcludingByEntityIDResponse";
  }
  protected:
  explicit FindPathExcludingByEntityIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathExcludingByEntityIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathExcludingByEntityID_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathExcludingByEntityID_V2Request) */ {
 public:
  inline FindPathExcludingByEntityID_V2Request() : FindPathExcludingByEntityID_V2Request(nullptr) {}
  ~FindPathExcludingByEntityID_V2Request() override;
  explicit PROTOBUF_CONSTEXPR FindPathExcludingByEntityID_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathExcludingByEntityID_V2Request(const FindPathExcludingByEntityID_V2Request& from);
  FindPathExcludingByEntityID_V2Request(FindPathExcludingByEntityID_V2Request&& from) noexcept
    : FindPathExcludingByEntityID_V2Request() {
    *this = ::std::move(from);
  }

  inline FindPathExcludingByEntityID_V2Request& operator=(const FindPathExcludingByEntityID_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathExcludingByEntityID_V2Request& operator=(FindPathExcludingByEntityID_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathExcludingByEntityID_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathExcludingByEntityID_V2Request* internal_default_instance() {
    return reinterpret_cast<const FindPathExcludingByEntityID_V2Request*>(
               &_FindPathExcludingByEntityID_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(FindPathExcludingByEntityID_V2Request& a, FindPathExcludingByEntityID_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathExcludingByEntityID_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathExcludingByEntityID_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathExcludingByEntityID_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathExcludingByEntityID_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathExcludingByEntityID_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathExcludingByEntityID_V2Request& from) {
    FindPathExcludingByEntityID_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathExcludingByEntityID_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathExcludingByEntityID_V2Request";
  }
  protected:
  explicit FindPathExcludingByEntityID_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExcludedEntitiesFieldNumber = 4,
    kEntityID1FieldNumber = 1,
    kEntityID2FieldNumber = 2,
    kFlagsFieldNumber = 5,
    kMaxDegreeFieldNumber = 3,
  };
  // string excludedEntities = 4;
  void clear_excludedentities();
  const std::string& excludedentities() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_excludedentities(ArgT0&& arg0, ArgT... args);
  std::string* mutable_excludedentities();
  PROTOBUF_NODISCARD std::string* release_excludedentities();
  void set_allocated_excludedentities(std::string* excludedentities);
  private:
  const std::string& _internal_excludedentities() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_excludedentities(const std::string& value);
  std::string* _internal_mutable_excludedentities();
  public:

  // int64 entityID1 = 1;
  void clear_entityid1();
  int64_t entityid1() const;
  void set_entityid1(int64_t value);
  private:
  int64_t _internal_entityid1() const;
  void _internal_set_entityid1(int64_t value);
  public:

  // int64 entityID2 = 2;
  void clear_entityid2();
  int64_t entityid2() const;
  void set_entityid2(int64_t value);
  private:
  int64_t _internal_entityid2() const;
  void _internal_set_entityid2(int64_t value);
  public:

  // int64 flags = 5;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // int32 maxDegree = 3;
  void clear_maxdegree();
  int32_t maxdegree() const;
  void set_maxdegree(int32_t value);
  private:
  int32_t _internal_maxdegree() const;
  void _internal_set_maxdegree(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathExcludingByEntityID_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr excludedentities_;
    int64_t entityid1_;
    int64_t entityid2_;
    int64_t flags_;
    int32_t maxdegree_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathExcludingByEntityID_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathExcludingByEntityID_V2Response) */ {
 public:
  inline FindPathExcludingByEntityID_V2Response() : FindPathExcludingByEntityID_V2Response(nullptr) {}
  ~FindPathExcludingByEntityID_V2Response() override;
  explicit PROTOBUF_CONSTEXPR FindPathExcludingByEntityID_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathExcludingByEntityID_V2Response(const FindPathExcludingByEntityID_V2Response& from);
  FindPathExcludingByEntityID_V2Response(FindPathExcludingByEntityID_V2Response&& from) noexcept
    : FindPathExcludingByEntityID_V2Response() {
    *this = ::std::move(from);
  }

  inline FindPathExcludingByEntityID_V2Response& operator=(const FindPathExcludingByEntityID_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathExcludingByEntityID_V2Response& operator=(FindPathExcludingByEntityID_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathExcludingByEntityID_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathExcludingByEntityID_V2Response* internal_default_instance() {
    return reinterpret_cast<const FindPathExcludingByEntityID_V2Response*>(
               &_FindPathExcludingByEntityID_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(FindPathExcludingByEntityID_V2Response& a, FindPathExcludingByEntityID_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathExcludingByEntityID_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathExcludingByEntityID_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathExcludingByEntityID_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathExcludingByEntityID_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathExcludingByEntityID_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathExcludingByEntityID_V2Response& from) {
    FindPathExcludingByEntityID_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathExcludingByEntityID_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathExcludingByEntityID_V2Response";
  }
  protected:
  explicit FindPathExcludingByEntityID_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathExcludingByEntityID_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathExcludingByRecordIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathExcludingByRecordIDRequest) */ {
 public:
  inline FindPathExcludingByRecordIDRequest() : FindPathExcludingByRecordIDRequest(nullptr) {}
  ~FindPathExcludingByRecordIDRequest() override;
  explicit PROTOBUF_CONSTEXPR FindPathExcludingByRecordIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathExcludingByRecordIDRequest(const FindPathExcludingByRecordIDRequest& from);
  FindPathExcludingByRecordIDRequest(FindPathExcludingByRecordIDRequest&& from) noexcept
    : FindPathExcludingByRecordIDRequest() {
    *this = ::std::move(from);
  }

  inline FindPathExcludingByRecordIDRequest& operator=(const FindPathExcludingByRecordIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathExcludingByRecordIDRequest& operator=(FindPathExcludingByRecordIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathExcludingByRecordIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathExcludingByRecordIDRequest* internal_default_instance() {
    return reinterpret_cast<const FindPathExcludingByRecordIDRequest*>(
               &_FindPathExcludingByRecordIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(FindPathExcludingByRecordIDRequest& a, FindPathExcludingByRecordIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathExcludingByRecordIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathExcludingByRecordIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathExcludingByRecordIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathExcludingByRecordIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathExcludingByRecordIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathExcludingByRecordIDRequest& from) {
    FindPathExcludingByRecordIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathExcludingByRecordIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathExcludingByRecordIDRequest";
  }
  protected:
  explicit FindPathExcludingByRecordIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCode1FieldNumber = 1,
    kRecordID1FieldNumber = 2,
    kDataSourceCode2FieldNumber = 3,
    kRecordID2FieldNumber = 4,
    kExcludedRecordsFieldNumber = 6,
    kMaxDegreeFieldNumber = 5,
  };
  // string dataSourceCode1 = 1;
  void clear_datasourcecode1();
  const std::string& datasourcecode1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode1();
  PROTOBUF_NODISCARD std::string* release_datasourcecode1();
  void set_allocated_datasourcecode1(std::string* datasourcecode1);
  private:
  const std::string& _internal_datasourcecode1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode1(const std::string& value);
  std::string* _internal_mutable_datasourcecode1();
  public:

  // string recordID1 = 2;
  void clear_recordid1();
  const std::string& recordid1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid1();
  PROTOBUF_NODISCARD std::string* release_recordid1();
  void set_allocated_recordid1(std::string* recordid1);
  private:
  const std::string& _internal_recordid1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid1(const std::string& value);
  std::string* _internal_mutable_recordid1();
  public:

  // string dataSourceCode2 = 3;
  void clear_datasourcecode2();
  const std::string& datasourcecode2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode2();
  PROTOBUF_NODISCARD std::string* release_datasourcecode2();
  void set_allocated_datasourcecode2(std::string* datasourcecode2);
  private:
  const std::string& _internal_datasourcecode2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode2(const std::string& value);
  std::string* _internal_mutable_datasourcecode2();
  public:

  // string recordID2 = 4;
  void clear_recordid2();
  const std::string& recordid2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid2();
  PROTOBUF_NODISCARD std::string* release_recordid2();
  void set_allocated_recordid2(std::string* recordid2);
  private:
  const std::string& _internal_recordid2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid2(const std::string& value);
  std::string* _internal_mutable_recordid2();
  public:

  // string excludedRecords = 6;
  void clear_excludedrecords();
  const std::string& excludedrecords() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_excludedrecords(ArgT0&& arg0, ArgT... args);
  std::string* mutable_excludedrecords();
  PROTOBUF_NODISCARD std::string* release_excludedrecords();
  void set_allocated_excludedrecords(std::string* excludedrecords);
  private:
  const std::string& _internal_excludedrecords() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_excludedrecords(const std::string& value);
  std::string* _internal_mutable_excludedrecords();
  public:

  // int32 maxDegree = 5;
  void clear_maxdegree();
  int32_t maxdegree() const;
  void set_maxdegree(int32_t value);
  private:
  int32_t _internal_maxdegree() const;
  void _internal_set_maxdegree(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathExcludingByRecordIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr excludedrecords_;
    int32_t maxdegree_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathExcludingByRecordIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathExcludingByRecordIDResponse) */ {
 public:
  inline FindPathExcludingByRecordIDResponse() : FindPathExcludingByRecordIDResponse(nullptr) {}
  ~FindPathExcludingByRecordIDResponse() override;
  explicit PROTOBUF_CONSTEXPR FindPathExcludingByRecordIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathExcludingByRecordIDResponse(const FindPathExcludingByRecordIDResponse& from);
  FindPathExcludingByRecordIDResponse(FindPathExcludingByRecordIDResponse&& from) noexcept
    : FindPathExcludingByRecordIDResponse() {
    *this = ::std::move(from);
  }

  inline FindPathExcludingByRecordIDResponse& operator=(const FindPathExcludingByRecordIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathExcludingByRecordIDResponse& operator=(FindPathExcludingByRecordIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathExcludingByRecordIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathExcludingByRecordIDResponse* internal_default_instance() {
    return reinterpret_cast<const FindPathExcludingByRecordIDResponse*>(
               &_FindPathExcludingByRecordIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(FindPathExcludingByRecordIDResponse& a, FindPathExcludingByRecordIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathExcludingByRecordIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathExcludingByRecordIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathExcludingByRecordIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathExcludingByRecordIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathExcludingByRecordIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathExcludingByRecordIDResponse& from) {
    FindPathExcludingByRecordIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathExcludingByRecordIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathExcludingByRecordIDResponse";
  }
  protected:
  explicit FindPathExcludingByRecordIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathExcludingByRecordIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathExcludingByRecordID_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathExcludingByRecordID_V2Request) */ {
 public:
  inline FindPathExcludingByRecordID_V2Request() : FindPathExcludingByRecordID_V2Request(nullptr) {}
  ~FindPathExcludingByRecordID_V2Request() override;
  explicit PROTOBUF_CONSTEXPR FindPathExcludingByRecordID_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathExcludingByRecordID_V2Request(const FindPathExcludingByRecordID_V2Request& from);
  FindPathExcludingByRecordID_V2Request(FindPathExcludingByRecordID_V2Request&& from) noexcept
    : FindPathExcludingByRecordID_V2Request() {
    *this = ::std::move(from);
  }

  inline FindPathExcludingByRecordID_V2Request& operator=(const FindPathExcludingByRecordID_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathExcludingByRecordID_V2Request& operator=(FindPathExcludingByRecordID_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathExcludingByRecordID_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathExcludingByRecordID_V2Request* internal_default_instance() {
    return reinterpret_cast<const FindPathExcludingByRecordID_V2Request*>(
               &_FindPathExcludingByRecordID_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(FindPathExcludingByRecordID_V2Request& a, FindPathExcludingByRecordID_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathExcludingByRecordID_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathExcludingByRecordID_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathExcludingByRecordID_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathExcludingByRecordID_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathExcludingByRecordID_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathExcludingByRecordID_V2Request& from) {
    FindPathExcludingByRecordID_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathExcludingByRecordID_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathExcludingByRecordID_V2Request";
  }
  protected:
  explicit FindPathExcludingByRecordID_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCode1FieldNumber = 1,
    kRecordID1FieldNumber = 2,
    kDataSourceCode2FieldNumber = 3,
    kRecordID2FieldNumber = 4,
    kExcludedRecordsFieldNumber = 6,
    kFlagsFieldNumber = 7,
    kMaxDegreeFieldNumber = 5,
  };
  // string dataSourceCode1 = 1;
  void clear_datasourcecode1();
  const std::string& datasourcecode1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode1();
  PROTOBUF_NODISCARD std::string* release_datasourcecode1();
  void set_allocated_datasourcecode1(std::string* datasourcecode1);
  private:
  const std::string& _internal_datasourcecode1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode1(const std::string& value);
  std::string* _internal_mutable_datasourcecode1();
  public:

  // string recordID1 = 2;
  void clear_recordid1();
  const std::string& recordid1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid1();
  PROTOBUF_NODISCARD std::string* release_recordid1();
  void set_allocated_recordid1(std::string* recordid1);
  private:
  const std::string& _internal_recordid1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid1(const std::string& value);
  std::string* _internal_mutable_recordid1();
  public:

  // string dataSourceCode2 = 3;
  void clear_datasourcecode2();
  const std::string& datasourcecode2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode2();
  PROTOBUF_NODISCARD std::string* release_datasourcecode2();
  void set_allocated_datasourcecode2(std::string* datasourcecode2);
  private:
  const std::string& _internal_datasourcecode2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode2(const std::string& value);
  std::string* _internal_mutable_datasourcecode2();
  public:

  // string recordID2 = 4;
  void clear_recordid2();
  const std::string& recordid2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid2();
  PROTOBUF_NODISCARD std::string* release_recordid2();
  void set_allocated_recordid2(std::string* recordid2);
  private:
  const std::string& _internal_recordid2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid2(const std::string& value);
  std::string* _internal_mutable_recordid2();
  public:

  // string excludedRecords = 6;
  void clear_excludedrecords();
  const std::string& excludedrecords() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_excludedrecords(ArgT0&& arg0, ArgT... args);
  std::string* mutable_excludedrecords();
  PROTOBUF_NODISCARD std::string* release_excludedrecords();
  void set_allocated_excludedrecords(std::string* excludedrecords);
  private:
  const std::string& _internal_excludedrecords() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_excludedrecords(const std::string& value);
  std::string* _internal_mutable_excludedrecords();
  public:

  // int64 flags = 7;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // int32 maxDegree = 5;
  void clear_maxdegree();
  int32_t maxdegree() const;
  void set_maxdegree(int32_t value);
  private:
  int32_t _internal_maxdegree() const;
  void _internal_set_maxdegree(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathExcludingByRecordID_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr excludedrecords_;
    int64_t flags_;
    int32_t maxdegree_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathExcludingByRecordID_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathExcludingByRecordID_V2Response) */ {
 public:
  inline FindPathExcludingByRecordID_V2Response() : FindPathExcludingByRecordID_V2Response(nullptr) {}
  ~FindPathExcludingByRecordID_V2Response() override;
  explicit PROTOBUF_CONSTEXPR FindPathExcludingByRecordID_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathExcludingByRecordID_V2Response(const FindPathExcludingByRecordID_V2Response& from);
  FindPathExcludingByRecordID_V2Response(FindPathExcludingByRecordID_V2Response&& from) noexcept
    : FindPathExcludingByRecordID_V2Response() {
    *this = ::std::move(from);
  }

  inline FindPathExcludingByRecordID_V2Response& operator=(const FindPathExcludingByRecordID_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathExcludingByRecordID_V2Response& operator=(FindPathExcludingByRecordID_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathExcludingByRecordID_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathExcludingByRecordID_V2Response* internal_default_instance() {
    return reinterpret_cast<const FindPathExcludingByRecordID_V2Response*>(
               &_FindPathExcludingByRecordID_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(FindPathExcludingByRecordID_V2Response& a, FindPathExcludingByRecordID_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathExcludingByRecordID_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathExcludingByRecordID_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathExcludingByRecordID_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathExcludingByRecordID_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathExcludingByRecordID_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathExcludingByRecordID_V2Response& from) {
    FindPathExcludingByRecordID_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathExcludingByRecordID_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathExcludingByRecordID_V2Response";
  }
  protected:
  explicit FindPathExcludingByRecordID_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathExcludingByRecordID_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathIncludingSourceByEntityIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathIncludingSourceByEntityIDRequest) */ {
 public:
  inline FindPathIncludingSourceByEntityIDRequest() : FindPathIncludingSourceByEntityIDRequest(nullptr) {}
  ~FindPathIncludingSourceByEntityIDRequest() override;
  explicit PROTOBUF_CONSTEXPR FindPathIncludingSourceByEntityIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathIncludingSourceByEntityIDRequest(const FindPathIncludingSourceByEntityIDRequest& from);
  FindPathIncludingSourceByEntityIDRequest(FindPathIncludingSourceByEntityIDRequest&& from) noexcept
    : FindPathIncludingSourceByEntityIDRequest() {
    *this = ::std::move(from);
  }

  inline FindPathIncludingSourceByEntityIDRequest& operator=(const FindPathIncludingSourceByEntityIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathIncludingSourceByEntityIDRequest& operator=(FindPathIncludingSourceByEntityIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathIncludingSourceByEntityIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathIncludingSourceByEntityIDRequest* internal_default_instance() {
    return reinterpret_cast<const FindPathIncludingSourceByEntityIDRequest*>(
               &_FindPathIncludingSourceByEntityIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(FindPathIncludingSourceByEntityIDRequest& a, FindPathIncludingSourceByEntityIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathIncludingSourceByEntityIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathIncludingSourceByEntityIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathIncludingSourceByEntityIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathIncludingSourceByEntityIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathIncludingSourceByEntityIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathIncludingSourceByEntityIDRequest& from) {
    FindPathIncludingSourceByEntityIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathIncludingSourceByEntityIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathIncludingSourceByEntityIDRequest";
  }
  protected:
  explicit FindPathIncludingSourceByEntityIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExcludedEntitiesFieldNumber = 4,
    kRequiredDsrcsFieldNumber = 5,
    kEntityID1FieldNumber = 1,
    kEntityID2FieldNumber = 2,
    kMaxDegreeFieldNumber = 3,
  };
  // string excludedEntities = 4;
  void clear_excludedentities();
  const std::string& excludedentities() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_excludedentities(ArgT0&& arg0, ArgT... args);
  std::string* mutable_excludedentities();
  PROTOBUF_NODISCARD std::string* release_excludedentities();
  void set_allocated_excludedentities(std::string* excludedentities);
  private:
  const std::string& _internal_excludedentities() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_excludedentities(const std::string& value);
  std::string* _internal_mutable_excludedentities();
  public:

  // string requiredDsrcs = 5;
  void clear_requireddsrcs();
  const std::string& requireddsrcs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requireddsrcs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requireddsrcs();
  PROTOBUF_NODISCARD std::string* release_requireddsrcs();
  void set_allocated_requireddsrcs(std::string* requireddsrcs);
  private:
  const std::string& _internal_requireddsrcs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requireddsrcs(const std::string& value);
  std::string* _internal_mutable_requireddsrcs();
  public:

  // int64 entityID1 = 1;
  void clear_entityid1();
  int64_t entityid1() const;
  void set_entityid1(int64_t value);
  private:
  int64_t _internal_entityid1() const;
  void _internal_set_entityid1(int64_t value);
  public:

  // int64 entityID2 = 2;
  void clear_entityid2();
  int64_t entityid2() const;
  void set_entityid2(int64_t value);
  private:
  int64_t _internal_entityid2() const;
  void _internal_set_entityid2(int64_t value);
  public:

  // int32 maxDegree = 3;
  void clear_maxdegree();
  int32_t maxdegree() const;
  void set_maxdegree(int32_t value);
  private:
  int32_t _internal_maxdegree() const;
  void _internal_set_maxdegree(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathIncludingSourceByEntityIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr excludedentities_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requireddsrcs_;
    int64_t entityid1_;
    int64_t entityid2_;
    int32_t maxdegree_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathIncludingSourceByEntityIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathIncludingSourceByEntityIDResponse) */ {
 public:
  inline FindPathIncludingSourceByEntityIDResponse() : FindPathIncludingSourceByEntityIDResponse(nullptr) {}
  ~FindPathIncludingSourceByEntityIDResponse() override;
  explicit PROTOBUF_CONSTEXPR FindPathIncludingSourceByEntityIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathIncludingSourceByEntityIDResponse(const FindPathIncludingSourceByEntityIDResponse& from);
  FindPathIncludingSourceByEntityIDResponse(FindPathIncludingSourceByEntityIDResponse&& from) noexcept
    : FindPathIncludingSourceByEntityIDResponse() {
    *this = ::std::move(from);
  }

  inline FindPathIncludingSourceByEntityIDResponse& operator=(const FindPathIncludingSourceByEntityIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathIncludingSourceByEntityIDResponse& operator=(FindPathIncludingSourceByEntityIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathIncludingSourceByEntityIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathIncludingSourceByEntityIDResponse* internal_default_instance() {
    return reinterpret_cast<const FindPathIncludingSourceByEntityIDResponse*>(
               &_FindPathIncludingSourceByEntityIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(FindPathIncludingSourceByEntityIDResponse& a, FindPathIncludingSourceByEntityIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathIncludingSourceByEntityIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathIncludingSourceByEntityIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathIncludingSourceByEntityIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathIncludingSourceByEntityIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathIncludingSourceByEntityIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathIncludingSourceByEntityIDResponse& from) {
    FindPathIncludingSourceByEntityIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathIncludingSourceByEntityIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathIncludingSourceByEntityIDResponse";
  }
  protected:
  explicit FindPathIncludingSourceByEntityIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathIncludingSourceByEntityIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathIncludingSourceByEntityID_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathIncludingSourceByEntityID_V2Request) */ {
 public:
  inline FindPathIncludingSourceByEntityID_V2Request() : FindPathIncludingSourceByEntityID_V2Request(nullptr) {}
  ~FindPathIncludingSourceByEntityID_V2Request() override;
  explicit PROTOBUF_CONSTEXPR FindPathIncludingSourceByEntityID_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathIncludingSourceByEntityID_V2Request(const FindPathIncludingSourceByEntityID_V2Request& from);
  FindPathIncludingSourceByEntityID_V2Request(FindPathIncludingSourceByEntityID_V2Request&& from) noexcept
    : FindPathIncludingSourceByEntityID_V2Request() {
    *this = ::std::move(from);
  }

  inline FindPathIncludingSourceByEntityID_V2Request& operator=(const FindPathIncludingSourceByEntityID_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathIncludingSourceByEntityID_V2Request& operator=(FindPathIncludingSourceByEntityID_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathIncludingSourceByEntityID_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathIncludingSourceByEntityID_V2Request* internal_default_instance() {
    return reinterpret_cast<const FindPathIncludingSourceByEntityID_V2Request*>(
               &_FindPathIncludingSourceByEntityID_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(FindPathIncludingSourceByEntityID_V2Request& a, FindPathIncludingSourceByEntityID_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathIncludingSourceByEntityID_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathIncludingSourceByEntityID_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathIncludingSourceByEntityID_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathIncludingSourceByEntityID_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathIncludingSourceByEntityID_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathIncludingSourceByEntityID_V2Request& from) {
    FindPathIncludingSourceByEntityID_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathIncludingSourceByEntityID_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathIncludingSourceByEntityID_V2Request";
  }
  protected:
  explicit FindPathIncludingSourceByEntityID_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExcludedEntitiesFieldNumber = 4,
    kRequiredDsrcsFieldNumber = 5,
    kEntityID1FieldNumber = 1,
    kEntityID2FieldNumber = 2,
    kFlagsFieldNumber = 6,
    kMaxDegreeFieldNumber = 3,
  };
  // string excludedEntities = 4;
  void clear_excludedentities();
  const std::string& excludedentities() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_excludedentities(ArgT0&& arg0, ArgT... args);
  std::string* mutable_excludedentities();
  PROTOBUF_NODISCARD std::string* release_excludedentities();
  void set_allocated_excludedentities(std::string* excludedentities);
  private:
  const std::string& _internal_excludedentities() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_excludedentities(const std::string& value);
  std::string* _internal_mutable_excludedentities();
  public:

  // string requiredDsrcs = 5;
  void clear_requireddsrcs();
  const std::string& requireddsrcs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requireddsrcs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requireddsrcs();
  PROTOBUF_NODISCARD std::string* release_requireddsrcs();
  void set_allocated_requireddsrcs(std::string* requireddsrcs);
  private:
  const std::string& _internal_requireddsrcs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requireddsrcs(const std::string& value);
  std::string* _internal_mutable_requireddsrcs();
  public:

  // int64 entityID1 = 1;
  void clear_entityid1();
  int64_t entityid1() const;
  void set_entityid1(int64_t value);
  private:
  int64_t _internal_entityid1() const;
  void _internal_set_entityid1(int64_t value);
  public:

  // int64 entityID2 = 2;
  void clear_entityid2();
  int64_t entityid2() const;
  void set_entityid2(int64_t value);
  private:
  int64_t _internal_entityid2() const;
  void _internal_set_entityid2(int64_t value);
  public:

  // int64 flags = 6;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // int32 maxDegree = 3;
  void clear_maxdegree();
  int32_t maxdegree() const;
  void set_maxdegree(int32_t value);
  private:
  int32_t _internal_maxdegree() const;
  void _internal_set_maxdegree(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathIncludingSourceByEntityID_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr excludedentities_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requireddsrcs_;
    int64_t entityid1_;
    int64_t entityid2_;
    int64_t flags_;
    int32_t maxdegree_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathIncludingSourceByEntityID_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathIncludingSourceByEntityID_V2Response) */ {
 public:
  inline FindPathIncludingSourceByEntityID_V2Response() : FindPathIncludingSourceByEntityID_V2Response(nullptr) {}
  ~FindPathIncludingSourceByEntityID_V2Response() override;
  explicit PROTOBUF_CONSTEXPR FindPathIncludingSourceByEntityID_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathIncludingSourceByEntityID_V2Response(const FindPathIncludingSourceByEntityID_V2Response& from);
  FindPathIncludingSourceByEntityID_V2Response(FindPathIncludingSourceByEntityID_V2Response&& from) noexcept
    : FindPathIncludingSourceByEntityID_V2Response() {
    *this = ::std::move(from);
  }

  inline FindPathIncludingSourceByEntityID_V2Response& operator=(const FindPathIncludingSourceByEntityID_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathIncludingSourceByEntityID_V2Response& operator=(FindPathIncludingSourceByEntityID_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathIncludingSourceByEntityID_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathIncludingSourceByEntityID_V2Response* internal_default_instance() {
    return reinterpret_cast<const FindPathIncludingSourceByEntityID_V2Response*>(
               &_FindPathIncludingSourceByEntityID_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(FindPathIncludingSourceByEntityID_V2Response& a, FindPathIncludingSourceByEntityID_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathIncludingSourceByEntityID_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathIncludingSourceByEntityID_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathIncludingSourceByEntityID_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathIncludingSourceByEntityID_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathIncludingSourceByEntityID_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathIncludingSourceByEntityID_V2Response& from) {
    FindPathIncludingSourceByEntityID_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathIncludingSourceByEntityID_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathIncludingSourceByEntityID_V2Response";
  }
  protected:
  explicit FindPathIncludingSourceByEntityID_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathIncludingSourceByEntityID_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathIncludingSourceByRecordIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathIncludingSourceByRecordIDRequest) */ {
 public:
  inline FindPathIncludingSourceByRecordIDRequest() : FindPathIncludingSourceByRecordIDRequest(nullptr) {}
  ~FindPathIncludingSourceByRecordIDRequest() override;
  explicit PROTOBUF_CONSTEXPR FindPathIncludingSourceByRecordIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathIncludingSourceByRecordIDRequest(const FindPathIncludingSourceByRecordIDRequest& from);
  FindPathIncludingSourceByRecordIDRequest(FindPathIncludingSourceByRecordIDRequest&& from) noexcept
    : FindPathIncludingSourceByRecordIDRequest() {
    *this = ::std::move(from);
  }

  inline FindPathIncludingSourceByRecordIDRequest& operator=(const FindPathIncludingSourceByRecordIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathIncludingSourceByRecordIDRequest& operator=(FindPathIncludingSourceByRecordIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathIncludingSourceByRecordIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathIncludingSourceByRecordIDRequest* internal_default_instance() {
    return reinterpret_cast<const FindPathIncludingSourceByRecordIDRequest*>(
               &_FindPathIncludingSourceByRecordIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(FindPathIncludingSourceByRecordIDRequest& a, FindPathIncludingSourceByRecordIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathIncludingSourceByRecordIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathIncludingSourceByRecordIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathIncludingSourceByRecordIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathIncludingSourceByRecordIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathIncludingSourceByRecordIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathIncludingSourceByRecordIDRequest& from) {
    FindPathIncludingSourceByRecordIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathIncludingSourceByRecordIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathIncludingSourceByRecordIDRequest";
  }
  protected:
  explicit FindPathIncludingSourceByRecordIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCode1FieldNumber = 1,
    kRecordID1FieldNumber = 2,
    kDataSourceCode2FieldNumber = 3,
    kRecordID2FieldNumber = 4,
    kExcludedRecordsFieldNumber = 6,
    kRequiredDsrcsFieldNumber = 7,
    kMaxDegreeFieldNumber = 5,
  };
  // string dataSourceCode1 = 1;
  void clear_datasourcecode1();
  const std::string& datasourcecode1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode1();
  PROTOBUF_NODISCARD std::string* release_datasourcecode1();
  void set_allocated_datasourcecode1(std::string* datasourcecode1);
  private:
  const std::string& _internal_datasourcecode1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode1(const std::string& value);
  std::string* _internal_mutable_datasourcecode1();
  public:

  // string recordID1 = 2;
  void clear_recordid1();
  const std::string& recordid1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid1();
  PROTOBUF_NODISCARD std::string* release_recordid1();
  void set_allocated_recordid1(std::string* recordid1);
  private:
  const std::string& _internal_recordid1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid1(const std::string& value);
  std::string* _internal_mutable_recordid1();
  public:

  // string dataSourceCode2 = 3;
  void clear_datasourcecode2();
  const std::string& datasourcecode2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode2();
  PROTOBUF_NODISCARD std::string* release_datasourcecode2();
  void set_allocated_datasourcecode2(std::string* datasourcecode2);
  private:
  const std::string& _internal_datasourcecode2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode2(const std::string& value);
  std::string* _internal_mutable_datasourcecode2();
  public:

  // string recordID2 = 4;
  void clear_recordid2();
  const std::string& recordid2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid2();
  PROTOBUF_NODISCARD std::string* release_recordid2();
  void set_allocated_recordid2(std::string* recordid2);
  private:
  const std::string& _internal_recordid2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid2(const std::string& value);
  std::string* _internal_mutable_recordid2();
  public:

  // string excludedRecords = 6;
  void clear_excludedrecords();
  const std::string& excludedrecords() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_excludedrecords(ArgT0&& arg0, ArgT... args);
  std::string* mutable_excludedrecords();
  PROTOBUF_NODISCARD std::string* release_excludedrecords();
  void set_allocated_excludedrecords(std::string* excludedrecords);
  private:
  const std::string& _internal_excludedrecords() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_excludedrecords(const std::string& value);
  std::string* _internal_mutable_excludedrecords();
  public:

  // string requiredDsrcs = 7;
  void clear_requireddsrcs();
  const std::string& requireddsrcs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requireddsrcs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requireddsrcs();
  PROTOBUF_NODISCARD std::string* release_requireddsrcs();
  void set_allocated_requireddsrcs(std::string* requireddsrcs);
  private:
  const std::string& _internal_requireddsrcs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requireddsrcs(const std::string& value);
  std::string* _internal_mutable_requireddsrcs();
  public:

  // int32 maxDegree = 5;
  void clear_maxdegree();
  int32_t maxdegree() const;
  void set_maxdegree(int32_t value);
  private:
  int32_t _internal_maxdegree() const;
  void _internal_set_maxdegree(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathIncludingSourceByRecordIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr excludedrecords_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requireddsrcs_;
    int32_t maxdegree_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathIncludingSourceByRecordIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathIncludingSourceByRecordIDResponse) */ {
 public:
  inline FindPathIncludingSourceByRecordIDResponse() : FindPathIncludingSourceByRecordIDResponse(nullptr) {}
  ~FindPathIncludingSourceByRecordIDResponse() override;
  explicit PROTOBUF_CONSTEXPR FindPathIncludingSourceByRecordIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathIncludingSourceByRecordIDResponse(const FindPathIncludingSourceByRecordIDResponse& from);
  FindPathIncludingSourceByRecordIDResponse(FindPathIncludingSourceByRecordIDResponse&& from) noexcept
    : FindPathIncludingSourceByRecordIDResponse() {
    *this = ::std::move(from);
  }

  inline FindPathIncludingSourceByRecordIDResponse& operator=(const FindPathIncludingSourceByRecordIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathIncludingSourceByRecordIDResponse& operator=(FindPathIncludingSourceByRecordIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathIncludingSourceByRecordIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathIncludingSourceByRecordIDResponse* internal_default_instance() {
    return reinterpret_cast<const FindPathIncludingSourceByRecordIDResponse*>(
               &_FindPathIncludingSourceByRecordIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(FindPathIncludingSourceByRecordIDResponse& a, FindPathIncludingSourceByRecordIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathIncludingSourceByRecordIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathIncludingSourceByRecordIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathIncludingSourceByRecordIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathIncludingSourceByRecordIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathIncludingSourceByRecordIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathIncludingSourceByRecordIDResponse& from) {
    FindPathIncludingSourceByRecordIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathIncludingSourceByRecordIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathIncludingSourceByRecordIDResponse";
  }
  protected:
  explicit FindPathIncludingSourceByRecordIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathIncludingSourceByRecordIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathIncludingSourceByRecordID_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathIncludingSourceByRecordID_V2Request) */ {
 public:
  inline FindPathIncludingSourceByRecordID_V2Request() : FindPathIncludingSourceByRecordID_V2Request(nullptr) {}
  ~FindPathIncludingSourceByRecordID_V2Request() override;
  explicit PROTOBUF_CONSTEXPR FindPathIncludingSourceByRecordID_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathIncludingSourceByRecordID_V2Request(const FindPathIncludingSourceByRecordID_V2Request& from);
  FindPathIncludingSourceByRecordID_V2Request(FindPathIncludingSourceByRecordID_V2Request&& from) noexcept
    : FindPathIncludingSourceByRecordID_V2Request() {
    *this = ::std::move(from);
  }

  inline FindPathIncludingSourceByRecordID_V2Request& operator=(const FindPathIncludingSourceByRecordID_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathIncludingSourceByRecordID_V2Request& operator=(FindPathIncludingSourceByRecordID_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathIncludingSourceByRecordID_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathIncludingSourceByRecordID_V2Request* internal_default_instance() {
    return reinterpret_cast<const FindPathIncludingSourceByRecordID_V2Request*>(
               &_FindPathIncludingSourceByRecordID_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(FindPathIncludingSourceByRecordID_V2Request& a, FindPathIncludingSourceByRecordID_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathIncludingSourceByRecordID_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathIncludingSourceByRecordID_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathIncludingSourceByRecordID_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathIncludingSourceByRecordID_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathIncludingSourceByRecordID_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathIncludingSourceByRecordID_V2Request& from) {
    FindPathIncludingSourceByRecordID_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathIncludingSourceByRecordID_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathIncludingSourceByRecordID_V2Request";
  }
  protected:
  explicit FindPathIncludingSourceByRecordID_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCode1FieldNumber = 1,
    kRecordID1FieldNumber = 2,
    kDataSourceCode2FieldNumber = 3,
    kRecordID2FieldNumber = 4,
    kExcludedRecordsFieldNumber = 6,
    kRequiredDsrcsFieldNumber = 7,
    kFlagsFieldNumber = 8,
    kMaxDegreeFieldNumber = 5,
  };
  // string dataSourceCode1 = 1;
  void clear_datasourcecode1();
  const std::string& datasourcecode1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode1();
  PROTOBUF_NODISCARD std::string* release_datasourcecode1();
  void set_allocated_datasourcecode1(std::string* datasourcecode1);
  private:
  const std::string& _internal_datasourcecode1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode1(const std::string& value);
  std::string* _internal_mutable_datasourcecode1();
  public:

  // string recordID1 = 2;
  void clear_recordid1();
  const std::string& recordid1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid1();
  PROTOBUF_NODISCARD std::string* release_recordid1();
  void set_allocated_recordid1(std::string* recordid1);
  private:
  const std::string& _internal_recordid1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid1(const std::string& value);
  std::string* _internal_mutable_recordid1();
  public:

  // string dataSourceCode2 = 3;
  void clear_datasourcecode2();
  const std::string& datasourcecode2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode2();
  PROTOBUF_NODISCARD std::string* release_datasourcecode2();
  void set_allocated_datasourcecode2(std::string* datasourcecode2);
  private:
  const std::string& _internal_datasourcecode2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode2(const std::string& value);
  std::string* _internal_mutable_datasourcecode2();
  public:

  // string recordID2 = 4;
  void clear_recordid2();
  const std::string& recordid2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid2();
  PROTOBUF_NODISCARD std::string* release_recordid2();
  void set_allocated_recordid2(std::string* recordid2);
  private:
  const std::string& _internal_recordid2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid2(const std::string& value);
  std::string* _internal_mutable_recordid2();
  public:

  // string excludedRecords = 6;
  void clear_excludedrecords();
  const std::string& excludedrecords() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_excludedrecords(ArgT0&& arg0, ArgT... args);
  std::string* mutable_excludedrecords();
  PROTOBUF_NODISCARD std::string* release_excludedrecords();
  void set_allocated_excludedrecords(std::string* excludedrecords);
  private:
  const std::string& _internal_excludedrecords() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_excludedrecords(const std::string& value);
  std::string* _internal_mutable_excludedrecords();
  public:

  // string requiredDsrcs = 7;
  void clear_requireddsrcs();
  const std::string& requireddsrcs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requireddsrcs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requireddsrcs();
  PROTOBUF_NODISCARD std::string* release_requireddsrcs();
  void set_allocated_requireddsrcs(std::string* requireddsrcs);
  private:
  const std::string& _internal_requireddsrcs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requireddsrcs(const std::string& value);
  std::string* _internal_mutable_requireddsrcs();
  public:

  // int64 flags = 8;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // int32 maxDegree = 5;
  void clear_maxdegree();
  int32_t maxdegree() const;
  void set_maxdegree(int32_t value);
  private:
  int32_t _internal_maxdegree() const;
  void _internal_set_maxdegree(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathIncludingSourceByRecordID_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr excludedrecords_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requireddsrcs_;
    int64_t flags_;
    int32_t maxdegree_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class FindPathIncludingSourceByRecordID_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.FindPathIncludingSourceByRecordID_V2Response) */ {
 public:
  inline FindPathIncludingSourceByRecordID_V2Response() : FindPathIncludingSourceByRecordID_V2Response(nullptr) {}
  ~FindPathIncludingSourceByRecordID_V2Response() override;
  explicit PROTOBUF_CONSTEXPR FindPathIncludingSourceByRecordID_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPathIncludingSourceByRecordID_V2Response(const FindPathIncludingSourceByRecordID_V2Response& from);
  FindPathIncludingSourceByRecordID_V2Response(FindPathIncludingSourceByRecordID_V2Response&& from) noexcept
    : FindPathIncludingSourceByRecordID_V2Response() {
    *this = ::std::move(from);
  }

  inline FindPathIncludingSourceByRecordID_V2Response& operator=(const FindPathIncludingSourceByRecordID_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPathIncludingSourceByRecordID_V2Response& operator=(FindPathIncludingSourceByRecordID_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPathIncludingSourceByRecordID_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPathIncludingSourceByRecordID_V2Response* internal_default_instance() {
    return reinterpret_cast<const FindPathIncludingSourceByRecordID_V2Response*>(
               &_FindPathIncludingSourceByRecordID_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(FindPathIncludingSourceByRecordID_V2Response& a, FindPathIncludingSourceByRecordID_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPathIncludingSourceByRecordID_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPathIncludingSourceByRecordID_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPathIncludingSourceByRecordID_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPathIncludingSourceByRecordID_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPathIncludingSourceByRecordID_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPathIncludingSourceByRecordID_V2Response& from) {
    FindPathIncludingSourceByRecordID_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathIncludingSourceByRecordID_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.FindPathIncludingSourceByRecordID_V2Response";
  }
  protected:
  explicit FindPathIncludingSourceByRecordID_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.FindPathIncludingSourceByRecordID_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetActiveConfigIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.GetActiveConfigIDRequest) */ {
 public:
  inline GetActiveConfigIDRequest() : GetActiveConfigIDRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetActiveConfigIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetActiveConfigIDRequest(const GetActiveConfigIDRequest& from);
  GetActiveConfigIDRequest(GetActiveConfigIDRequest&& from) noexcept
    : GetActiveConfigIDRequest() {
    *this = ::std::move(from);
  }

  inline GetActiveConfigIDRequest& operator=(const GetActiveConfigIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActiveConfigIDRequest& operator=(GetActiveConfigIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetActiveConfigIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetActiveConfigIDRequest* internal_default_instance() {
    return reinterpret_cast<const GetActiveConfigIDRequest*>(
               &_GetActiveConfigIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(GetActiveConfigIDRequest& a, GetActiveConfigIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActiveConfigIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetActiveConfigIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetActiveConfigIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetActiveConfigIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetActiveConfigIDRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetActiveConfigIDRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetActiveConfigIDRequest";
  }
  protected:
  explicit GetActiveConfigIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.GetActiveConfigIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetActiveConfigIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetActiveConfigIDResponse) */ {
 public:
  inline GetActiveConfigIDResponse() : GetActiveConfigIDResponse(nullptr) {}
  ~GetActiveConfigIDResponse() override;
  explicit PROTOBUF_CONSTEXPR GetActiveConfigIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetActiveConfigIDResponse(const GetActiveConfigIDResponse& from);
  GetActiveConfigIDResponse(GetActiveConfigIDResponse&& from) noexcept
    : GetActiveConfigIDResponse() {
    *this = ::std::move(from);
  }

  inline GetActiveConfigIDResponse& operator=(const GetActiveConfigIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActiveConfigIDResponse& operator=(GetActiveConfigIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetActiveConfigIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetActiveConfigIDResponse* internal_default_instance() {
    return reinterpret_cast<const GetActiveConfigIDResponse*>(
               &_GetActiveConfigIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(GetActiveConfigIDResponse& a, GetActiveConfigIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActiveConfigIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetActiveConfigIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetActiveConfigIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetActiveConfigIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetActiveConfigIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetActiveConfigIDResponse& from) {
    GetActiveConfigIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActiveConfigIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetActiveConfigIDResponse";
  }
  protected:
  explicit GetActiveConfigIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  int64_t result() const;
  void set_result(int64_t value);
  private:
  int64_t _internal_result() const;
  void _internal_set_result(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetActiveConfigIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetEntityByEntityIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetEntityByEntityIDRequest) */ {
 public:
  inline GetEntityByEntityIDRequest() : GetEntityByEntityIDRequest(nullptr) {}
  ~GetEntityByEntityIDRequest() override;
  explicit PROTOBUF_CONSTEXPR GetEntityByEntityIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEntityByEntityIDRequest(const GetEntityByEntityIDRequest& from);
  GetEntityByEntityIDRequest(GetEntityByEntityIDRequest&& from) noexcept
    : GetEntityByEntityIDRequest() {
    *this = ::std::move(from);
  }

  inline GetEntityByEntityIDRequest& operator=(const GetEntityByEntityIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityByEntityIDRequest& operator=(GetEntityByEntityIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEntityByEntityIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEntityByEntityIDRequest* internal_default_instance() {
    return reinterpret_cast<const GetEntityByEntityIDRequest*>(
               &_GetEntityByEntityIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(GetEntityByEntityIDRequest& a, GetEntityByEntityIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityByEntityIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntityByEntityIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEntityByEntityIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEntityByEntityIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEntityByEntityIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEntityByEntityIDRequest& from) {
    GetEntityByEntityIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityByEntityIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetEntityByEntityIDRequest";
  }
  protected:
  explicit GetEntityByEntityIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIDFieldNumber = 1,
  };
  // int64 entityID = 1;
  void clear_entityid();
  int64_t entityid() const;
  void set_entityid(int64_t value);
  private:
  int64_t _internal_entityid() const;
  void _internal_set_entityid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetEntityByEntityIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t entityid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetEntityByEntityIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetEntityByEntityIDResponse) */ {
 public:
  inline GetEntityByEntityIDResponse() : GetEntityByEntityIDResponse(nullptr) {}
  ~GetEntityByEntityIDResponse() override;
  explicit PROTOBUF_CONSTEXPR GetEntityByEntityIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEntityByEntityIDResponse(const GetEntityByEntityIDResponse& from);
  GetEntityByEntityIDResponse(GetEntityByEntityIDResponse&& from) noexcept
    : GetEntityByEntityIDResponse() {
    *this = ::std::move(from);
  }

  inline GetEntityByEntityIDResponse& operator=(const GetEntityByEntityIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityByEntityIDResponse& operator=(GetEntityByEntityIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEntityByEntityIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEntityByEntityIDResponse* internal_default_instance() {
    return reinterpret_cast<const GetEntityByEntityIDResponse*>(
               &_GetEntityByEntityIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(GetEntityByEntityIDResponse& a, GetEntityByEntityIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityByEntityIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntityByEntityIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEntityByEntityIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEntityByEntityIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEntityByEntityIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEntityByEntityIDResponse& from) {
    GetEntityByEntityIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityByEntityIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetEntityByEntityIDResponse";
  }
  protected:
  explicit GetEntityByEntityIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetEntityByEntityIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetEntityByEntityID_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetEntityByEntityID_V2Request) */ {
 public:
  inline GetEntityByEntityID_V2Request() : GetEntityByEntityID_V2Request(nullptr) {}
  ~GetEntityByEntityID_V2Request() override;
  explicit PROTOBUF_CONSTEXPR GetEntityByEntityID_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEntityByEntityID_V2Request(const GetEntityByEntityID_V2Request& from);
  GetEntityByEntityID_V2Request(GetEntityByEntityID_V2Request&& from) noexcept
    : GetEntityByEntityID_V2Request() {
    *this = ::std::move(from);
  }

  inline GetEntityByEntityID_V2Request& operator=(const GetEntityByEntityID_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityByEntityID_V2Request& operator=(GetEntityByEntityID_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEntityByEntityID_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEntityByEntityID_V2Request* internal_default_instance() {
    return reinterpret_cast<const GetEntityByEntityID_V2Request*>(
               &_GetEntityByEntityID_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(GetEntityByEntityID_V2Request& a, GetEntityByEntityID_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityByEntityID_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntityByEntityID_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEntityByEntityID_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEntityByEntityID_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEntityByEntityID_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEntityByEntityID_V2Request& from) {
    GetEntityByEntityID_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityByEntityID_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetEntityByEntityID_V2Request";
  }
  protected:
  explicit GetEntityByEntityID_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIDFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // int64 entityID = 1;
  void clear_entityid();
  int64_t entityid() const;
  void set_entityid(int64_t value);
  private:
  int64_t _internal_entityid() const;
  void _internal_set_entityid(int64_t value);
  public:

  // int64 flags = 2;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetEntityByEntityID_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t entityid_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetEntityByEntityID_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetEntityByEntityID_V2Response) */ {
 public:
  inline GetEntityByEntityID_V2Response() : GetEntityByEntityID_V2Response(nullptr) {}
  ~GetEntityByEntityID_V2Response() override;
  explicit PROTOBUF_CONSTEXPR GetEntityByEntityID_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEntityByEntityID_V2Response(const GetEntityByEntityID_V2Response& from);
  GetEntityByEntityID_V2Response(GetEntityByEntityID_V2Response&& from) noexcept
    : GetEntityByEntityID_V2Response() {
    *this = ::std::move(from);
  }

  inline GetEntityByEntityID_V2Response& operator=(const GetEntityByEntityID_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityByEntityID_V2Response& operator=(GetEntityByEntityID_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEntityByEntityID_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEntityByEntityID_V2Response* internal_default_instance() {
    return reinterpret_cast<const GetEntityByEntityID_V2Response*>(
               &_GetEntityByEntityID_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(GetEntityByEntityID_V2Response& a, GetEntityByEntityID_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityByEntityID_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntityByEntityID_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEntityByEntityID_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEntityByEntityID_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEntityByEntityID_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEntityByEntityID_V2Response& from) {
    GetEntityByEntityID_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityByEntityID_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetEntityByEntityID_V2Response";
  }
  protected:
  explicit GetEntityByEntityID_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetEntityByEntityID_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetEntityByRecordIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetEntityByRecordIDRequest) */ {
 public:
  inline GetEntityByRecordIDRequest() : GetEntityByRecordIDRequest(nullptr) {}
  ~GetEntityByRecordIDRequest() override;
  explicit PROTOBUF_CONSTEXPR GetEntityByRecordIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEntityByRecordIDRequest(const GetEntityByRecordIDRequest& from);
  GetEntityByRecordIDRequest(GetEntityByRecordIDRequest&& from) noexcept
    : GetEntityByRecordIDRequest() {
    *this = ::std::move(from);
  }

  inline GetEntityByRecordIDRequest& operator=(const GetEntityByRecordIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityByRecordIDRequest& operator=(GetEntityByRecordIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEntityByRecordIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEntityByRecordIDRequest* internal_default_instance() {
    return reinterpret_cast<const GetEntityByRecordIDRequest*>(
               &_GetEntityByRecordIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(GetEntityByRecordIDRequest& a, GetEntityByRecordIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityByRecordIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntityByRecordIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEntityByRecordIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEntityByRecordIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEntityByRecordIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEntityByRecordIDRequest& from) {
    GetEntityByRecordIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityByRecordIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetEntityByRecordIDRequest";
  }
  protected:
  explicit GetEntityByRecordIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIDFieldNumber = 2,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode();
  PROTOBUF_NODISCARD std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordID = 2;
  void clear_recordid();
  const std::string& recordid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid();
  PROTOBUF_NODISCARD std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetEntityByRecordIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetEntityByRecordIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetEntityByRecordIDResponse) */ {
 public:
  inline GetEntityByRecordIDResponse() : GetEntityByRecordIDResponse(nullptr) {}
  ~GetEntityByRecordIDResponse() override;
  explicit PROTOBUF_CONSTEXPR GetEntityByRecordIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEntityByRecordIDResponse(const GetEntityByRecordIDResponse& from);
  GetEntityByRecordIDResponse(GetEntityByRecordIDResponse&& from) noexcept
    : GetEntityByRecordIDResponse() {
    *this = ::std::move(from);
  }

  inline GetEntityByRecordIDResponse& operator=(const GetEntityByRecordIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityByRecordIDResponse& operator=(GetEntityByRecordIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEntityByRecordIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEntityByRecordIDResponse* internal_default_instance() {
    return reinterpret_cast<const GetEntityByRecordIDResponse*>(
               &_GetEntityByRecordIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(GetEntityByRecordIDResponse& a, GetEntityByRecordIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityByRecordIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntityByRecordIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEntityByRecordIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEntityByRecordIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEntityByRecordIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEntityByRecordIDResponse& from) {
    GetEntityByRecordIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityByRecordIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetEntityByRecordIDResponse";
  }
  protected:
  explicit GetEntityByRecordIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetEntityByRecordIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetEntityByRecordID_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetEntityByRecordID_V2Request) */ {
 public:
  inline GetEntityByRecordID_V2Request() : GetEntityByRecordID_V2Request(nullptr) {}
  ~GetEntityByRecordID_V2Request() override;
  explicit PROTOBUF_CONSTEXPR GetEntityByRecordID_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEntityByRecordID_V2Request(const GetEntityByRecordID_V2Request& from);
  GetEntityByRecordID_V2Request(GetEntityByRecordID_V2Request&& from) noexcept
    : GetEntityByRecordID_V2Request() {
    *this = ::std::move(from);
  }

  inline GetEntityByRecordID_V2Request& operator=(const GetEntityByRecordID_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityByRecordID_V2Request& operator=(GetEntityByRecordID_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEntityByRecordID_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEntityByRecordID_V2Request* internal_default_instance() {
    return reinterpret_cast<const GetEntityByRecordID_V2Request*>(
               &_GetEntityByRecordID_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(GetEntityByRecordID_V2Request& a, GetEntityByRecordID_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityByRecordID_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntityByRecordID_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEntityByRecordID_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEntityByRecordID_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEntityByRecordID_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEntityByRecordID_V2Request& from) {
    GetEntityByRecordID_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityByRecordID_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetEntityByRecordID_V2Request";
  }
  protected:
  explicit GetEntityByRecordID_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIDFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode();
  PROTOBUF_NODISCARD std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordID = 2;
  void clear_recordid();
  const std::string& recordid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid();
  PROTOBUF_NODISCARD std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // int64 flags = 3;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetEntityByRecordID_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetEntityByRecordID_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetEntityByRecordID_V2Response) */ {
 public:
  inline GetEntityByRecordID_V2Response() : GetEntityByRecordID_V2Response(nullptr) {}
  ~GetEntityByRecordID_V2Response() override;
  explicit PROTOBUF_CONSTEXPR GetEntityByRecordID_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEntityByRecordID_V2Response(const GetEntityByRecordID_V2Response& from);
  GetEntityByRecordID_V2Response(GetEntityByRecordID_V2Response&& from) noexcept
    : GetEntityByRecordID_V2Response() {
    *this = ::std::move(from);
  }

  inline GetEntityByRecordID_V2Response& operator=(const GetEntityByRecordID_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityByRecordID_V2Response& operator=(GetEntityByRecordID_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEntityByRecordID_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEntityByRecordID_V2Response* internal_default_instance() {
    return reinterpret_cast<const GetEntityByRecordID_V2Response*>(
               &_GetEntityByRecordID_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(GetEntityByRecordID_V2Response& a, GetEntityByRecordID_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityByRecordID_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntityByRecordID_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEntityByRecordID_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEntityByRecordID_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEntityByRecordID_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEntityByRecordID_V2Response& from) {
    GetEntityByRecordID_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityByRecordID_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetEntityByRecordID_V2Response";
  }
  protected:
  explicit GetEntityByRecordID_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetEntityByRecordID_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetRecordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetRecordRequest) */ {
 public:
  inline GetRecordRequest() : GetRecordRequest(nullptr) {}
  ~GetRecordRequest() override;
  explicit PROTOBUF_CONSTEXPR GetRecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecordRequest(const GetRecordRequest& from);
  GetRecordRequest(GetRecordRequest&& from) noexcept
    : GetRecordRequest() {
    *this = ::std::move(from);
  }

  inline GetRecordRequest& operator=(const GetRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecordRequest& operator=(GetRecordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecordRequest* internal_default_instance() {
    return reinterpret_cast<const GetRecordRequest*>(
               &_GetRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(GetRecordRequest& a, GetRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRecordRequest& from) {
    GetRecordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetRecordRequest";
  }
  protected:
  explicit GetRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIDFieldNumber = 2,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode();
  PROTOBUF_NODISCARD std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordID = 2;
  void clear_recordid();
  const std::string& recordid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid();
  PROTOBUF_NODISCARD std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetRecordResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetRecordResponse) */ {
 public:
  inline GetRecordResponse() : GetRecordResponse(nullptr) {}
  ~GetRecordResponse() override;
  explicit PROTOBUF_CONSTEXPR GetRecordResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecordResponse(const GetRecordResponse& from);
  GetRecordResponse(GetRecordResponse&& from) noexcept
    : GetRecordResponse() {
    *this = ::std::move(from);
  }

  inline GetRecordResponse& operator=(const GetRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecordResponse& operator=(GetRecordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecordResponse* internal_default_instance() {
    return reinterpret_cast<const GetRecordResponse*>(
               &_GetRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(GetRecordResponse& a, GetRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecordResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecordResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecordResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRecordResponse& from) {
    GetRecordResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecordResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetRecordResponse";
  }
  protected:
  explicit GetRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetRecord_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetRecord_V2Request) */ {
 public:
  inline GetRecord_V2Request() : GetRecord_V2Request(nullptr) {}
  ~GetRecord_V2Request() override;
  explicit PROTOBUF_CONSTEXPR GetRecord_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecord_V2Request(const GetRecord_V2Request& from);
  GetRecord_V2Request(GetRecord_V2Request&& from) noexcept
    : GetRecord_V2Request() {
    *this = ::std::move(from);
  }

  inline GetRecord_V2Request& operator=(const GetRecord_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecord_V2Request& operator=(GetRecord_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecord_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecord_V2Request* internal_default_instance() {
    return reinterpret_cast<const GetRecord_V2Request*>(
               &_GetRecord_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(GetRecord_V2Request& a, GetRecord_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecord_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecord_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecord_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecord_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecord_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRecord_V2Request& from) {
    GetRecord_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecord_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetRecord_V2Request";
  }
  protected:
  explicit GetRecord_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIDFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode();
  PROTOBUF_NODISCARD std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordID = 2;
  void clear_recordid();
  const std::string& recordid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid();
  PROTOBUF_NODISCARD std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // int64 flags = 3;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetRecord_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetRecord_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetRecord_V2Response) */ {
 public:
  inline GetRecord_V2Response() : GetRecord_V2Response(nullptr) {}
  ~GetRecord_V2Response() override;
  explicit PROTOBUF_CONSTEXPR GetRecord_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecord_V2Response(const GetRecord_V2Response& from);
  GetRecord_V2Response(GetRecord_V2Response&& from) noexcept
    : GetRecord_V2Response() {
    *this = ::std::move(from);
  }

  inline GetRecord_V2Response& operator=(const GetRecord_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecord_V2Response& operator=(GetRecord_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecord_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecord_V2Response* internal_default_instance() {
    return reinterpret_cast<const GetRecord_V2Response*>(
               &_GetRecord_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(GetRecord_V2Response& a, GetRecord_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecord_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecord_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecord_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecord_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecord_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRecord_V2Response& from) {
    GetRecord_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecord_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetRecord_V2Response";
  }
  protected:
  explicit GetRecord_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetRecord_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetRedoRecordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.GetRedoRecordRequest) */ {
 public:
  inline GetRedoRecordRequest() : GetRedoRecordRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetRedoRecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRedoRecordRequest(const GetRedoRecordRequest& from);
  GetRedoRecordRequest(GetRedoRecordRequest&& from) noexcept
    : GetRedoRecordRequest() {
    *this = ::std::move(from);
  }

  inline GetRedoRecordRequest& operator=(const GetRedoRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRedoRecordRequest& operator=(GetRedoRecordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRedoRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRedoRecordRequest* internal_default_instance() {
    return reinterpret_cast<const GetRedoRecordRequest*>(
               &_GetRedoRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(GetRedoRecordRequest& a, GetRedoRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRedoRecordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRedoRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRedoRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRedoRecordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetRedoRecordRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetRedoRecordRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetRedoRecordRequest";
  }
  protected:
  explicit GetRedoRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.GetRedoRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetRedoRecordResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetRedoRecordResponse) */ {
 public:
  inline GetRedoRecordResponse() : GetRedoRecordResponse(nullptr) {}
  ~GetRedoRecordResponse() override;
  explicit PROTOBUF_CONSTEXPR GetRedoRecordResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRedoRecordResponse(const GetRedoRecordResponse& from);
  GetRedoRecordResponse(GetRedoRecordResponse&& from) noexcept
    : GetRedoRecordResponse() {
    *this = ::std::move(from);
  }

  inline GetRedoRecordResponse& operator=(const GetRedoRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRedoRecordResponse& operator=(GetRedoRecordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRedoRecordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRedoRecordResponse* internal_default_instance() {
    return reinterpret_cast<const GetRedoRecordResponse*>(
               &_GetRedoRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(GetRedoRecordResponse& a, GetRedoRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRedoRecordResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRedoRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRedoRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRedoRecordResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRedoRecordResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRedoRecordResponse& from) {
    GetRedoRecordResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRedoRecordResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetRedoRecordResponse";
  }
  protected:
  explicit GetRedoRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetRedoRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetRepositoryLastModifiedTimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.GetRepositoryLastModifiedTimeRequest) */ {
 public:
  inline GetRepositoryLastModifiedTimeRequest() : GetRepositoryLastModifiedTimeRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetRepositoryLastModifiedTimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRepositoryLastModifiedTimeRequest(const GetRepositoryLastModifiedTimeRequest& from);
  GetRepositoryLastModifiedTimeRequest(GetRepositoryLastModifiedTimeRequest&& from) noexcept
    : GetRepositoryLastModifiedTimeRequest() {
    *this = ::std::move(from);
  }

  inline GetRepositoryLastModifiedTimeRequest& operator=(const GetRepositoryLastModifiedTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRepositoryLastModifiedTimeRequest& operator=(GetRepositoryLastModifiedTimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRepositoryLastModifiedTimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRepositoryLastModifiedTimeRequest* internal_default_instance() {
    return reinterpret_cast<const GetRepositoryLastModifiedTimeRequest*>(
               &_GetRepositoryLastModifiedTimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(GetRepositoryLastModifiedTimeRequest& a, GetRepositoryLastModifiedTimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRepositoryLastModifiedTimeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRepositoryLastModifiedTimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRepositoryLastModifiedTimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRepositoryLastModifiedTimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetRepositoryLastModifiedTimeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetRepositoryLastModifiedTimeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetRepositoryLastModifiedTimeRequest";
  }
  protected:
  explicit GetRepositoryLastModifiedTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.GetRepositoryLastModifiedTimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetRepositoryLastModifiedTimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetRepositoryLastModifiedTimeResponse) */ {
 public:
  inline GetRepositoryLastModifiedTimeResponse() : GetRepositoryLastModifiedTimeResponse(nullptr) {}
  ~GetRepositoryLastModifiedTimeResponse() override;
  explicit PROTOBUF_CONSTEXPR GetRepositoryLastModifiedTimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRepositoryLastModifiedTimeResponse(const GetRepositoryLastModifiedTimeResponse& from);
  GetRepositoryLastModifiedTimeResponse(GetRepositoryLastModifiedTimeResponse&& from) noexcept
    : GetRepositoryLastModifiedTimeResponse() {
    *this = ::std::move(from);
  }

  inline GetRepositoryLastModifiedTimeResponse& operator=(const GetRepositoryLastModifiedTimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRepositoryLastModifiedTimeResponse& operator=(GetRepositoryLastModifiedTimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRepositoryLastModifiedTimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRepositoryLastModifiedTimeResponse* internal_default_instance() {
    return reinterpret_cast<const GetRepositoryLastModifiedTimeResponse*>(
               &_GetRepositoryLastModifiedTimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(GetRepositoryLastModifiedTimeResponse& a, GetRepositoryLastModifiedTimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRepositoryLastModifiedTimeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRepositoryLastModifiedTimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRepositoryLastModifiedTimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRepositoryLastModifiedTimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRepositoryLastModifiedTimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRepositoryLastModifiedTimeResponse& from) {
    GetRepositoryLastModifiedTimeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRepositoryLastModifiedTimeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetRepositoryLastModifiedTimeResponse";
  }
  protected:
  explicit GetRepositoryLastModifiedTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  int64_t result() const;
  void set_result(int64_t value);
  private:
  int64_t _internal_result() const;
  void _internal_set_result(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetRepositoryLastModifiedTimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetVirtualEntityByRecordIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetVirtualEntityByRecordIDRequest) */ {
 public:
  inline GetVirtualEntityByRecordIDRequest() : GetVirtualEntityByRecordIDRequest(nullptr) {}
  ~GetVirtualEntityByRecordIDRequest() override;
  explicit PROTOBUF_CONSTEXPR GetVirtualEntityByRecordIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtualEntityByRecordIDRequest(const GetVirtualEntityByRecordIDRequest& from);
  GetVirtualEntityByRecordIDRequest(GetVirtualEntityByRecordIDRequest&& from) noexcept
    : GetVirtualEntityByRecordIDRequest() {
    *this = ::std::move(from);
  }

  inline GetVirtualEntityByRecordIDRequest& operator=(const GetVirtualEntityByRecordIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtualEntityByRecordIDRequest& operator=(GetVirtualEntityByRecordIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVirtualEntityByRecordIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtualEntityByRecordIDRequest* internal_default_instance() {
    return reinterpret_cast<const GetVirtualEntityByRecordIDRequest*>(
               &_GetVirtualEntityByRecordIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(GetVirtualEntityByRecordIDRequest& a, GetVirtualEntityByRecordIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtualEntityByRecordIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtualEntityByRecordIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtualEntityByRecordIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtualEntityByRecordIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVirtualEntityByRecordIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVirtualEntityByRecordIDRequest& from) {
    GetVirtualEntityByRecordIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtualEntityByRecordIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetVirtualEntityByRecordIDRequest";
  }
  protected:
  explicit GetVirtualEntityByRecordIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordListFieldNumber = 1,
  };
  // string recordList = 1;
  void clear_recordlist();
  const std::string& recordlist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordlist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordlist();
  PROTOBUF_NODISCARD std::string* release_recordlist();
  void set_allocated_recordlist(std::string* recordlist);
  private:
  const std::string& _internal_recordlist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordlist(const std::string& value);
  std::string* _internal_mutable_recordlist();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetVirtualEntityByRecordIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordlist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetVirtualEntityByRecordIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetVirtualEntityByRecordIDResponse) */ {
 public:
  inline GetVirtualEntityByRecordIDResponse() : GetVirtualEntityByRecordIDResponse(nullptr) {}
  ~GetVirtualEntityByRecordIDResponse() override;
  explicit PROTOBUF_CONSTEXPR GetVirtualEntityByRecordIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtualEntityByRecordIDResponse(const GetVirtualEntityByRecordIDResponse& from);
  GetVirtualEntityByRecordIDResponse(GetVirtualEntityByRecordIDResponse&& from) noexcept
    : GetVirtualEntityByRecordIDResponse() {
    *this = ::std::move(from);
  }

  inline GetVirtualEntityByRecordIDResponse& operator=(const GetVirtualEntityByRecordIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtualEntityByRecordIDResponse& operator=(GetVirtualEntityByRecordIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVirtualEntityByRecordIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtualEntityByRecordIDResponse* internal_default_instance() {
    return reinterpret_cast<const GetVirtualEntityByRecordIDResponse*>(
               &_GetVirtualEntityByRecordIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(GetVirtualEntityByRecordIDResponse& a, GetVirtualEntityByRecordIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtualEntityByRecordIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtualEntityByRecordIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtualEntityByRecordIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtualEntityByRecordIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVirtualEntityByRecordIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVirtualEntityByRecordIDResponse& from) {
    GetVirtualEntityByRecordIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtualEntityByRecordIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetVirtualEntityByRecordIDResponse";
  }
  protected:
  explicit GetVirtualEntityByRecordIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetVirtualEntityByRecordIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetVirtualEntityByRecordID_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetVirtualEntityByRecordID_V2Request) */ {
 public:
  inline GetVirtualEntityByRecordID_V2Request() : GetVirtualEntityByRecordID_V2Request(nullptr) {}
  ~GetVirtualEntityByRecordID_V2Request() override;
  explicit PROTOBUF_CONSTEXPR GetVirtualEntityByRecordID_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtualEntityByRecordID_V2Request(const GetVirtualEntityByRecordID_V2Request& from);
  GetVirtualEntityByRecordID_V2Request(GetVirtualEntityByRecordID_V2Request&& from) noexcept
    : GetVirtualEntityByRecordID_V2Request() {
    *this = ::std::move(from);
  }

  inline GetVirtualEntityByRecordID_V2Request& operator=(const GetVirtualEntityByRecordID_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtualEntityByRecordID_V2Request& operator=(GetVirtualEntityByRecordID_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVirtualEntityByRecordID_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtualEntityByRecordID_V2Request* internal_default_instance() {
    return reinterpret_cast<const GetVirtualEntityByRecordID_V2Request*>(
               &_GetVirtualEntityByRecordID_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(GetVirtualEntityByRecordID_V2Request& a, GetVirtualEntityByRecordID_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtualEntityByRecordID_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtualEntityByRecordID_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtualEntityByRecordID_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtualEntityByRecordID_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVirtualEntityByRecordID_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVirtualEntityByRecordID_V2Request& from) {
    GetVirtualEntityByRecordID_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtualEntityByRecordID_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetVirtualEntityByRecordID_V2Request";
  }
  protected:
  explicit GetVirtualEntityByRecordID_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordListFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // string recordList = 1;
  void clear_recordlist();
  const std::string& recordlist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordlist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordlist();
  PROTOBUF_NODISCARD std::string* release_recordlist();
  void set_allocated_recordlist(std::string* recordlist);
  private:
  const std::string& _internal_recordlist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordlist(const std::string& value);
  std::string* _internal_mutable_recordlist();
  public:

  // int64 flags = 2;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetVirtualEntityByRecordID_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordlist_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class GetVirtualEntityByRecordID_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.GetVirtualEntityByRecordID_V2Response) */ {
 public:
  inline GetVirtualEntityByRecordID_V2Response() : GetVirtualEntityByRecordID_V2Response(nullptr) {}
  ~GetVirtualEntityByRecordID_V2Response() override;
  explicit PROTOBUF_CONSTEXPR GetVirtualEntityByRecordID_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtualEntityByRecordID_V2Response(const GetVirtualEntityByRecordID_V2Response& from);
  GetVirtualEntityByRecordID_V2Response(GetVirtualEntityByRecordID_V2Response&& from) noexcept
    : GetVirtualEntityByRecordID_V2Response() {
    *this = ::std::move(from);
  }

  inline GetVirtualEntityByRecordID_V2Response& operator=(const GetVirtualEntityByRecordID_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtualEntityByRecordID_V2Response& operator=(GetVirtualEntityByRecordID_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVirtualEntityByRecordID_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtualEntityByRecordID_V2Response* internal_default_instance() {
    return reinterpret_cast<const GetVirtualEntityByRecordID_V2Response*>(
               &_GetVirtualEntityByRecordID_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(GetVirtualEntityByRecordID_V2Response& a, GetVirtualEntityByRecordID_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtualEntityByRecordID_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtualEntityByRecordID_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtualEntityByRecordID_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtualEntityByRecordID_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVirtualEntityByRecordID_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVirtualEntityByRecordID_V2Response& from) {
    GetVirtualEntityByRecordID_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtualEntityByRecordID_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.GetVirtualEntityByRecordID_V2Response";
  }
  protected:
  explicit GetVirtualEntityByRecordID_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.GetVirtualEntityByRecordID_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class HowEntityByEntityIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.HowEntityByEntityIDRequest) */ {
 public:
  inline HowEntityByEntityIDRequest() : HowEntityByEntityIDRequest(nullptr) {}
  ~HowEntityByEntityIDRequest() override;
  explicit PROTOBUF_CONSTEXPR HowEntityByEntityIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HowEntityByEntityIDRequest(const HowEntityByEntityIDRequest& from);
  HowEntityByEntityIDRequest(HowEntityByEntityIDRequest&& from) noexcept
    : HowEntityByEntityIDRequest() {
    *this = ::std::move(from);
  }

  inline HowEntityByEntityIDRequest& operator=(const HowEntityByEntityIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HowEntityByEntityIDRequest& operator=(HowEntityByEntityIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HowEntityByEntityIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HowEntityByEntityIDRequest* internal_default_instance() {
    return reinterpret_cast<const HowEntityByEntityIDRequest*>(
               &_HowEntityByEntityIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(HowEntityByEntityIDRequest& a, HowEntityByEntityIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HowEntityByEntityIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HowEntityByEntityIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HowEntityByEntityIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HowEntityByEntityIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HowEntityByEntityIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HowEntityByEntityIDRequest& from) {
    HowEntityByEntityIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HowEntityByEntityIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.HowEntityByEntityIDRequest";
  }
  protected:
  explicit HowEntityByEntityIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIDFieldNumber = 1,
  };
  // int64 entityID = 1;
  void clear_entityid();
  int64_t entityid() const;
  void set_entityid(int64_t value);
  private:
  int64_t _internal_entityid() const;
  void _internal_set_entityid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.HowEntityByEntityIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t entityid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class HowEntityByEntityIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.HowEntityByEntityIDResponse) */ {
 public:
  inline HowEntityByEntityIDResponse() : HowEntityByEntityIDResponse(nullptr) {}
  ~HowEntityByEntityIDResponse() override;
  explicit PROTOBUF_CONSTEXPR HowEntityByEntityIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HowEntityByEntityIDResponse(const HowEntityByEntityIDResponse& from);
  HowEntityByEntityIDResponse(HowEntityByEntityIDResponse&& from) noexcept
    : HowEntityByEntityIDResponse() {
    *this = ::std::move(from);
  }

  inline HowEntityByEntityIDResponse& operator=(const HowEntityByEntityIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HowEntityByEntityIDResponse& operator=(HowEntityByEntityIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HowEntityByEntityIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HowEntityByEntityIDResponse* internal_default_instance() {
    return reinterpret_cast<const HowEntityByEntityIDResponse*>(
               &_HowEntityByEntityIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(HowEntityByEntityIDResponse& a, HowEntityByEntityIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HowEntityByEntityIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HowEntityByEntityIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HowEntityByEntityIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HowEntityByEntityIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HowEntityByEntityIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HowEntityByEntityIDResponse& from) {
    HowEntityByEntityIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HowEntityByEntityIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.HowEntityByEntityIDResponse";
  }
  protected:
  explicit HowEntityByEntityIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.HowEntityByEntityIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class HowEntityByEntityID_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.HowEntityByEntityID_V2Request) */ {
 public:
  inline HowEntityByEntityID_V2Request() : HowEntityByEntityID_V2Request(nullptr) {}
  ~HowEntityByEntityID_V2Request() override;
  explicit PROTOBUF_CONSTEXPR HowEntityByEntityID_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HowEntityByEntityID_V2Request(const HowEntityByEntityID_V2Request& from);
  HowEntityByEntityID_V2Request(HowEntityByEntityID_V2Request&& from) noexcept
    : HowEntityByEntityID_V2Request() {
    *this = ::std::move(from);
  }

  inline HowEntityByEntityID_V2Request& operator=(const HowEntityByEntityID_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline HowEntityByEntityID_V2Request& operator=(HowEntityByEntityID_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HowEntityByEntityID_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const HowEntityByEntityID_V2Request* internal_default_instance() {
    return reinterpret_cast<const HowEntityByEntityID_V2Request*>(
               &_HowEntityByEntityID_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(HowEntityByEntityID_V2Request& a, HowEntityByEntityID_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(HowEntityByEntityID_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HowEntityByEntityID_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HowEntityByEntityID_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HowEntityByEntityID_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HowEntityByEntityID_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HowEntityByEntityID_V2Request& from) {
    HowEntityByEntityID_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HowEntityByEntityID_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.HowEntityByEntityID_V2Request";
  }
  protected:
  explicit HowEntityByEntityID_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIDFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // int64 entityID = 1;
  void clear_entityid();
  int64_t entityid() const;
  void set_entityid(int64_t value);
  private:
  int64_t _internal_entityid() const;
  void _internal_set_entityid(int64_t value);
  public:

  // int64 flags = 2;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.HowEntityByEntityID_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t entityid_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class HowEntityByEntityID_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.HowEntityByEntityID_V2Response) */ {
 public:
  inline HowEntityByEntityID_V2Response() : HowEntityByEntityID_V2Response(nullptr) {}
  ~HowEntityByEntityID_V2Response() override;
  explicit PROTOBUF_CONSTEXPR HowEntityByEntityID_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HowEntityByEntityID_V2Response(const HowEntityByEntityID_V2Response& from);
  HowEntityByEntityID_V2Response(HowEntityByEntityID_V2Response&& from) noexcept
    : HowEntityByEntityID_V2Response() {
    *this = ::std::move(from);
  }

  inline HowEntityByEntityID_V2Response& operator=(const HowEntityByEntityID_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline HowEntityByEntityID_V2Response& operator=(HowEntityByEntityID_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HowEntityByEntityID_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const HowEntityByEntityID_V2Response* internal_default_instance() {
    return reinterpret_cast<const HowEntityByEntityID_V2Response*>(
               &_HowEntityByEntityID_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(HowEntityByEntityID_V2Response& a, HowEntityByEntityID_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(HowEntityByEntityID_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HowEntityByEntityID_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HowEntityByEntityID_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HowEntityByEntityID_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HowEntityByEntityID_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HowEntityByEntityID_V2Response& from) {
    HowEntityByEntityID_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HowEntityByEntityID_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.HowEntityByEntityID_V2Response";
  }
  protected:
  explicit HowEntityByEntityID_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.HowEntityByEntityID_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class InitRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.InitRequest) */ {
 public:
  inline InitRequest() : InitRequest(nullptr) {}
  ~InitRequest() override;
  explicit PROTOBUF_CONSTEXPR InitRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitRequest(const InitRequest& from);
  InitRequest(InitRequest&& from) noexcept
    : InitRequest() {
    *this = ::std::move(from);
  }

  inline InitRequest& operator=(const InitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitRequest& operator=(InitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitRequest* internal_default_instance() {
    return reinterpret_cast<const InitRequest*>(
               &_InitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(InitRequest& a, InitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InitRequest& from) {
    InitRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.InitRequest";
  }
  protected:
  explicit InitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleNameFieldNumber = 1,
    kIniParamsFieldNumber = 2,
    kVerboseLoggingFieldNumber = 3,
  };
  // string moduleName = 1;
  void clear_modulename();
  const std::string& modulename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modulename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modulename();
  PROTOBUF_NODISCARD std::string* release_modulename();
  void set_allocated_modulename(std::string* modulename);
  private:
  const std::string& _internal_modulename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modulename(const std::string& value);
  std::string* _internal_mutable_modulename();
  public:

  // string iniParams = 2;
  void clear_iniparams();
  const std::string& iniparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_iniparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_iniparams();
  PROTOBUF_NODISCARD std::string* release_iniparams();
  void set_allocated_iniparams(std::string* iniparams);
  private:
  const std::string& _internal_iniparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iniparams(const std::string& value);
  std::string* _internal_mutable_iniparams();
  public:

  // int32 verboseLogging = 3;
  void clear_verboselogging();
  int32_t verboselogging() const;
  void set_verboselogging(int32_t value);
  private:
  int32_t _internal_verboselogging() const;
  void _internal_set_verboselogging(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.InitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modulename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iniparams_;
    int32_t verboselogging_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class InitResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.InitResponse) */ {
 public:
  inline InitResponse() : InitResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InitResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitResponse(const InitResponse& from);
  InitResponse(InitResponse&& from) noexcept
    : InitResponse() {
    *this = ::std::move(from);
  }

  inline InitResponse& operator=(const InitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitResponse& operator=(InitResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitResponse* internal_default_instance() {
    return reinterpret_cast<const InitResponse*>(
               &_InitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(InitResponse& a, InitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InitResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InitResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InitResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.InitResponse";
  }
  protected:
  explicit InitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.InitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class InitWithConfigIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.InitWithConfigIDRequest) */ {
 public:
  inline InitWithConfigIDRequest() : InitWithConfigIDRequest(nullptr) {}
  ~InitWithConfigIDRequest() override;
  explicit PROTOBUF_CONSTEXPR InitWithConfigIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitWithConfigIDRequest(const InitWithConfigIDRequest& from);
  InitWithConfigIDRequest(InitWithConfigIDRequest&& from) noexcept
    : InitWithConfigIDRequest() {
    *this = ::std::move(from);
  }

  inline InitWithConfigIDRequest& operator=(const InitWithConfigIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitWithConfigIDRequest& operator=(InitWithConfigIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitWithConfigIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitWithConfigIDRequest* internal_default_instance() {
    return reinterpret_cast<const InitWithConfigIDRequest*>(
               &_InitWithConfigIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(InitWithConfigIDRequest& a, InitWithConfigIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitWithConfigIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitWithConfigIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitWithConfigIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitWithConfigIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitWithConfigIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InitWithConfigIDRequest& from) {
    InitWithConfigIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitWithConfigIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.InitWithConfigIDRequest";
  }
  protected:
  explicit InitWithConfigIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleNameFieldNumber = 1,
    kIniParamsFieldNumber = 2,
    kInitConfigIDFieldNumber = 3,
    kVerboseLoggingFieldNumber = 4,
  };
  // string moduleName = 1;
  void clear_modulename();
  const std::string& modulename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modulename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modulename();
  PROTOBUF_NODISCARD std::string* release_modulename();
  void set_allocated_modulename(std::string* modulename);
  private:
  const std::string& _internal_modulename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modulename(const std::string& value);
  std::string* _internal_mutable_modulename();
  public:

  // string iniParams = 2;
  void clear_iniparams();
  const std::string& iniparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_iniparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_iniparams();
  PROTOBUF_NODISCARD std::string* release_iniparams();
  void set_allocated_iniparams(std::string* iniparams);
  private:
  const std::string& _internal_iniparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iniparams(const std::string& value);
  std::string* _internal_mutable_iniparams();
  public:

  // int64 initConfigID = 3;
  void clear_initconfigid();
  int64_t initconfigid() const;
  void set_initconfigid(int64_t value);
  private:
  int64_t _internal_initconfigid() const;
  void _internal_set_initconfigid(int64_t value);
  public:

  // int32 verboseLogging = 4;
  void clear_verboselogging();
  int32_t verboselogging() const;
  void set_verboselogging(int32_t value);
  private:
  int32_t _internal_verboselogging() const;
  void _internal_set_verboselogging(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.InitWithConfigIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modulename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iniparams_;
    int64_t initconfigid_;
    int32_t verboselogging_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class InitWithConfigIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.InitWithConfigIDResponse) */ {
 public:
  inline InitWithConfigIDResponse() : InitWithConfigIDResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR InitWithConfigIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitWithConfigIDResponse(const InitWithConfigIDResponse& from);
  InitWithConfigIDResponse(InitWithConfigIDResponse&& from) noexcept
    : InitWithConfigIDResponse() {
    *this = ::std::move(from);
  }

  inline InitWithConfigIDResponse& operator=(const InitWithConfigIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitWithConfigIDResponse& operator=(InitWithConfigIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitWithConfigIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitWithConfigIDResponse* internal_default_instance() {
    return reinterpret_cast<const InitWithConfigIDResponse*>(
               &_InitWithConfigIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(InitWithConfigIDResponse& a, InitWithConfigIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InitWithConfigIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitWithConfigIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitWithConfigIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitWithConfigIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InitWithConfigIDResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InitWithConfigIDResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.InitWithConfigIDResponse";
  }
  protected:
  explicit InitWithConfigIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.InitWithConfigIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class PrimeEngineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.PrimeEngineRequest) */ {
 public:
  inline PrimeEngineRequest() : PrimeEngineRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PrimeEngineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrimeEngineRequest(const PrimeEngineRequest& from);
  PrimeEngineRequest(PrimeEngineRequest&& from) noexcept
    : PrimeEngineRequest() {
    *this = ::std::move(from);
  }

  inline PrimeEngineRequest& operator=(const PrimeEngineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimeEngineRequest& operator=(PrimeEngineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrimeEngineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrimeEngineRequest* internal_default_instance() {
    return reinterpret_cast<const PrimeEngineRequest*>(
               &_PrimeEngineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(PrimeEngineRequest& a, PrimeEngineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrimeEngineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrimeEngineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrimeEngineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrimeEngineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PrimeEngineRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PrimeEngineRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.PrimeEngineRequest";
  }
  protected:
  explicit PrimeEngineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.PrimeEngineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class PrimeEngineResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.PrimeEngineResponse) */ {
 public:
  inline PrimeEngineResponse() : PrimeEngineResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PrimeEngineResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrimeEngineResponse(const PrimeEngineResponse& from);
  PrimeEngineResponse(PrimeEngineResponse&& from) noexcept
    : PrimeEngineResponse() {
    *this = ::std::move(from);
  }

  inline PrimeEngineResponse& operator=(const PrimeEngineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimeEngineResponse& operator=(PrimeEngineResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrimeEngineResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrimeEngineResponse* internal_default_instance() {
    return reinterpret_cast<const PrimeEngineResponse*>(
               &_PrimeEngineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(PrimeEngineResponse& a, PrimeEngineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrimeEngineResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrimeEngineResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrimeEngineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrimeEngineResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PrimeEngineResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PrimeEngineResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.PrimeEngineResponse";
  }
  protected:
  explicit PrimeEngineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.PrimeEngineResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ProcessRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ProcessRequest) */ {
 public:
  inline ProcessRequest() : ProcessRequest(nullptr) {}
  ~ProcessRequest() override;
  explicit PROTOBUF_CONSTEXPR ProcessRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessRequest(const ProcessRequest& from);
  ProcessRequest(ProcessRequest&& from) noexcept
    : ProcessRequest() {
    *this = ::std::move(from);
  }

  inline ProcessRequest& operator=(const ProcessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRequest& operator=(ProcessRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessRequest*>(
               &_ProcessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(ProcessRequest& a, ProcessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessRequest& from) {
    ProcessRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ProcessRequest";
  }
  protected:
  explicit ProcessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 1,
  };
  // string record = 1;
  void clear_record();
  const std::string& record() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record();
  PROTOBUF_NODISCARD std::string* release_record();
  void set_allocated_record(std::string* record);
  private:
  const std::string& _internal_record() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record(const std::string& value);
  std::string* _internal_mutable_record();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ProcessRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ProcessResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.ProcessResponse) */ {
 public:
  inline ProcessResponse() : ProcessResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ProcessResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessResponse(const ProcessResponse& from);
  ProcessResponse(ProcessResponse&& from) noexcept
    : ProcessResponse() {
    *this = ::std::move(from);
  }

  inline ProcessResponse& operator=(const ProcessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessResponse& operator=(ProcessResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessResponse* internal_default_instance() {
    return reinterpret_cast<const ProcessResponse*>(
               &_ProcessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(ProcessResponse& a, ProcessResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ProcessResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ProcessResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ProcessResponse";
  }
  protected:
  explicit ProcessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.ProcessResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ProcessRedoRecordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.ProcessRedoRecordRequest) */ {
 public:
  inline ProcessRedoRecordRequest() : ProcessRedoRecordRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ProcessRedoRecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessRedoRecordRequest(const ProcessRedoRecordRequest& from);
  ProcessRedoRecordRequest(ProcessRedoRecordRequest&& from) noexcept
    : ProcessRedoRecordRequest() {
    *this = ::std::move(from);
  }

  inline ProcessRedoRecordRequest& operator=(const ProcessRedoRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRedoRecordRequest& operator=(ProcessRedoRecordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessRedoRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessRedoRecordRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessRedoRecordRequest*>(
               &_ProcessRedoRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(ProcessRedoRecordRequest& a, ProcessRedoRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRedoRecordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessRedoRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessRedoRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessRedoRecordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ProcessRedoRecordRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ProcessRedoRecordRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ProcessRedoRecordRequest";
  }
  protected:
  explicit ProcessRedoRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.ProcessRedoRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ProcessRedoRecordResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ProcessRedoRecordResponse) */ {
 public:
  inline ProcessRedoRecordResponse() : ProcessRedoRecordResponse(nullptr) {}
  ~ProcessRedoRecordResponse() override;
  explicit PROTOBUF_CONSTEXPR ProcessRedoRecordResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessRedoRecordResponse(const ProcessRedoRecordResponse& from);
  ProcessRedoRecordResponse(ProcessRedoRecordResponse&& from) noexcept
    : ProcessRedoRecordResponse() {
    *this = ::std::move(from);
  }

  inline ProcessRedoRecordResponse& operator=(const ProcessRedoRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRedoRecordResponse& operator=(ProcessRedoRecordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessRedoRecordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessRedoRecordResponse* internal_default_instance() {
    return reinterpret_cast<const ProcessRedoRecordResponse*>(
               &_ProcessRedoRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(ProcessRedoRecordResponse& a, ProcessRedoRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRedoRecordResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessRedoRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessRedoRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessRedoRecordResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessRedoRecordResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessRedoRecordResponse& from) {
    ProcessRedoRecordResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessRedoRecordResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ProcessRedoRecordResponse";
  }
  protected:
  explicit ProcessRedoRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ProcessRedoRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ProcessRedoRecordWithInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ProcessRedoRecordWithInfoRequest) */ {
 public:
  inline ProcessRedoRecordWithInfoRequest() : ProcessRedoRecordWithInfoRequest(nullptr) {}
  ~ProcessRedoRecordWithInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR ProcessRedoRecordWithInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessRedoRecordWithInfoRequest(const ProcessRedoRecordWithInfoRequest& from);
  ProcessRedoRecordWithInfoRequest(ProcessRedoRecordWithInfoRequest&& from) noexcept
    : ProcessRedoRecordWithInfoRequest() {
    *this = ::std::move(from);
  }

  inline ProcessRedoRecordWithInfoRequest& operator=(const ProcessRedoRecordWithInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRedoRecordWithInfoRequest& operator=(ProcessRedoRecordWithInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessRedoRecordWithInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessRedoRecordWithInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessRedoRecordWithInfoRequest*>(
               &_ProcessRedoRecordWithInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(ProcessRedoRecordWithInfoRequest& a, ProcessRedoRecordWithInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRedoRecordWithInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessRedoRecordWithInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessRedoRecordWithInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessRedoRecordWithInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessRedoRecordWithInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessRedoRecordWithInfoRequest& from) {
    ProcessRedoRecordWithInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessRedoRecordWithInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ProcessRedoRecordWithInfoRequest";
  }
  protected:
  explicit ProcessRedoRecordWithInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
  };
  // int64 flags = 1;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ProcessRedoRecordWithInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ProcessRedoRecordWithInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ProcessRedoRecordWithInfoResponse) */ {
 public:
  inline ProcessRedoRecordWithInfoResponse() : ProcessRedoRecordWithInfoResponse(nullptr) {}
  ~ProcessRedoRecordWithInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR ProcessRedoRecordWithInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessRedoRecordWithInfoResponse(const ProcessRedoRecordWithInfoResponse& from);
  ProcessRedoRecordWithInfoResponse(ProcessRedoRecordWithInfoResponse&& from) noexcept
    : ProcessRedoRecordWithInfoResponse() {
    *this = ::std::move(from);
  }

  inline ProcessRedoRecordWithInfoResponse& operator=(const ProcessRedoRecordWithInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRedoRecordWithInfoResponse& operator=(ProcessRedoRecordWithInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessRedoRecordWithInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessRedoRecordWithInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ProcessRedoRecordWithInfoResponse*>(
               &_ProcessRedoRecordWithInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(ProcessRedoRecordWithInfoResponse& a, ProcessRedoRecordWithInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRedoRecordWithInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessRedoRecordWithInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessRedoRecordWithInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessRedoRecordWithInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessRedoRecordWithInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessRedoRecordWithInfoResponse& from) {
    ProcessRedoRecordWithInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessRedoRecordWithInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ProcessRedoRecordWithInfoResponse";
  }
  protected:
  explicit ProcessRedoRecordWithInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kWithInfoFieldNumber = 2,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // string withInfo = 2;
  void clear_withinfo();
  const std::string& withinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_withinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_withinfo();
  PROTOBUF_NODISCARD std::string* release_withinfo();
  void set_allocated_withinfo(std::string* withinfo);
  private:
  const std::string& _internal_withinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_withinfo(const std::string& value);
  std::string* _internal_mutable_withinfo();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ProcessRedoRecordWithInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr withinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ProcessWithInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ProcessWithInfoRequest) */ {
 public:
  inline ProcessWithInfoRequest() : ProcessWithInfoRequest(nullptr) {}
  ~ProcessWithInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR ProcessWithInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessWithInfoRequest(const ProcessWithInfoRequest& from);
  ProcessWithInfoRequest(ProcessWithInfoRequest&& from) noexcept
    : ProcessWithInfoRequest() {
    *this = ::std::move(from);
  }

  inline ProcessWithInfoRequest& operator=(const ProcessWithInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessWithInfoRequest& operator=(ProcessWithInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessWithInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessWithInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessWithInfoRequest*>(
               &_ProcessWithInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(ProcessWithInfoRequest& a, ProcessWithInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessWithInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessWithInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessWithInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessWithInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessWithInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessWithInfoRequest& from) {
    ProcessWithInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessWithInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ProcessWithInfoRequest";
  }
  protected:
  explicit ProcessWithInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // string record = 1;
  void clear_record();
  const std::string& record() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record();
  PROTOBUF_NODISCARD std::string* release_record();
  void set_allocated_record(std::string* record);
  private:
  const std::string& _internal_record() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record(const std::string& value);
  std::string* _internal_mutable_record();
  public:

  // int64 flags = 2;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ProcessWithInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ProcessWithInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ProcessWithInfoResponse) */ {
 public:
  inline ProcessWithInfoResponse() : ProcessWithInfoResponse(nullptr) {}
  ~ProcessWithInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR ProcessWithInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessWithInfoResponse(const ProcessWithInfoResponse& from);
  ProcessWithInfoResponse(ProcessWithInfoResponse&& from) noexcept
    : ProcessWithInfoResponse() {
    *this = ::std::move(from);
  }

  inline ProcessWithInfoResponse& operator=(const ProcessWithInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessWithInfoResponse& operator=(ProcessWithInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessWithInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessWithInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ProcessWithInfoResponse*>(
               &_ProcessWithInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(ProcessWithInfoResponse& a, ProcessWithInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessWithInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessWithInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessWithInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessWithInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessWithInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessWithInfoResponse& from) {
    ProcessWithInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessWithInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ProcessWithInfoResponse";
  }
  protected:
  explicit ProcessWithInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ProcessWithInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ProcessWithResponseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ProcessWithResponseRequest) */ {
 public:
  inline ProcessWithResponseRequest() : ProcessWithResponseRequest(nullptr) {}
  ~ProcessWithResponseRequest() override;
  explicit PROTOBUF_CONSTEXPR ProcessWithResponseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessWithResponseRequest(const ProcessWithResponseRequest& from);
  ProcessWithResponseRequest(ProcessWithResponseRequest&& from) noexcept
    : ProcessWithResponseRequest() {
    *this = ::std::move(from);
  }

  inline ProcessWithResponseRequest& operator=(const ProcessWithResponseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessWithResponseRequest& operator=(ProcessWithResponseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessWithResponseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessWithResponseRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessWithResponseRequest*>(
               &_ProcessWithResponseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(ProcessWithResponseRequest& a, ProcessWithResponseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessWithResponseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessWithResponseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessWithResponseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessWithResponseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessWithResponseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessWithResponseRequest& from) {
    ProcessWithResponseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessWithResponseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ProcessWithResponseRequest";
  }
  protected:
  explicit ProcessWithResponseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 1,
  };
  // string record = 1;
  void clear_record();
  const std::string& record() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record();
  PROTOBUF_NODISCARD std::string* release_record();
  void set_allocated_record(std::string* record);
  private:
  const std::string& _internal_record() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record(const std::string& value);
  std::string* _internal_mutable_record();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ProcessWithResponseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ProcessWithResponseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ProcessWithResponseResponse) */ {
 public:
  inline ProcessWithResponseResponse() : ProcessWithResponseResponse(nullptr) {}
  ~ProcessWithResponseResponse() override;
  explicit PROTOBUF_CONSTEXPR ProcessWithResponseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessWithResponseResponse(const ProcessWithResponseResponse& from);
  ProcessWithResponseResponse(ProcessWithResponseResponse&& from) noexcept
    : ProcessWithResponseResponse() {
    *this = ::std::move(from);
  }

  inline ProcessWithResponseResponse& operator=(const ProcessWithResponseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessWithResponseResponse& operator=(ProcessWithResponseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessWithResponseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessWithResponseResponse* internal_default_instance() {
    return reinterpret_cast<const ProcessWithResponseResponse*>(
               &_ProcessWithResponseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(ProcessWithResponseResponse& a, ProcessWithResponseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessWithResponseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessWithResponseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessWithResponseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessWithResponseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessWithResponseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessWithResponseResponse& from) {
    ProcessWithResponseResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessWithResponseResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ProcessWithResponseResponse";
  }
  protected:
  explicit ProcessWithResponseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ProcessWithResponseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ProcessWithResponseResizeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ProcessWithResponseResizeRequest) */ {
 public:
  inline ProcessWithResponseResizeRequest() : ProcessWithResponseResizeRequest(nullptr) {}
  ~ProcessWithResponseResizeRequest() override;
  explicit PROTOBUF_CONSTEXPR ProcessWithResponseResizeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessWithResponseResizeRequest(const ProcessWithResponseResizeRequest& from);
  ProcessWithResponseResizeRequest(ProcessWithResponseResizeRequest&& from) noexcept
    : ProcessWithResponseResizeRequest() {
    *this = ::std::move(from);
  }

  inline ProcessWithResponseResizeRequest& operator=(const ProcessWithResponseResizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessWithResponseResizeRequest& operator=(ProcessWithResponseResizeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessWithResponseResizeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessWithResponseResizeRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessWithResponseResizeRequest*>(
               &_ProcessWithResponseResizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(ProcessWithResponseResizeRequest& a, ProcessWithResponseResizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessWithResponseResizeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessWithResponseResizeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessWithResponseResizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessWithResponseResizeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessWithResponseResizeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessWithResponseResizeRequest& from) {
    ProcessWithResponseResizeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessWithResponseResizeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ProcessWithResponseResizeRequest";
  }
  protected:
  explicit ProcessWithResponseResizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 1,
  };
  // string record = 1;
  void clear_record();
  const std::string& record() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record();
  PROTOBUF_NODISCARD std::string* release_record();
  void set_allocated_record(std::string* record);
  private:
  const std::string& _internal_record() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record(const std::string& value);
  std::string* _internal_mutable_record();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ProcessWithResponseResizeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ProcessWithResponseResizeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ProcessWithResponseResizeResponse) */ {
 public:
  inline ProcessWithResponseResizeResponse() : ProcessWithResponseResizeResponse(nullptr) {}
  ~ProcessWithResponseResizeResponse() override;
  explicit PROTOBUF_CONSTEXPR ProcessWithResponseResizeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessWithResponseResizeResponse(const ProcessWithResponseResizeResponse& from);
  ProcessWithResponseResizeResponse(ProcessWithResponseResizeResponse&& from) noexcept
    : ProcessWithResponseResizeResponse() {
    *this = ::std::move(from);
  }

  inline ProcessWithResponseResizeResponse& operator=(const ProcessWithResponseResizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessWithResponseResizeResponse& operator=(ProcessWithResponseResizeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessWithResponseResizeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessWithResponseResizeResponse* internal_default_instance() {
    return reinterpret_cast<const ProcessWithResponseResizeResponse*>(
               &_ProcessWithResponseResizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(ProcessWithResponseResizeResponse& a, ProcessWithResponseResizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessWithResponseResizeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessWithResponseResizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessWithResponseResizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessWithResponseResizeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessWithResponseResizeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessWithResponseResizeResponse& from) {
    ProcessWithResponseResizeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessWithResponseResizeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ProcessWithResponseResizeResponse";
  }
  protected:
  explicit ProcessWithResponseResizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ProcessWithResponseResizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class PurgeRepositoryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.PurgeRepositoryRequest) */ {
 public:
  inline PurgeRepositoryRequest() : PurgeRepositoryRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PurgeRepositoryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PurgeRepositoryRequest(const PurgeRepositoryRequest& from);
  PurgeRepositoryRequest(PurgeRepositoryRequest&& from) noexcept
    : PurgeRepositoryRequest() {
    *this = ::std::move(from);
  }

  inline PurgeRepositoryRequest& operator=(const PurgeRepositoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PurgeRepositoryRequest& operator=(PurgeRepositoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PurgeRepositoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PurgeRepositoryRequest* internal_default_instance() {
    return reinterpret_cast<const PurgeRepositoryRequest*>(
               &_PurgeRepositoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(PurgeRepositoryRequest& a, PurgeRepositoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PurgeRepositoryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PurgeRepositoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PurgeRepositoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PurgeRepositoryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PurgeRepositoryRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PurgeRepositoryRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.PurgeRepositoryRequest";
  }
  protected:
  explicit PurgeRepositoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.PurgeRepositoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class PurgeRepositoryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.PurgeRepositoryResponse) */ {
 public:
  inline PurgeRepositoryResponse() : PurgeRepositoryResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PurgeRepositoryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PurgeRepositoryResponse(const PurgeRepositoryResponse& from);
  PurgeRepositoryResponse(PurgeRepositoryResponse&& from) noexcept
    : PurgeRepositoryResponse() {
    *this = ::std::move(from);
  }

  inline PurgeRepositoryResponse& operator=(const PurgeRepositoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PurgeRepositoryResponse& operator=(PurgeRepositoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PurgeRepositoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PurgeRepositoryResponse* internal_default_instance() {
    return reinterpret_cast<const PurgeRepositoryResponse*>(
               &_PurgeRepositoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(PurgeRepositoryResponse& a, PurgeRepositoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PurgeRepositoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PurgeRepositoryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PurgeRepositoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PurgeRepositoryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PurgeRepositoryResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PurgeRepositoryResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.PurgeRepositoryResponse";
  }
  protected:
  explicit PurgeRepositoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.PurgeRepositoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ReevaluateEntityRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ReevaluateEntityRequest) */ {
 public:
  inline ReevaluateEntityRequest() : ReevaluateEntityRequest(nullptr) {}
  ~ReevaluateEntityRequest() override;
  explicit PROTOBUF_CONSTEXPR ReevaluateEntityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReevaluateEntityRequest(const ReevaluateEntityRequest& from);
  ReevaluateEntityRequest(ReevaluateEntityRequest&& from) noexcept
    : ReevaluateEntityRequest() {
    *this = ::std::move(from);
  }

  inline ReevaluateEntityRequest& operator=(const ReevaluateEntityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReevaluateEntityRequest& operator=(ReevaluateEntityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReevaluateEntityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReevaluateEntityRequest* internal_default_instance() {
    return reinterpret_cast<const ReevaluateEntityRequest*>(
               &_ReevaluateEntityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(ReevaluateEntityRequest& a, ReevaluateEntityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReevaluateEntityRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReevaluateEntityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReevaluateEntityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReevaluateEntityRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReevaluateEntityRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReevaluateEntityRequest& from) {
    ReevaluateEntityRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReevaluateEntityRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ReevaluateEntityRequest";
  }
  protected:
  explicit ReevaluateEntityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIDFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // int64 entityID = 1;
  void clear_entityid();
  int64_t entityid() const;
  void set_entityid(int64_t value);
  private:
  int64_t _internal_entityid() const;
  void _internal_set_entityid(int64_t value);
  public:

  // int64 flags = 2;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ReevaluateEntityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t entityid_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ReevaluateEntityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.ReevaluateEntityResponse) */ {
 public:
  inline ReevaluateEntityResponse() : ReevaluateEntityResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReevaluateEntityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReevaluateEntityResponse(const ReevaluateEntityResponse& from);
  ReevaluateEntityResponse(ReevaluateEntityResponse&& from) noexcept
    : ReevaluateEntityResponse() {
    *this = ::std::move(from);
  }

  inline ReevaluateEntityResponse& operator=(const ReevaluateEntityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReevaluateEntityResponse& operator=(ReevaluateEntityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReevaluateEntityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReevaluateEntityResponse* internal_default_instance() {
    return reinterpret_cast<const ReevaluateEntityResponse*>(
               &_ReevaluateEntityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(ReevaluateEntityResponse& a, ReevaluateEntityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReevaluateEntityResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReevaluateEntityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReevaluateEntityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReevaluateEntityResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReevaluateEntityResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReevaluateEntityResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ReevaluateEntityResponse";
  }
  protected:
  explicit ReevaluateEntityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.ReevaluateEntityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ReevaluateEntityWithInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ReevaluateEntityWithInfoRequest) */ {
 public:
  inline ReevaluateEntityWithInfoRequest() : ReevaluateEntityWithInfoRequest(nullptr) {}
  ~ReevaluateEntityWithInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR ReevaluateEntityWithInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReevaluateEntityWithInfoRequest(const ReevaluateEntityWithInfoRequest& from);
  ReevaluateEntityWithInfoRequest(ReevaluateEntityWithInfoRequest&& from) noexcept
    : ReevaluateEntityWithInfoRequest() {
    *this = ::std::move(from);
  }

  inline ReevaluateEntityWithInfoRequest& operator=(const ReevaluateEntityWithInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReevaluateEntityWithInfoRequest& operator=(ReevaluateEntityWithInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReevaluateEntityWithInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReevaluateEntityWithInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ReevaluateEntityWithInfoRequest*>(
               &_ReevaluateEntityWithInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(ReevaluateEntityWithInfoRequest& a, ReevaluateEntityWithInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReevaluateEntityWithInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReevaluateEntityWithInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReevaluateEntityWithInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReevaluateEntityWithInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReevaluateEntityWithInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReevaluateEntityWithInfoRequest& from) {
    ReevaluateEntityWithInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReevaluateEntityWithInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ReevaluateEntityWithInfoRequest";
  }
  protected:
  explicit ReevaluateEntityWithInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIDFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // int64 entityID = 1;
  void clear_entityid();
  int64_t entityid() const;
  void set_entityid(int64_t value);
  private:
  int64_t _internal_entityid() const;
  void _internal_set_entityid(int64_t value);
  public:

  // int64 flags = 2;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ReevaluateEntityWithInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t entityid_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ReevaluateEntityWithInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ReevaluateEntityWithInfoResponse) */ {
 public:
  inline ReevaluateEntityWithInfoResponse() : ReevaluateEntityWithInfoResponse(nullptr) {}
  ~ReevaluateEntityWithInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR ReevaluateEntityWithInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReevaluateEntityWithInfoResponse(const ReevaluateEntityWithInfoResponse& from);
  ReevaluateEntityWithInfoResponse(ReevaluateEntityWithInfoResponse&& from) noexcept
    : ReevaluateEntityWithInfoResponse() {
    *this = ::std::move(from);
  }

  inline ReevaluateEntityWithInfoResponse& operator=(const ReevaluateEntityWithInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReevaluateEntityWithInfoResponse& operator=(ReevaluateEntityWithInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReevaluateEntityWithInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReevaluateEntityWithInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ReevaluateEntityWithInfoResponse*>(
               &_ReevaluateEntityWithInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(ReevaluateEntityWithInfoResponse& a, ReevaluateEntityWithInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReevaluateEntityWithInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReevaluateEntityWithInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReevaluateEntityWithInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReevaluateEntityWithInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReevaluateEntityWithInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReevaluateEntityWithInfoResponse& from) {
    ReevaluateEntityWithInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReevaluateEntityWithInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ReevaluateEntityWithInfoResponse";
  }
  protected:
  explicit ReevaluateEntityWithInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ReevaluateEntityWithInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ReevaluateRecordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ReevaluateRecordRequest) */ {
 public:
  inline ReevaluateRecordRequest() : ReevaluateRecordRequest(nullptr) {}
  ~ReevaluateRecordRequest() override;
  explicit PROTOBUF_CONSTEXPR ReevaluateRecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReevaluateRecordRequest(const ReevaluateRecordRequest& from);
  ReevaluateRecordRequest(ReevaluateRecordRequest&& from) noexcept
    : ReevaluateRecordRequest() {
    *this = ::std::move(from);
  }

  inline ReevaluateRecordRequest& operator=(const ReevaluateRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReevaluateRecordRequest& operator=(ReevaluateRecordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReevaluateRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReevaluateRecordRequest* internal_default_instance() {
    return reinterpret_cast<const ReevaluateRecordRequest*>(
               &_ReevaluateRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(ReevaluateRecordRequest& a, ReevaluateRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReevaluateRecordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReevaluateRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReevaluateRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReevaluateRecordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReevaluateRecordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReevaluateRecordRequest& from) {
    ReevaluateRecordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReevaluateRecordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ReevaluateRecordRequest";
  }
  protected:
  explicit ReevaluateRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIDFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode();
  PROTOBUF_NODISCARD std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordID = 2;
  void clear_recordid();
  const std::string& recordid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid();
  PROTOBUF_NODISCARD std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // int64 flags = 3;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ReevaluateRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ReevaluateRecordResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.ReevaluateRecordResponse) */ {
 public:
  inline ReevaluateRecordResponse() : ReevaluateRecordResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReevaluateRecordResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReevaluateRecordResponse(const ReevaluateRecordResponse& from);
  ReevaluateRecordResponse(ReevaluateRecordResponse&& from) noexcept
    : ReevaluateRecordResponse() {
    *this = ::std::move(from);
  }

  inline ReevaluateRecordResponse& operator=(const ReevaluateRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReevaluateRecordResponse& operator=(ReevaluateRecordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReevaluateRecordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReevaluateRecordResponse* internal_default_instance() {
    return reinterpret_cast<const ReevaluateRecordResponse*>(
               &_ReevaluateRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(ReevaluateRecordResponse& a, ReevaluateRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReevaluateRecordResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReevaluateRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReevaluateRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReevaluateRecordResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReevaluateRecordResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReevaluateRecordResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ReevaluateRecordResponse";
  }
  protected:
  explicit ReevaluateRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.ReevaluateRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ReevaluateRecordWithInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ReevaluateRecordWithInfoRequest) */ {
 public:
  inline ReevaluateRecordWithInfoRequest() : ReevaluateRecordWithInfoRequest(nullptr) {}
  ~ReevaluateRecordWithInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR ReevaluateRecordWithInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReevaluateRecordWithInfoRequest(const ReevaluateRecordWithInfoRequest& from);
  ReevaluateRecordWithInfoRequest(ReevaluateRecordWithInfoRequest&& from) noexcept
    : ReevaluateRecordWithInfoRequest() {
    *this = ::std::move(from);
  }

  inline ReevaluateRecordWithInfoRequest& operator=(const ReevaluateRecordWithInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReevaluateRecordWithInfoRequest& operator=(ReevaluateRecordWithInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReevaluateRecordWithInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReevaluateRecordWithInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ReevaluateRecordWithInfoRequest*>(
               &_ReevaluateRecordWithInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(ReevaluateRecordWithInfoRequest& a, ReevaluateRecordWithInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReevaluateRecordWithInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReevaluateRecordWithInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReevaluateRecordWithInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReevaluateRecordWithInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReevaluateRecordWithInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReevaluateRecordWithInfoRequest& from) {
    ReevaluateRecordWithInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReevaluateRecordWithInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ReevaluateRecordWithInfoRequest";
  }
  protected:
  explicit ReevaluateRecordWithInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIDFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode();
  PROTOBUF_NODISCARD std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordID = 2;
  void clear_recordid();
  const std::string& recordid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid();
  PROTOBUF_NODISCARD std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // int64 flags = 3;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ReevaluateRecordWithInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ReevaluateRecordWithInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ReevaluateRecordWithInfoResponse) */ {
 public:
  inline ReevaluateRecordWithInfoResponse() : ReevaluateRecordWithInfoResponse(nullptr) {}
  ~ReevaluateRecordWithInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR ReevaluateRecordWithInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReevaluateRecordWithInfoResponse(const ReevaluateRecordWithInfoResponse& from);
  ReevaluateRecordWithInfoResponse(ReevaluateRecordWithInfoResponse&& from) noexcept
    : ReevaluateRecordWithInfoResponse() {
    *this = ::std::move(from);
  }

  inline ReevaluateRecordWithInfoResponse& operator=(const ReevaluateRecordWithInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReevaluateRecordWithInfoResponse& operator=(ReevaluateRecordWithInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReevaluateRecordWithInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReevaluateRecordWithInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ReevaluateRecordWithInfoResponse*>(
               &_ReevaluateRecordWithInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(ReevaluateRecordWithInfoResponse& a, ReevaluateRecordWithInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReevaluateRecordWithInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReevaluateRecordWithInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReevaluateRecordWithInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReevaluateRecordWithInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReevaluateRecordWithInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReevaluateRecordWithInfoResponse& from) {
    ReevaluateRecordWithInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReevaluateRecordWithInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ReevaluateRecordWithInfoResponse";
  }
  protected:
  explicit ReevaluateRecordWithInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ReevaluateRecordWithInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ReinitRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ReinitRequest) */ {
 public:
  inline ReinitRequest() : ReinitRequest(nullptr) {}
  ~ReinitRequest() override;
  explicit PROTOBUF_CONSTEXPR ReinitRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReinitRequest(const ReinitRequest& from);
  ReinitRequest(ReinitRequest&& from) noexcept
    : ReinitRequest() {
    *this = ::std::move(from);
  }

  inline ReinitRequest& operator=(const ReinitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReinitRequest& operator=(ReinitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReinitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReinitRequest* internal_default_instance() {
    return reinterpret_cast<const ReinitRequest*>(
               &_ReinitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(ReinitRequest& a, ReinitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReinitRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReinitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReinitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReinitRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReinitRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReinitRequest& from) {
    ReinitRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReinitRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ReinitRequest";
  }
  protected:
  explicit ReinitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitConfigIDFieldNumber = 1,
  };
  // int64 initConfigID = 1;
  void clear_initconfigid();
  int64_t initconfigid() const;
  void set_initconfigid(int64_t value);
  private:
  int64_t _internal_initconfigid() const;
  void _internal_set_initconfigid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ReinitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t initconfigid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ReinitResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.ReinitResponse) */ {
 public:
  inline ReinitResponse() : ReinitResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReinitResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReinitResponse(const ReinitResponse& from);
  ReinitResponse(ReinitResponse&& from) noexcept
    : ReinitResponse() {
    *this = ::std::move(from);
  }

  inline ReinitResponse& operator=(const ReinitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReinitResponse& operator=(ReinitResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReinitResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReinitResponse* internal_default_instance() {
    return reinterpret_cast<const ReinitResponse*>(
               &_ReinitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(ReinitResponse& a, ReinitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReinitResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReinitResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReinitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReinitResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReinitResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReinitResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ReinitResponse";
  }
  protected:
  explicit ReinitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.ReinitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ReplaceRecordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ReplaceRecordRequest) */ {
 public:
  inline ReplaceRecordRequest() : ReplaceRecordRequest(nullptr) {}
  ~ReplaceRecordRequest() override;
  explicit PROTOBUF_CONSTEXPR ReplaceRecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplaceRecordRequest(const ReplaceRecordRequest& from);
  ReplaceRecordRequest(ReplaceRecordRequest&& from) noexcept
    : ReplaceRecordRequest() {
    *this = ::std::move(from);
  }

  inline ReplaceRecordRequest& operator=(const ReplaceRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceRecordRequest& operator=(ReplaceRecordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplaceRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceRecordRequest* internal_default_instance() {
    return reinterpret_cast<const ReplaceRecordRequest*>(
               &_ReplaceRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(ReplaceRecordRequest& a, ReplaceRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceRecordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplaceRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplaceRecordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplaceRecordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplaceRecordRequest& from) {
    ReplaceRecordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceRecordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ReplaceRecordRequest";
  }
  protected:
  explicit ReplaceRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIDFieldNumber = 2,
    kJsonDataFieldNumber = 3,
    kLoadIDFieldNumber = 4,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode();
  PROTOBUF_NODISCARD std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordID = 2;
  void clear_recordid();
  const std::string& recordid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid();
  PROTOBUF_NODISCARD std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // string jsonData = 3;
  void clear_jsondata();
  const std::string& jsondata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jsondata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jsondata();
  PROTOBUF_NODISCARD std::string* release_jsondata();
  void set_allocated_jsondata(std::string* jsondata);
  private:
  const std::string& _internal_jsondata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jsondata(const std::string& value);
  std::string* _internal_mutable_jsondata();
  public:

  // string loadID = 4;
  void clear_loadid();
  const std::string& loadid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loadid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loadid();
  PROTOBUF_NODISCARD std::string* release_loadid();
  void set_allocated_loadid(std::string* loadid);
  private:
  const std::string& _internal_loadid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loadid(const std::string& value);
  std::string* _internal_mutable_loadid();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ReplaceRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jsondata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loadid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ReplaceRecordResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.ReplaceRecordResponse) */ {
 public:
  inline ReplaceRecordResponse() : ReplaceRecordResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReplaceRecordResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplaceRecordResponse(const ReplaceRecordResponse& from);
  ReplaceRecordResponse(ReplaceRecordResponse&& from) noexcept
    : ReplaceRecordResponse() {
    *this = ::std::move(from);
  }

  inline ReplaceRecordResponse& operator=(const ReplaceRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceRecordResponse& operator=(ReplaceRecordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplaceRecordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceRecordResponse* internal_default_instance() {
    return reinterpret_cast<const ReplaceRecordResponse*>(
               &_ReplaceRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(ReplaceRecordResponse& a, ReplaceRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceRecordResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplaceRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplaceRecordResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReplaceRecordResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReplaceRecordResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ReplaceRecordResponse";
  }
  protected:
  explicit ReplaceRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.ReplaceRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ReplaceRecordWithInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ReplaceRecordWithInfoRequest) */ {
 public:
  inline ReplaceRecordWithInfoRequest() : ReplaceRecordWithInfoRequest(nullptr) {}
  ~ReplaceRecordWithInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR ReplaceRecordWithInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplaceRecordWithInfoRequest(const ReplaceRecordWithInfoRequest& from);
  ReplaceRecordWithInfoRequest(ReplaceRecordWithInfoRequest&& from) noexcept
    : ReplaceRecordWithInfoRequest() {
    *this = ::std::move(from);
  }

  inline ReplaceRecordWithInfoRequest& operator=(const ReplaceRecordWithInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceRecordWithInfoRequest& operator=(ReplaceRecordWithInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplaceRecordWithInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceRecordWithInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ReplaceRecordWithInfoRequest*>(
               &_ReplaceRecordWithInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(ReplaceRecordWithInfoRequest& a, ReplaceRecordWithInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceRecordWithInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceRecordWithInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplaceRecordWithInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplaceRecordWithInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplaceRecordWithInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplaceRecordWithInfoRequest& from) {
    ReplaceRecordWithInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceRecordWithInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ReplaceRecordWithInfoRequest";
  }
  protected:
  explicit ReplaceRecordWithInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIDFieldNumber = 2,
    kJsonDataFieldNumber = 3,
    kLoadIDFieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode();
  PROTOBUF_NODISCARD std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordID = 2;
  void clear_recordid();
  const std::string& recordid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid();
  PROTOBUF_NODISCARD std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // string jsonData = 3;
  void clear_jsondata();
  const std::string& jsondata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jsondata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jsondata();
  PROTOBUF_NODISCARD std::string* release_jsondata();
  void set_allocated_jsondata(std::string* jsondata);
  private:
  const std::string& _internal_jsondata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jsondata(const std::string& value);
  std::string* _internal_mutable_jsondata();
  public:

  // string loadID = 4;
  void clear_loadid();
  const std::string& loadid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loadid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loadid();
  PROTOBUF_NODISCARD std::string* release_loadid();
  void set_allocated_loadid(std::string* loadid);
  private:
  const std::string& _internal_loadid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loadid(const std::string& value);
  std::string* _internal_mutable_loadid();
  public:

  // int64 flags = 5;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ReplaceRecordWithInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jsondata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loadid_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class ReplaceRecordWithInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.ReplaceRecordWithInfoResponse) */ {
 public:
  inline ReplaceRecordWithInfoResponse() : ReplaceRecordWithInfoResponse(nullptr) {}
  ~ReplaceRecordWithInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR ReplaceRecordWithInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplaceRecordWithInfoResponse(const ReplaceRecordWithInfoResponse& from);
  ReplaceRecordWithInfoResponse(ReplaceRecordWithInfoResponse&& from) noexcept
    : ReplaceRecordWithInfoResponse() {
    *this = ::std::move(from);
  }

  inline ReplaceRecordWithInfoResponse& operator=(const ReplaceRecordWithInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceRecordWithInfoResponse& operator=(ReplaceRecordWithInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplaceRecordWithInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceRecordWithInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ReplaceRecordWithInfoResponse*>(
               &_ReplaceRecordWithInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(ReplaceRecordWithInfoResponse& a, ReplaceRecordWithInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceRecordWithInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceRecordWithInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplaceRecordWithInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplaceRecordWithInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplaceRecordWithInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplaceRecordWithInfoResponse& from) {
    ReplaceRecordWithInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceRecordWithInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.ReplaceRecordWithInfoResponse";
  }
  protected:
  explicit ReplaceRecordWithInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.ReplaceRecordWithInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class SearchByAttributesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.SearchByAttributesRequest) */ {
 public:
  inline SearchByAttributesRequest() : SearchByAttributesRequest(nullptr) {}
  ~SearchByAttributesRequest() override;
  explicit PROTOBUF_CONSTEXPR SearchByAttributesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchByAttributesRequest(const SearchByAttributesRequest& from);
  SearchByAttributesRequest(SearchByAttributesRequest&& from) noexcept
    : SearchByAttributesRequest() {
    *this = ::std::move(from);
  }

  inline SearchByAttributesRequest& operator=(const SearchByAttributesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchByAttributesRequest& operator=(SearchByAttributesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchByAttributesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchByAttributesRequest* internal_default_instance() {
    return reinterpret_cast<const SearchByAttributesRequest*>(
               &_SearchByAttributesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(SearchByAttributesRequest& a, SearchByAttributesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchByAttributesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchByAttributesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchByAttributesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchByAttributesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchByAttributesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchByAttributesRequest& from) {
    SearchByAttributesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchByAttributesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.SearchByAttributesRequest";
  }
  protected:
  explicit SearchByAttributesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJsonDataFieldNumber = 1,
  };
  // string jsonData = 1;
  void clear_jsondata();
  const std::string& jsondata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jsondata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jsondata();
  PROTOBUF_NODISCARD std::string* release_jsondata();
  void set_allocated_jsondata(std::string* jsondata);
  private:
  const std::string& _internal_jsondata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jsondata(const std::string& value);
  std::string* _internal_mutable_jsondata();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.SearchByAttributesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jsondata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class SearchByAttributesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.SearchByAttributesResponse) */ {
 public:
  inline SearchByAttributesResponse() : SearchByAttributesResponse(nullptr) {}
  ~SearchByAttributesResponse() override;
  explicit PROTOBUF_CONSTEXPR SearchByAttributesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchByAttributesResponse(const SearchByAttributesResponse& from);
  SearchByAttributesResponse(SearchByAttributesResponse&& from) noexcept
    : SearchByAttributesResponse() {
    *this = ::std::move(from);
  }

  inline SearchByAttributesResponse& operator=(const SearchByAttributesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchByAttributesResponse& operator=(SearchByAttributesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchByAttributesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchByAttributesResponse* internal_default_instance() {
    return reinterpret_cast<const SearchByAttributesResponse*>(
               &_SearchByAttributesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(SearchByAttributesResponse& a, SearchByAttributesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchByAttributesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchByAttributesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchByAttributesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchByAttributesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchByAttributesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchByAttributesResponse& from) {
    SearchByAttributesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchByAttributesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.SearchByAttributesResponse";
  }
  protected:
  explicit SearchByAttributesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.SearchByAttributesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class SearchByAttributes_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.SearchByAttributes_V2Request) */ {
 public:
  inline SearchByAttributes_V2Request() : SearchByAttributes_V2Request(nullptr) {}
  ~SearchByAttributes_V2Request() override;
  explicit PROTOBUF_CONSTEXPR SearchByAttributes_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchByAttributes_V2Request(const SearchByAttributes_V2Request& from);
  SearchByAttributes_V2Request(SearchByAttributes_V2Request&& from) noexcept
    : SearchByAttributes_V2Request() {
    *this = ::std::move(from);
  }

  inline SearchByAttributes_V2Request& operator=(const SearchByAttributes_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchByAttributes_V2Request& operator=(SearchByAttributes_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchByAttributes_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchByAttributes_V2Request* internal_default_instance() {
    return reinterpret_cast<const SearchByAttributes_V2Request*>(
               &_SearchByAttributes_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(SearchByAttributes_V2Request& a, SearchByAttributes_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchByAttributes_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchByAttributes_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchByAttributes_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchByAttributes_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchByAttributes_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchByAttributes_V2Request& from) {
    SearchByAttributes_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchByAttributes_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.SearchByAttributes_V2Request";
  }
  protected:
  explicit SearchByAttributes_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJsonDataFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // string jsonData = 1;
  void clear_jsondata();
  const std::string& jsondata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jsondata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jsondata();
  PROTOBUF_NODISCARD std::string* release_jsondata();
  void set_allocated_jsondata(std::string* jsondata);
  private:
  const std::string& _internal_jsondata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jsondata(const std::string& value);
  std::string* _internal_mutable_jsondata();
  public:

  // int64 flags = 2;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.SearchByAttributes_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jsondata_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class SearchByAttributes_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.SearchByAttributes_V2Response) */ {
 public:
  inline SearchByAttributes_V2Response() : SearchByAttributes_V2Response(nullptr) {}
  ~SearchByAttributes_V2Response() override;
  explicit PROTOBUF_CONSTEXPR SearchByAttributes_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchByAttributes_V2Response(const SearchByAttributes_V2Response& from);
  SearchByAttributes_V2Response(SearchByAttributes_V2Response&& from) noexcept
    : SearchByAttributes_V2Response() {
    *this = ::std::move(from);
  }

  inline SearchByAttributes_V2Response& operator=(const SearchByAttributes_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchByAttributes_V2Response& operator=(SearchByAttributes_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchByAttributes_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchByAttributes_V2Response* internal_default_instance() {
    return reinterpret_cast<const SearchByAttributes_V2Response*>(
               &_SearchByAttributes_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(SearchByAttributes_V2Response& a, SearchByAttributes_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchByAttributes_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchByAttributes_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchByAttributes_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchByAttributes_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchByAttributes_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchByAttributes_V2Response& from) {
    SearchByAttributes_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchByAttributes_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.SearchByAttributes_V2Response";
  }
  protected:
  explicit SearchByAttributes_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.SearchByAttributes_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class StatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:g2engine.StatsRequest) */ {
 public:
  inline StatsRequest() : StatsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsRequest(const StatsRequest& from);
  StatsRequest(StatsRequest&& from) noexcept
    : StatsRequest() {
    *this = ::std::move(from);
  }

  inline StatsRequest& operator=(const StatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsRequest& operator=(StatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsRequest* internal_default_instance() {
    return reinterpret_cast<const StatsRequest*>(
               &_StatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(StatsRequest& a, StatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StatsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StatsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.StatsRequest";
  }
  protected:
  explicit StatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:g2engine.StatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class StatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.StatsResponse) */ {
 public:
  inline StatsResponse() : StatsResponse(nullptr) {}
  ~StatsResponse() override;
  explicit PROTOBUF_CONSTEXPR StatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsResponse(const StatsResponse& from);
  StatsResponse(StatsResponse&& from) noexcept
    : StatsResponse() {
    *this = ::std::move(from);
  }

  inline StatsResponse& operator=(const StatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsResponse& operator=(StatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsResponse* internal_default_instance() {
    return reinterpret_cast<const StatsResponse*>(
               &_StatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(StatsResponse& a, StatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatsResponse& from) {
    StatsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.StatsResponse";
  }
  protected:
  explicit StatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.StatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class StreamExportCSVEntityReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.StreamExportCSVEntityReportRequest) */ {
 public:
  inline StreamExportCSVEntityReportRequest() : StreamExportCSVEntityReportRequest(nullptr) {}
  ~StreamExportCSVEntityReportRequest() override;
  explicit PROTOBUF_CONSTEXPR StreamExportCSVEntityReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamExportCSVEntityReportRequest(const StreamExportCSVEntityReportRequest& from);
  StreamExportCSVEntityReportRequest(StreamExportCSVEntityReportRequest&& from) noexcept
    : StreamExportCSVEntityReportRequest() {
    *this = ::std::move(from);
  }

  inline StreamExportCSVEntityReportRequest& operator=(const StreamExportCSVEntityReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamExportCSVEntityReportRequest& operator=(StreamExportCSVEntityReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamExportCSVEntityReportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamExportCSVEntityReportRequest* internal_default_instance() {
    return reinterpret_cast<const StreamExportCSVEntityReportRequest*>(
               &_StreamExportCSVEntityReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(StreamExportCSVEntityReportRequest& a, StreamExportCSVEntityReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamExportCSVEntityReportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamExportCSVEntityReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamExportCSVEntityReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamExportCSVEntityReportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamExportCSVEntityReportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamExportCSVEntityReportRequest& from) {
    StreamExportCSVEntityReportRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamExportCSVEntityReportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.StreamExportCSVEntityReportRequest";
  }
  protected:
  explicit StreamExportCSVEntityReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCsvColumnListFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // string csvColumnList = 1;
  void clear_csvcolumnlist();
  const std::string& csvcolumnlist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_csvcolumnlist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_csvcolumnlist();
  PROTOBUF_NODISCARD std::string* release_csvcolumnlist();
  void set_allocated_csvcolumnlist(std::string* csvcolumnlist);
  private:
  const std::string& _internal_csvcolumnlist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_csvcolumnlist(const std::string& value);
  std::string* _internal_mutable_csvcolumnlist();
  public:

  // int64 flags = 2;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.StreamExportCSVEntityReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csvcolumnlist_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class StreamExportCSVEntityReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.StreamExportCSVEntityReportResponse) */ {
 public:
  inline StreamExportCSVEntityReportResponse() : StreamExportCSVEntityReportResponse(nullptr) {}
  ~StreamExportCSVEntityReportResponse() override;
  explicit PROTOBUF_CONSTEXPR StreamExportCSVEntityReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamExportCSVEntityReportResponse(const StreamExportCSVEntityReportResponse& from);
  StreamExportCSVEntityReportResponse(StreamExportCSVEntityReportResponse&& from) noexcept
    : StreamExportCSVEntityReportResponse() {
    *this = ::std::move(from);
  }

  inline StreamExportCSVEntityReportResponse& operator=(const StreamExportCSVEntityReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamExportCSVEntityReportResponse& operator=(StreamExportCSVEntityReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamExportCSVEntityReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamExportCSVEntityReportResponse* internal_default_instance() {
    return reinterpret_cast<const StreamExportCSVEntityReportResponse*>(
               &_StreamExportCSVEntityReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(StreamExportCSVEntityReportResponse& a, StreamExportCSVEntityReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamExportCSVEntityReportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamExportCSVEntityReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamExportCSVEntityReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamExportCSVEntityReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamExportCSVEntityReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamExportCSVEntityReportResponse& from) {
    StreamExportCSVEntityReportResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamExportCSVEntityReportResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.StreamExportCSVEntityReportResponse";
  }
  protected:
  explicit StreamExportCSVEntityReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  int64_t result() const;
  void set_result(int64_t value);
  private:
  int64_t _internal_result() const;
  void _internal_set_result(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.StreamExportCSVEntityReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class StreamExportJSONEntityReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.StreamExportJSONEntityReportRequest) */ {
 public:
  inline StreamExportJSONEntityReportRequest() : StreamExportJSONEntityReportRequest(nullptr) {}
  ~StreamExportJSONEntityReportRequest() override;
  explicit PROTOBUF_CONSTEXPR StreamExportJSONEntityReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamExportJSONEntityReportRequest(const StreamExportJSONEntityReportRequest& from);
  StreamExportJSONEntityReportRequest(StreamExportJSONEntityReportRequest&& from) noexcept
    : StreamExportJSONEntityReportRequest() {
    *this = ::std::move(from);
  }

  inline StreamExportJSONEntityReportRequest& operator=(const StreamExportJSONEntityReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamExportJSONEntityReportRequest& operator=(StreamExportJSONEntityReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamExportJSONEntityReportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamExportJSONEntityReportRequest* internal_default_instance() {
    return reinterpret_cast<const StreamExportJSONEntityReportRequest*>(
               &_StreamExportJSONEntityReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(StreamExportJSONEntityReportRequest& a, StreamExportJSONEntityReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamExportJSONEntityReportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamExportJSONEntityReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamExportJSONEntityReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamExportJSONEntityReportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamExportJSONEntityReportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamExportJSONEntityReportRequest& from) {
    StreamExportJSONEntityReportRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamExportJSONEntityReportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.StreamExportJSONEntityReportRequest";
  }
  protected:
  explicit StreamExportJSONEntityReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCsvColumnListFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // string csvColumnList = 1;
  void clear_csvcolumnlist();
  const std::string& csvcolumnlist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_csvcolumnlist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_csvcolumnlist();
  PROTOBUF_NODISCARD std::string* release_csvcolumnlist();
  void set_allocated_csvcolumnlist(std::string* csvcolumnlist);
  private:
  const std::string& _internal_csvcolumnlist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_csvcolumnlist(const std::string& value);
  std::string* _internal_mutable_csvcolumnlist();
  public:

  // int64 flags = 2;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.StreamExportJSONEntityReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csvcolumnlist_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class StreamExportJSONEntityReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.StreamExportJSONEntityReportResponse) */ {
 public:
  inline StreamExportJSONEntityReportResponse() : StreamExportJSONEntityReportResponse(nullptr) {}
  ~StreamExportJSONEntityReportResponse() override;
  explicit PROTOBUF_CONSTEXPR StreamExportJSONEntityReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamExportJSONEntityReportResponse(const StreamExportJSONEntityReportResponse& from);
  StreamExportJSONEntityReportResponse(StreamExportJSONEntityReportResponse&& from) noexcept
    : StreamExportJSONEntityReportResponse() {
    *this = ::std::move(from);
  }

  inline StreamExportJSONEntityReportResponse& operator=(const StreamExportJSONEntityReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamExportJSONEntityReportResponse& operator=(StreamExportJSONEntityReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamExportJSONEntityReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamExportJSONEntityReportResponse* internal_default_instance() {
    return reinterpret_cast<const StreamExportJSONEntityReportResponse*>(
               &_StreamExportJSONEntityReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(StreamExportJSONEntityReportResponse& a, StreamExportJSONEntityReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamExportJSONEntityReportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamExportJSONEntityReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamExportJSONEntityReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamExportJSONEntityReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamExportJSONEntityReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamExportJSONEntityReportResponse& from) {
    StreamExportJSONEntityReportResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamExportJSONEntityReportResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.StreamExportJSONEntityReportResponse";
  }
  protected:
  explicit StreamExportJSONEntityReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  int64_t result() const;
  void set_result(int64_t value);
  private:
  int64_t _internal_result() const;
  void _internal_set_result(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.StreamExportJSONEntityReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class WhyEntitiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.WhyEntitiesRequest) */ {
 public:
  inline WhyEntitiesRequest() : WhyEntitiesRequest(nullptr) {}
  ~WhyEntitiesRequest() override;
  explicit PROTOBUF_CONSTEXPR WhyEntitiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WhyEntitiesRequest(const WhyEntitiesRequest& from);
  WhyEntitiesRequest(WhyEntitiesRequest&& from) noexcept
    : WhyEntitiesRequest() {
    *this = ::std::move(from);
  }

  inline WhyEntitiesRequest& operator=(const WhyEntitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyEntitiesRequest& operator=(WhyEntitiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhyEntitiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhyEntitiesRequest* internal_default_instance() {
    return reinterpret_cast<const WhyEntitiesRequest*>(
               &_WhyEntitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(WhyEntitiesRequest& a, WhyEntitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyEntitiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyEntitiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhyEntitiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WhyEntitiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WhyEntitiesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WhyEntitiesRequest& from) {
    WhyEntitiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyEntitiesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.WhyEntitiesRequest";
  }
  protected:
  explicit WhyEntitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityID1FieldNumber = 1,
    kEntityID2FieldNumber = 2,
  };
  // int64 entityID1 = 1;
  void clear_entityid1();
  int64_t entityid1() const;
  void set_entityid1(int64_t value);
  private:
  int64_t _internal_entityid1() const;
  void _internal_set_entityid1(int64_t value);
  public:

  // int64 entityID2 = 2;
  void clear_entityid2();
  int64_t entityid2() const;
  void set_entityid2(int64_t value);
  private:
  int64_t _internal_entityid2() const;
  void _internal_set_entityid2(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.WhyEntitiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t entityid1_;
    int64_t entityid2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class WhyEntitiesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.WhyEntitiesResponse) */ {
 public:
  inline WhyEntitiesResponse() : WhyEntitiesResponse(nullptr) {}
  ~WhyEntitiesResponse() override;
  explicit PROTOBUF_CONSTEXPR WhyEntitiesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WhyEntitiesResponse(const WhyEntitiesResponse& from);
  WhyEntitiesResponse(WhyEntitiesResponse&& from) noexcept
    : WhyEntitiesResponse() {
    *this = ::std::move(from);
  }

  inline WhyEntitiesResponse& operator=(const WhyEntitiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyEntitiesResponse& operator=(WhyEntitiesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhyEntitiesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhyEntitiesResponse* internal_default_instance() {
    return reinterpret_cast<const WhyEntitiesResponse*>(
               &_WhyEntitiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(WhyEntitiesResponse& a, WhyEntitiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyEntitiesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyEntitiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhyEntitiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WhyEntitiesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WhyEntitiesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WhyEntitiesResponse& from) {
    WhyEntitiesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyEntitiesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.WhyEntitiesResponse";
  }
  protected:
  explicit WhyEntitiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.WhyEntitiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class WhyEntities_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.WhyEntities_V2Request) */ {
 public:
  inline WhyEntities_V2Request() : WhyEntities_V2Request(nullptr) {}
  ~WhyEntities_V2Request() override;
  explicit PROTOBUF_CONSTEXPR WhyEntities_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WhyEntities_V2Request(const WhyEntities_V2Request& from);
  WhyEntities_V2Request(WhyEntities_V2Request&& from) noexcept
    : WhyEntities_V2Request() {
    *this = ::std::move(from);
  }

  inline WhyEntities_V2Request& operator=(const WhyEntities_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyEntities_V2Request& operator=(WhyEntities_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhyEntities_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhyEntities_V2Request* internal_default_instance() {
    return reinterpret_cast<const WhyEntities_V2Request*>(
               &_WhyEntities_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(WhyEntities_V2Request& a, WhyEntities_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyEntities_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyEntities_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhyEntities_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WhyEntities_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WhyEntities_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WhyEntities_V2Request& from) {
    WhyEntities_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyEntities_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.WhyEntities_V2Request";
  }
  protected:
  explicit WhyEntities_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityID1FieldNumber = 1,
    kEntityID2FieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // int64 entityID1 = 1;
  void clear_entityid1();
  int64_t entityid1() const;
  void set_entityid1(int64_t value);
  private:
  int64_t _internal_entityid1() const;
  void _internal_set_entityid1(int64_t value);
  public:

  // int64 entityID2 = 2;
  void clear_entityid2();
  int64_t entityid2() const;
  void set_entityid2(int64_t value);
  private:
  int64_t _internal_entityid2() const;
  void _internal_set_entityid2(int64_t value);
  public:

  // int64 flags = 3;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.WhyEntities_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t entityid1_;
    int64_t entityid2_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class WhyEntities_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.WhyEntities_V2Response) */ {
 public:
  inline WhyEntities_V2Response() : WhyEntities_V2Response(nullptr) {}
  ~WhyEntities_V2Response() override;
  explicit PROTOBUF_CONSTEXPR WhyEntities_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WhyEntities_V2Response(const WhyEntities_V2Response& from);
  WhyEntities_V2Response(WhyEntities_V2Response&& from) noexcept
    : WhyEntities_V2Response() {
    *this = ::std::move(from);
  }

  inline WhyEntities_V2Response& operator=(const WhyEntities_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyEntities_V2Response& operator=(WhyEntities_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhyEntities_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhyEntities_V2Response* internal_default_instance() {
    return reinterpret_cast<const WhyEntities_V2Response*>(
               &_WhyEntities_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(WhyEntities_V2Response& a, WhyEntities_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyEntities_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyEntities_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhyEntities_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WhyEntities_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WhyEntities_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WhyEntities_V2Response& from) {
    WhyEntities_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyEntities_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.WhyEntities_V2Response";
  }
  protected:
  explicit WhyEntities_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.WhyEntities_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class WhyEntityByEntityIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.WhyEntityByEntityIDRequest) */ {
 public:
  inline WhyEntityByEntityIDRequest() : WhyEntityByEntityIDRequest(nullptr) {}
  ~WhyEntityByEntityIDRequest() override;
  explicit PROTOBUF_CONSTEXPR WhyEntityByEntityIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WhyEntityByEntityIDRequest(const WhyEntityByEntityIDRequest& from);
  WhyEntityByEntityIDRequest(WhyEntityByEntityIDRequest&& from) noexcept
    : WhyEntityByEntityIDRequest() {
    *this = ::std::move(from);
  }

  inline WhyEntityByEntityIDRequest& operator=(const WhyEntityByEntityIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyEntityByEntityIDRequest& operator=(WhyEntityByEntityIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhyEntityByEntityIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhyEntityByEntityIDRequest* internal_default_instance() {
    return reinterpret_cast<const WhyEntityByEntityIDRequest*>(
               &_WhyEntityByEntityIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(WhyEntityByEntityIDRequest& a, WhyEntityByEntityIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyEntityByEntityIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyEntityByEntityIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhyEntityByEntityIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WhyEntityByEntityIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WhyEntityByEntityIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WhyEntityByEntityIDRequest& from) {
    WhyEntityByEntityIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyEntityByEntityIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.WhyEntityByEntityIDRequest";
  }
  protected:
  explicit WhyEntityByEntityIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIDFieldNumber = 1,
  };
  // int64 entityID = 1;
  void clear_entityid();
  int64_t entityid() const;
  void set_entityid(int64_t value);
  private:
  int64_t _internal_entityid() const;
  void _internal_set_entityid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.WhyEntityByEntityIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t entityid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class WhyEntityByEntityIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.WhyEntityByEntityIDResponse) */ {
 public:
  inline WhyEntityByEntityIDResponse() : WhyEntityByEntityIDResponse(nullptr) {}
  ~WhyEntityByEntityIDResponse() override;
  explicit PROTOBUF_CONSTEXPR WhyEntityByEntityIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WhyEntityByEntityIDResponse(const WhyEntityByEntityIDResponse& from);
  WhyEntityByEntityIDResponse(WhyEntityByEntityIDResponse&& from) noexcept
    : WhyEntityByEntityIDResponse() {
    *this = ::std::move(from);
  }

  inline WhyEntityByEntityIDResponse& operator=(const WhyEntityByEntityIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyEntityByEntityIDResponse& operator=(WhyEntityByEntityIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhyEntityByEntityIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhyEntityByEntityIDResponse* internal_default_instance() {
    return reinterpret_cast<const WhyEntityByEntityIDResponse*>(
               &_WhyEntityByEntityIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(WhyEntityByEntityIDResponse& a, WhyEntityByEntityIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyEntityByEntityIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyEntityByEntityIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhyEntityByEntityIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WhyEntityByEntityIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WhyEntityByEntityIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WhyEntityByEntityIDResponse& from) {
    WhyEntityByEntityIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyEntityByEntityIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.WhyEntityByEntityIDResponse";
  }
  protected:
  explicit WhyEntityByEntityIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.WhyEntityByEntityIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class WhyEntityByEntityID_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.WhyEntityByEntityID_V2Request) */ {
 public:
  inline WhyEntityByEntityID_V2Request() : WhyEntityByEntityID_V2Request(nullptr) {}
  ~WhyEntityByEntityID_V2Request() override;
  explicit PROTOBUF_CONSTEXPR WhyEntityByEntityID_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WhyEntityByEntityID_V2Request(const WhyEntityByEntityID_V2Request& from);
  WhyEntityByEntityID_V2Request(WhyEntityByEntityID_V2Request&& from) noexcept
    : WhyEntityByEntityID_V2Request() {
    *this = ::std::move(from);
  }

  inline WhyEntityByEntityID_V2Request& operator=(const WhyEntityByEntityID_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyEntityByEntityID_V2Request& operator=(WhyEntityByEntityID_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhyEntityByEntityID_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhyEntityByEntityID_V2Request* internal_default_instance() {
    return reinterpret_cast<const WhyEntityByEntityID_V2Request*>(
               &_WhyEntityByEntityID_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(WhyEntityByEntityID_V2Request& a, WhyEntityByEntityID_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyEntityByEntityID_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyEntityByEntityID_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhyEntityByEntityID_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WhyEntityByEntityID_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WhyEntityByEntityID_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WhyEntityByEntityID_V2Request& from) {
    WhyEntityByEntityID_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyEntityByEntityID_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.WhyEntityByEntityID_V2Request";
  }
  protected:
  explicit WhyEntityByEntityID_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIDFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // int64 entityID = 1;
  void clear_entityid();
  int64_t entityid() const;
  void set_entityid(int64_t value);
  private:
  int64_t _internal_entityid() const;
  void _internal_set_entityid(int64_t value);
  public:

  // int64 flags = 2;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.WhyEntityByEntityID_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t entityid_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class WhyEntityByEntityID_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.WhyEntityByEntityID_V2Response) */ {
 public:
  inline WhyEntityByEntityID_V2Response() : WhyEntityByEntityID_V2Response(nullptr) {}
  ~WhyEntityByEntityID_V2Response() override;
  explicit PROTOBUF_CONSTEXPR WhyEntityByEntityID_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WhyEntityByEntityID_V2Response(const WhyEntityByEntityID_V2Response& from);
  WhyEntityByEntityID_V2Response(WhyEntityByEntityID_V2Response&& from) noexcept
    : WhyEntityByEntityID_V2Response() {
    *this = ::std::move(from);
  }

  inline WhyEntityByEntityID_V2Response& operator=(const WhyEntityByEntityID_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyEntityByEntityID_V2Response& operator=(WhyEntityByEntityID_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhyEntityByEntityID_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhyEntityByEntityID_V2Response* internal_default_instance() {
    return reinterpret_cast<const WhyEntityByEntityID_V2Response*>(
               &_WhyEntityByEntityID_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(WhyEntityByEntityID_V2Response& a, WhyEntityByEntityID_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyEntityByEntityID_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyEntityByEntityID_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhyEntityByEntityID_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WhyEntityByEntityID_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WhyEntityByEntityID_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WhyEntityByEntityID_V2Response& from) {
    WhyEntityByEntityID_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyEntityByEntityID_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.WhyEntityByEntityID_V2Response";
  }
  protected:
  explicit WhyEntityByEntityID_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.WhyEntityByEntityID_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class WhyEntityByRecordIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.WhyEntityByRecordIDRequest) */ {
 public:
  inline WhyEntityByRecordIDRequest() : WhyEntityByRecordIDRequest(nullptr) {}
  ~WhyEntityByRecordIDRequest() override;
  explicit PROTOBUF_CONSTEXPR WhyEntityByRecordIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WhyEntityByRecordIDRequest(const WhyEntityByRecordIDRequest& from);
  WhyEntityByRecordIDRequest(WhyEntityByRecordIDRequest&& from) noexcept
    : WhyEntityByRecordIDRequest() {
    *this = ::std::move(from);
  }

  inline WhyEntityByRecordIDRequest& operator=(const WhyEntityByRecordIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyEntityByRecordIDRequest& operator=(WhyEntityByRecordIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhyEntityByRecordIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhyEntityByRecordIDRequest* internal_default_instance() {
    return reinterpret_cast<const WhyEntityByRecordIDRequest*>(
               &_WhyEntityByRecordIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(WhyEntityByRecordIDRequest& a, WhyEntityByRecordIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyEntityByRecordIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyEntityByRecordIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhyEntityByRecordIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WhyEntityByRecordIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WhyEntityByRecordIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WhyEntityByRecordIDRequest& from) {
    WhyEntityByRecordIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyEntityByRecordIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.WhyEntityByRecordIDRequest";
  }
  protected:
  explicit WhyEntityByRecordIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIDFieldNumber = 2,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode();
  PROTOBUF_NODISCARD std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordID = 2;
  void clear_recordid();
  const std::string& recordid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid();
  PROTOBUF_NODISCARD std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.WhyEntityByRecordIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class WhyEntityByRecordIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.WhyEntityByRecordIDResponse) */ {
 public:
  inline WhyEntityByRecordIDResponse() : WhyEntityByRecordIDResponse(nullptr) {}
  ~WhyEntityByRecordIDResponse() override;
  explicit PROTOBUF_CONSTEXPR WhyEntityByRecordIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WhyEntityByRecordIDResponse(const WhyEntityByRecordIDResponse& from);
  WhyEntityByRecordIDResponse(WhyEntityByRecordIDResponse&& from) noexcept
    : WhyEntityByRecordIDResponse() {
    *this = ::std::move(from);
  }

  inline WhyEntityByRecordIDResponse& operator=(const WhyEntityByRecordIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyEntityByRecordIDResponse& operator=(WhyEntityByRecordIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhyEntityByRecordIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhyEntityByRecordIDResponse* internal_default_instance() {
    return reinterpret_cast<const WhyEntityByRecordIDResponse*>(
               &_WhyEntityByRecordIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(WhyEntityByRecordIDResponse& a, WhyEntityByRecordIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyEntityByRecordIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyEntityByRecordIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhyEntityByRecordIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WhyEntityByRecordIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WhyEntityByRecordIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WhyEntityByRecordIDResponse& from) {
    WhyEntityByRecordIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyEntityByRecordIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.WhyEntityByRecordIDResponse";
  }
  protected:
  explicit WhyEntityByRecordIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.WhyEntityByRecordIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class WhyEntityByRecordID_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.WhyEntityByRecordID_V2Request) */ {
 public:
  inline WhyEntityByRecordID_V2Request() : WhyEntityByRecordID_V2Request(nullptr) {}
  ~WhyEntityByRecordID_V2Request() override;
  explicit PROTOBUF_CONSTEXPR WhyEntityByRecordID_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WhyEntityByRecordID_V2Request(const WhyEntityByRecordID_V2Request& from);
  WhyEntityByRecordID_V2Request(WhyEntityByRecordID_V2Request&& from) noexcept
    : WhyEntityByRecordID_V2Request() {
    *this = ::std::move(from);
  }

  inline WhyEntityByRecordID_V2Request& operator=(const WhyEntityByRecordID_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyEntityByRecordID_V2Request& operator=(WhyEntityByRecordID_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhyEntityByRecordID_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhyEntityByRecordID_V2Request* internal_default_instance() {
    return reinterpret_cast<const WhyEntityByRecordID_V2Request*>(
               &_WhyEntityByRecordID_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(WhyEntityByRecordID_V2Request& a, WhyEntityByRecordID_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyEntityByRecordID_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyEntityByRecordID_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhyEntityByRecordID_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WhyEntityByRecordID_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WhyEntityByRecordID_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WhyEntityByRecordID_V2Request& from) {
    WhyEntityByRecordID_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyEntityByRecordID_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.WhyEntityByRecordID_V2Request";
  }
  protected:
  explicit WhyEntityByRecordID_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCodeFieldNumber = 1,
    kRecordIDFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // string dataSourceCode = 1;
  void clear_datasourcecode();
  const std::string& datasourcecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode();
  PROTOBUF_NODISCARD std::string* release_datasourcecode();
  void set_allocated_datasourcecode(std::string* datasourcecode);
  private:
  const std::string& _internal_datasourcecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode(const std::string& value);
  std::string* _internal_mutable_datasourcecode();
  public:

  // string recordID = 2;
  void clear_recordid();
  const std::string& recordid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid();
  PROTOBUF_NODISCARD std::string* release_recordid();
  void set_allocated_recordid(std::string* recordid);
  private:
  const std::string& _internal_recordid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid(const std::string& value);
  std::string* _internal_mutable_recordid();
  public:

  // int64 flags = 3;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.WhyEntityByRecordID_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class WhyEntityByRecordID_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.WhyEntityByRecordID_V2Response) */ {
 public:
  inline WhyEntityByRecordID_V2Response() : WhyEntityByRecordID_V2Response(nullptr) {}
  ~WhyEntityByRecordID_V2Response() override;
  explicit PROTOBUF_CONSTEXPR WhyEntityByRecordID_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WhyEntityByRecordID_V2Response(const WhyEntityByRecordID_V2Response& from);
  WhyEntityByRecordID_V2Response(WhyEntityByRecordID_V2Response&& from) noexcept
    : WhyEntityByRecordID_V2Response() {
    *this = ::std::move(from);
  }

  inline WhyEntityByRecordID_V2Response& operator=(const WhyEntityByRecordID_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyEntityByRecordID_V2Response& operator=(WhyEntityByRecordID_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhyEntityByRecordID_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhyEntityByRecordID_V2Response* internal_default_instance() {
    return reinterpret_cast<const WhyEntityByRecordID_V2Response*>(
               &_WhyEntityByRecordID_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(WhyEntityByRecordID_V2Response& a, WhyEntityByRecordID_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyEntityByRecordID_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyEntityByRecordID_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhyEntityByRecordID_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WhyEntityByRecordID_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WhyEntityByRecordID_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WhyEntityByRecordID_V2Response& from) {
    WhyEntityByRecordID_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyEntityByRecordID_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.WhyEntityByRecordID_V2Response";
  }
  protected:
  explicit WhyEntityByRecordID_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.WhyEntityByRecordID_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class WhyRecordsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.WhyRecordsRequest) */ {
 public:
  inline WhyRecordsRequest() : WhyRecordsRequest(nullptr) {}
  ~WhyRecordsRequest() override;
  explicit PROTOBUF_CONSTEXPR WhyRecordsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WhyRecordsRequest(const WhyRecordsRequest& from);
  WhyRecordsRequest(WhyRecordsRequest&& from) noexcept
    : WhyRecordsRequest() {
    *this = ::std::move(from);
  }

  inline WhyRecordsRequest& operator=(const WhyRecordsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyRecordsRequest& operator=(WhyRecordsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhyRecordsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhyRecordsRequest* internal_default_instance() {
    return reinterpret_cast<const WhyRecordsRequest*>(
               &_WhyRecordsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(WhyRecordsRequest& a, WhyRecordsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyRecordsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyRecordsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhyRecordsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WhyRecordsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WhyRecordsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WhyRecordsRequest& from) {
    WhyRecordsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyRecordsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.WhyRecordsRequest";
  }
  protected:
  explicit WhyRecordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCode1FieldNumber = 1,
    kRecordID1FieldNumber = 2,
    kDataSourceCode2FieldNumber = 3,
    kRecordID2FieldNumber = 4,
  };
  // string dataSourceCode1 = 1;
  void clear_datasourcecode1();
  const std::string& datasourcecode1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode1();
  PROTOBUF_NODISCARD std::string* release_datasourcecode1();
  void set_allocated_datasourcecode1(std::string* datasourcecode1);
  private:
  const std::string& _internal_datasourcecode1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode1(const std::string& value);
  std::string* _internal_mutable_datasourcecode1();
  public:

  // string recordID1 = 2;
  void clear_recordid1();
  const std::string& recordid1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid1();
  PROTOBUF_NODISCARD std::string* release_recordid1();
  void set_allocated_recordid1(std::string* recordid1);
  private:
  const std::string& _internal_recordid1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid1(const std::string& value);
  std::string* _internal_mutable_recordid1();
  public:

  // string dataSourceCode2 = 3;
  void clear_datasourcecode2();
  const std::string& datasourcecode2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode2();
  PROTOBUF_NODISCARD std::string* release_datasourcecode2();
  void set_allocated_datasourcecode2(std::string* datasourcecode2);
  private:
  const std::string& _internal_datasourcecode2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode2(const std::string& value);
  std::string* _internal_mutable_datasourcecode2();
  public:

  // string recordID2 = 4;
  void clear_recordid2();
  const std::string& recordid2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid2();
  PROTOBUF_NODISCARD std::string* release_recordid2();
  void set_allocated_recordid2(std::string* recordid2);
  private:
  const std::string& _internal_recordid2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid2(const std::string& value);
  std::string* _internal_mutable_recordid2();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.WhyRecordsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class WhyRecordsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.WhyRecordsResponse) */ {
 public:
  inline WhyRecordsResponse() : WhyRecordsResponse(nullptr) {}
  ~WhyRecordsResponse() override;
  explicit PROTOBUF_CONSTEXPR WhyRecordsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WhyRecordsResponse(const WhyRecordsResponse& from);
  WhyRecordsResponse(WhyRecordsResponse&& from) noexcept
    : WhyRecordsResponse() {
    *this = ::std::move(from);
  }

  inline WhyRecordsResponse& operator=(const WhyRecordsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyRecordsResponse& operator=(WhyRecordsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhyRecordsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhyRecordsResponse* internal_default_instance() {
    return reinterpret_cast<const WhyRecordsResponse*>(
               &_WhyRecordsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(WhyRecordsResponse& a, WhyRecordsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyRecordsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyRecordsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhyRecordsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WhyRecordsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WhyRecordsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WhyRecordsResponse& from) {
    WhyRecordsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyRecordsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.WhyRecordsResponse";
  }
  protected:
  explicit WhyRecordsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.WhyRecordsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class WhyRecords_V2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.WhyRecords_V2Request) */ {
 public:
  inline WhyRecords_V2Request() : WhyRecords_V2Request(nullptr) {}
  ~WhyRecords_V2Request() override;
  explicit PROTOBUF_CONSTEXPR WhyRecords_V2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WhyRecords_V2Request(const WhyRecords_V2Request& from);
  WhyRecords_V2Request(WhyRecords_V2Request&& from) noexcept
    : WhyRecords_V2Request() {
    *this = ::std::move(from);
  }

  inline WhyRecords_V2Request& operator=(const WhyRecords_V2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyRecords_V2Request& operator=(WhyRecords_V2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhyRecords_V2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhyRecords_V2Request* internal_default_instance() {
    return reinterpret_cast<const WhyRecords_V2Request*>(
               &_WhyRecords_V2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(WhyRecords_V2Request& a, WhyRecords_V2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyRecords_V2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyRecords_V2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhyRecords_V2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WhyRecords_V2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WhyRecords_V2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WhyRecords_V2Request& from) {
    WhyRecords_V2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyRecords_V2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.WhyRecords_V2Request";
  }
  protected:
  explicit WhyRecords_V2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceCode1FieldNumber = 1,
    kRecordID1FieldNumber = 2,
    kDataSourceCode2FieldNumber = 3,
    kRecordID2FieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // string dataSourceCode1 = 1;
  void clear_datasourcecode1();
  const std::string& datasourcecode1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode1();
  PROTOBUF_NODISCARD std::string* release_datasourcecode1();
  void set_allocated_datasourcecode1(std::string* datasourcecode1);
  private:
  const std::string& _internal_datasourcecode1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode1(const std::string& value);
  std::string* _internal_mutable_datasourcecode1();
  public:

  // string recordID1 = 2;
  void clear_recordid1();
  const std::string& recordid1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid1();
  PROTOBUF_NODISCARD std::string* release_recordid1();
  void set_allocated_recordid1(std::string* recordid1);
  private:
  const std::string& _internal_recordid1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid1(const std::string& value);
  std::string* _internal_mutable_recordid1();
  public:

  // string dataSourceCode2 = 3;
  void clear_datasourcecode2();
  const std::string& datasourcecode2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datasourcecode2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datasourcecode2();
  PROTOBUF_NODISCARD std::string* release_datasourcecode2();
  void set_allocated_datasourcecode2(std::string* datasourcecode2);
  private:
  const std::string& _internal_datasourcecode2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datasourcecode2(const std::string& value);
  std::string* _internal_mutable_datasourcecode2();
  public:

  // string recordID2 = 4;
  void clear_recordid2();
  const std::string& recordid2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recordid2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recordid2();
  PROTOBUF_NODISCARD std::string* release_recordid2();
  void set_allocated_recordid2(std::string* recordid2);
  private:
  const std::string& _internal_recordid2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recordid2(const std::string& value);
  std::string* _internal_mutable_recordid2();
  public:

  // int64 flags = 5;
  void clear_flags();
  int64_t flags() const;
  void set_flags(int64_t value);
  private:
  int64_t _internal_flags() const;
  void _internal_set_flags(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:g2engine.WhyRecords_V2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcecode2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordid2_;
    int64_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// -------------------------------------------------------------------

class WhyRecords_V2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:g2engine.WhyRecords_V2Response) */ {
 public:
  inline WhyRecords_V2Response() : WhyRecords_V2Response(nullptr) {}
  ~WhyRecords_V2Response() override;
  explicit PROTOBUF_CONSTEXPR WhyRecords_V2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WhyRecords_V2Response(const WhyRecords_V2Response& from);
  WhyRecords_V2Response(WhyRecords_V2Response&& from) noexcept
    : WhyRecords_V2Response() {
    *this = ::std::move(from);
  }

  inline WhyRecords_V2Response& operator=(const WhyRecords_V2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhyRecords_V2Response& operator=(WhyRecords_V2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhyRecords_V2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhyRecords_V2Response* internal_default_instance() {
    return reinterpret_cast<const WhyRecords_V2Response*>(
               &_WhyRecords_V2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(WhyRecords_V2Response& a, WhyRecords_V2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(WhyRecords_V2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhyRecords_V2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhyRecords_V2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WhyRecords_V2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WhyRecords_V2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WhyRecords_V2Response& from) {
    WhyRecords_V2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhyRecords_V2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "g2engine.WhyRecords_V2Response";
  }
  protected:
  explicit WhyRecords_V2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:g2engine.WhyRecords_V2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_g2engine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddRecordRequest

// string dataSourceCode = 1;
inline void AddRecordRequest::clear_datasourcecode() {
  _impl_.datasourcecode_.ClearToEmpty();
}
inline const std::string& AddRecordRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordRequest.dataSourceCode)
  return _internal_datasourcecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordRequest::set_datasourcecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordRequest.dataSourceCode)
}
inline std::string* AddRecordRequest::mutable_datasourcecode() {
  std::string* _s = _internal_mutable_datasourcecode();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordRequest.dataSourceCode)
  return _s;
}
inline const std::string& AddRecordRequest::_internal_datasourcecode() const {
  return _impl_.datasourcecode_.Get();
}
inline void AddRecordRequest::_internal_set_datasourcecode(const std::string& value) {
  
  _impl_.datasourcecode_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordRequest::_internal_mutable_datasourcecode() {
  
  return _impl_.datasourcecode_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordRequest.dataSourceCode)
  return _impl_.datasourcecode_.Release();
}
inline void AddRecordRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode_.SetAllocated(datasourcecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode_.IsDefault()) {
    _impl_.datasourcecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordRequest.dataSourceCode)
}

// string recordID = 2;
inline void AddRecordRequest::clear_recordid() {
  _impl_.recordid_.ClearToEmpty();
}
inline const std::string& AddRecordRequest::recordid() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordRequest.recordID)
  return _internal_recordid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordRequest::set_recordid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordRequest.recordID)
}
inline std::string* AddRecordRequest::mutable_recordid() {
  std::string* _s = _internal_mutable_recordid();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordRequest.recordID)
  return _s;
}
inline const std::string& AddRecordRequest::_internal_recordid() const {
  return _impl_.recordid_.Get();
}
inline void AddRecordRequest::_internal_set_recordid(const std::string& value) {
  
  _impl_.recordid_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordRequest::_internal_mutable_recordid() {
  
  return _impl_.recordid_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordRequest.recordID)
  return _impl_.recordid_.Release();
}
inline void AddRecordRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  _impl_.recordid_.SetAllocated(recordid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid_.IsDefault()) {
    _impl_.recordid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordRequest.recordID)
}

// string jsonData = 3;
inline void AddRecordRequest::clear_jsondata() {
  _impl_.jsondata_.ClearToEmpty();
}
inline const std::string& AddRecordRequest::jsondata() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordRequest.jsonData)
  return _internal_jsondata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordRequest::set_jsondata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.jsondata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordRequest.jsonData)
}
inline std::string* AddRecordRequest::mutable_jsondata() {
  std::string* _s = _internal_mutable_jsondata();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordRequest.jsonData)
  return _s;
}
inline const std::string& AddRecordRequest::_internal_jsondata() const {
  return _impl_.jsondata_.Get();
}
inline void AddRecordRequest::_internal_set_jsondata(const std::string& value) {
  
  _impl_.jsondata_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordRequest::_internal_mutable_jsondata() {
  
  return _impl_.jsondata_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordRequest::release_jsondata() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordRequest.jsonData)
  return _impl_.jsondata_.Release();
}
inline void AddRecordRequest::set_allocated_jsondata(std::string* jsondata) {
  if (jsondata != nullptr) {
    
  } else {
    
  }
  _impl_.jsondata_.SetAllocated(jsondata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.jsondata_.IsDefault()) {
    _impl_.jsondata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordRequest.jsonData)
}

// string loadID = 4;
inline void AddRecordRequest::clear_loadid() {
  _impl_.loadid_.ClearToEmpty();
}
inline const std::string& AddRecordRequest::loadid() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordRequest.loadID)
  return _internal_loadid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordRequest::set_loadid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.loadid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordRequest.loadID)
}
inline std::string* AddRecordRequest::mutable_loadid() {
  std::string* _s = _internal_mutable_loadid();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordRequest.loadID)
  return _s;
}
inline const std::string& AddRecordRequest::_internal_loadid() const {
  return _impl_.loadid_.Get();
}
inline void AddRecordRequest::_internal_set_loadid(const std::string& value) {
  
  _impl_.loadid_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordRequest::_internal_mutable_loadid() {
  
  return _impl_.loadid_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordRequest::release_loadid() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordRequest.loadID)
  return _impl_.loadid_.Release();
}
inline void AddRecordRequest::set_allocated_loadid(std::string* loadid) {
  if (loadid != nullptr) {
    
  } else {
    
  }
  _impl_.loadid_.SetAllocated(loadid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.loadid_.IsDefault()) {
    _impl_.loadid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordRequest.loadID)
}

// -------------------------------------------------------------------

// AddRecordResponse

// -------------------------------------------------------------------

// AddRecordWithInfoRequest

// string dataSourceCode = 1;
inline void AddRecordWithInfoRequest::clear_datasourcecode() {
  _impl_.datasourcecode_.ClearToEmpty();
}
inline const std::string& AddRecordWithInfoRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordWithInfoRequest.dataSourceCode)
  return _internal_datasourcecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordWithInfoRequest::set_datasourcecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordWithInfoRequest.dataSourceCode)
}
inline std::string* AddRecordWithInfoRequest::mutable_datasourcecode() {
  std::string* _s = _internal_mutable_datasourcecode();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordWithInfoRequest.dataSourceCode)
  return _s;
}
inline const std::string& AddRecordWithInfoRequest::_internal_datasourcecode() const {
  return _impl_.datasourcecode_.Get();
}
inline void AddRecordWithInfoRequest::_internal_set_datasourcecode(const std::string& value) {
  
  _impl_.datasourcecode_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoRequest::_internal_mutable_datasourcecode() {
  
  return _impl_.datasourcecode_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordWithInfoRequest.dataSourceCode)
  return _impl_.datasourcecode_.Release();
}
inline void AddRecordWithInfoRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode_.SetAllocated(datasourcecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode_.IsDefault()) {
    _impl_.datasourcecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordWithInfoRequest.dataSourceCode)
}

// string recordID = 2;
inline void AddRecordWithInfoRequest::clear_recordid() {
  _impl_.recordid_.ClearToEmpty();
}
inline const std::string& AddRecordWithInfoRequest::recordid() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordWithInfoRequest.recordID)
  return _internal_recordid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordWithInfoRequest::set_recordid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordWithInfoRequest.recordID)
}
inline std::string* AddRecordWithInfoRequest::mutable_recordid() {
  std::string* _s = _internal_mutable_recordid();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordWithInfoRequest.recordID)
  return _s;
}
inline const std::string& AddRecordWithInfoRequest::_internal_recordid() const {
  return _impl_.recordid_.Get();
}
inline void AddRecordWithInfoRequest::_internal_set_recordid(const std::string& value) {
  
  _impl_.recordid_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoRequest::_internal_mutable_recordid() {
  
  return _impl_.recordid_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordWithInfoRequest.recordID)
  return _impl_.recordid_.Release();
}
inline void AddRecordWithInfoRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  _impl_.recordid_.SetAllocated(recordid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid_.IsDefault()) {
    _impl_.recordid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordWithInfoRequest.recordID)
}

// string jsonData = 3;
inline void AddRecordWithInfoRequest::clear_jsondata() {
  _impl_.jsondata_.ClearToEmpty();
}
inline const std::string& AddRecordWithInfoRequest::jsondata() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordWithInfoRequest.jsonData)
  return _internal_jsondata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordWithInfoRequest::set_jsondata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.jsondata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordWithInfoRequest.jsonData)
}
inline std::string* AddRecordWithInfoRequest::mutable_jsondata() {
  std::string* _s = _internal_mutable_jsondata();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordWithInfoRequest.jsonData)
  return _s;
}
inline const std::string& AddRecordWithInfoRequest::_internal_jsondata() const {
  return _impl_.jsondata_.Get();
}
inline void AddRecordWithInfoRequest::_internal_set_jsondata(const std::string& value) {
  
  _impl_.jsondata_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoRequest::_internal_mutable_jsondata() {
  
  return _impl_.jsondata_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoRequest::release_jsondata() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordWithInfoRequest.jsonData)
  return _impl_.jsondata_.Release();
}
inline void AddRecordWithInfoRequest::set_allocated_jsondata(std::string* jsondata) {
  if (jsondata != nullptr) {
    
  } else {
    
  }
  _impl_.jsondata_.SetAllocated(jsondata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.jsondata_.IsDefault()) {
    _impl_.jsondata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordWithInfoRequest.jsonData)
}

// string loadID = 4;
inline void AddRecordWithInfoRequest::clear_loadid() {
  _impl_.loadid_.ClearToEmpty();
}
inline const std::string& AddRecordWithInfoRequest::loadid() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordWithInfoRequest.loadID)
  return _internal_loadid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordWithInfoRequest::set_loadid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.loadid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordWithInfoRequest.loadID)
}
inline std::string* AddRecordWithInfoRequest::mutable_loadid() {
  std::string* _s = _internal_mutable_loadid();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordWithInfoRequest.loadID)
  return _s;
}
inline const std::string& AddRecordWithInfoRequest::_internal_loadid() const {
  return _impl_.loadid_.Get();
}
inline void AddRecordWithInfoRequest::_internal_set_loadid(const std::string& value) {
  
  _impl_.loadid_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoRequest::_internal_mutable_loadid() {
  
  return _impl_.loadid_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoRequest::release_loadid() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordWithInfoRequest.loadID)
  return _impl_.loadid_.Release();
}
inline void AddRecordWithInfoRequest::set_allocated_loadid(std::string* loadid) {
  if (loadid != nullptr) {
    
  } else {
    
  }
  _impl_.loadid_.SetAllocated(loadid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.loadid_.IsDefault()) {
    _impl_.loadid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordWithInfoRequest.loadID)
}

// int64 flags = 5;
inline void AddRecordWithInfoRequest::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t AddRecordWithInfoRequest::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t AddRecordWithInfoRequest::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordWithInfoRequest.flags)
  return _internal_flags();
}
inline void AddRecordWithInfoRequest::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void AddRecordWithInfoRequest::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.AddRecordWithInfoRequest.flags)
}

// -------------------------------------------------------------------

// AddRecordWithInfoResponse

// string result = 1;
inline void AddRecordWithInfoResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& AddRecordWithInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordWithInfoResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordWithInfoResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordWithInfoResponse.result)
}
inline std::string* AddRecordWithInfoResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordWithInfoResponse.result)
  return _s;
}
inline const std::string& AddRecordWithInfoResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void AddRecordWithInfoResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordWithInfoResponse.result)
  return _impl_.result_.Release();
}
inline void AddRecordWithInfoResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordWithInfoResponse.result)
}

// -------------------------------------------------------------------

// AddRecordWithInfoWithReturnedRecordIDRequest

// string dataSourceCode = 1;
inline void AddRecordWithInfoWithReturnedRecordIDRequest::clear_datasourcecode() {
  _impl_.datasourcecode_.ClearToEmpty();
}
inline const std::string& AddRecordWithInfoWithReturnedRecordIDRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest.dataSourceCode)
  return _internal_datasourcecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordWithInfoWithReturnedRecordIDRequest::set_datasourcecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest.dataSourceCode)
}
inline std::string* AddRecordWithInfoWithReturnedRecordIDRequest::mutable_datasourcecode() {
  std::string* _s = _internal_mutable_datasourcecode();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest.dataSourceCode)
  return _s;
}
inline const std::string& AddRecordWithInfoWithReturnedRecordIDRequest::_internal_datasourcecode() const {
  return _impl_.datasourcecode_.Get();
}
inline void AddRecordWithInfoWithReturnedRecordIDRequest::_internal_set_datasourcecode(const std::string& value) {
  
  _impl_.datasourcecode_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoWithReturnedRecordIDRequest::_internal_mutable_datasourcecode() {
  
  return _impl_.datasourcecode_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoWithReturnedRecordIDRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest.dataSourceCode)
  return _impl_.datasourcecode_.Release();
}
inline void AddRecordWithInfoWithReturnedRecordIDRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode_.SetAllocated(datasourcecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode_.IsDefault()) {
    _impl_.datasourcecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest.dataSourceCode)
}

// string jsonData = 2;
inline void AddRecordWithInfoWithReturnedRecordIDRequest::clear_jsondata() {
  _impl_.jsondata_.ClearToEmpty();
}
inline const std::string& AddRecordWithInfoWithReturnedRecordIDRequest::jsondata() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest.jsonData)
  return _internal_jsondata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordWithInfoWithReturnedRecordIDRequest::set_jsondata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.jsondata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest.jsonData)
}
inline std::string* AddRecordWithInfoWithReturnedRecordIDRequest::mutable_jsondata() {
  std::string* _s = _internal_mutable_jsondata();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest.jsonData)
  return _s;
}
inline const std::string& AddRecordWithInfoWithReturnedRecordIDRequest::_internal_jsondata() const {
  return _impl_.jsondata_.Get();
}
inline void AddRecordWithInfoWithReturnedRecordIDRequest::_internal_set_jsondata(const std::string& value) {
  
  _impl_.jsondata_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoWithReturnedRecordIDRequest::_internal_mutable_jsondata() {
  
  return _impl_.jsondata_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoWithReturnedRecordIDRequest::release_jsondata() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest.jsonData)
  return _impl_.jsondata_.Release();
}
inline void AddRecordWithInfoWithReturnedRecordIDRequest::set_allocated_jsondata(std::string* jsondata) {
  if (jsondata != nullptr) {
    
  } else {
    
  }
  _impl_.jsondata_.SetAllocated(jsondata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.jsondata_.IsDefault()) {
    _impl_.jsondata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest.jsonData)
}

// string loadID = 3;
inline void AddRecordWithInfoWithReturnedRecordIDRequest::clear_loadid() {
  _impl_.loadid_.ClearToEmpty();
}
inline const std::string& AddRecordWithInfoWithReturnedRecordIDRequest::loadid() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest.loadID)
  return _internal_loadid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordWithInfoWithReturnedRecordIDRequest::set_loadid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.loadid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest.loadID)
}
inline std::string* AddRecordWithInfoWithReturnedRecordIDRequest::mutable_loadid() {
  std::string* _s = _internal_mutable_loadid();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest.loadID)
  return _s;
}
inline const std::string& AddRecordWithInfoWithReturnedRecordIDRequest::_internal_loadid() const {
  return _impl_.loadid_.Get();
}
inline void AddRecordWithInfoWithReturnedRecordIDRequest::_internal_set_loadid(const std::string& value) {
  
  _impl_.loadid_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoWithReturnedRecordIDRequest::_internal_mutable_loadid() {
  
  return _impl_.loadid_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoWithReturnedRecordIDRequest::release_loadid() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest.loadID)
  return _impl_.loadid_.Release();
}
inline void AddRecordWithInfoWithReturnedRecordIDRequest::set_allocated_loadid(std::string* loadid) {
  if (loadid != nullptr) {
    
  } else {
    
  }
  _impl_.loadid_.SetAllocated(loadid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.loadid_.IsDefault()) {
    _impl_.loadid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest.loadID)
}

// int64 flags = 4;
inline void AddRecordWithInfoWithReturnedRecordIDRequest::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t AddRecordWithInfoWithReturnedRecordIDRequest::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t AddRecordWithInfoWithReturnedRecordIDRequest::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest.flags)
  return _internal_flags();
}
inline void AddRecordWithInfoWithReturnedRecordIDRequest::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void AddRecordWithInfoWithReturnedRecordIDRequest::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.AddRecordWithInfoWithReturnedRecordIDRequest.flags)
}

// -------------------------------------------------------------------

// AddRecordWithInfoWithReturnedRecordIDResponse

// string withInfo = 1;
inline void AddRecordWithInfoWithReturnedRecordIDResponse::clear_withinfo() {
  _impl_.withinfo_.ClearToEmpty();
}
inline const std::string& AddRecordWithInfoWithReturnedRecordIDResponse::withinfo() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordWithInfoWithReturnedRecordIDResponse.withInfo)
  return _internal_withinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordWithInfoWithReturnedRecordIDResponse::set_withinfo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.withinfo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordWithInfoWithReturnedRecordIDResponse.withInfo)
}
inline std::string* AddRecordWithInfoWithReturnedRecordIDResponse::mutable_withinfo() {
  std::string* _s = _internal_mutable_withinfo();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordWithInfoWithReturnedRecordIDResponse.withInfo)
  return _s;
}
inline const std::string& AddRecordWithInfoWithReturnedRecordIDResponse::_internal_withinfo() const {
  return _impl_.withinfo_.Get();
}
inline void AddRecordWithInfoWithReturnedRecordIDResponse::_internal_set_withinfo(const std::string& value) {
  
  _impl_.withinfo_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoWithReturnedRecordIDResponse::_internal_mutable_withinfo() {
  
  return _impl_.withinfo_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoWithReturnedRecordIDResponse::release_withinfo() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordWithInfoWithReturnedRecordIDResponse.withInfo)
  return _impl_.withinfo_.Release();
}
inline void AddRecordWithInfoWithReturnedRecordIDResponse::set_allocated_withinfo(std::string* withinfo) {
  if (withinfo != nullptr) {
    
  } else {
    
  }
  _impl_.withinfo_.SetAllocated(withinfo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.withinfo_.IsDefault()) {
    _impl_.withinfo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordWithInfoWithReturnedRecordIDResponse.withInfo)
}

// string recordID = 2;
inline void AddRecordWithInfoWithReturnedRecordIDResponse::clear_recordid() {
  _impl_.recordid_.ClearToEmpty();
}
inline const std::string& AddRecordWithInfoWithReturnedRecordIDResponse::recordid() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordWithInfoWithReturnedRecordIDResponse.recordID)
  return _internal_recordid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordWithInfoWithReturnedRecordIDResponse::set_recordid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordWithInfoWithReturnedRecordIDResponse.recordID)
}
inline std::string* AddRecordWithInfoWithReturnedRecordIDResponse::mutable_recordid() {
  std::string* _s = _internal_mutable_recordid();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordWithInfoWithReturnedRecordIDResponse.recordID)
  return _s;
}
inline const std::string& AddRecordWithInfoWithReturnedRecordIDResponse::_internal_recordid() const {
  return _impl_.recordid_.Get();
}
inline void AddRecordWithInfoWithReturnedRecordIDResponse::_internal_set_recordid(const std::string& value) {
  
  _impl_.recordid_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoWithReturnedRecordIDResponse::_internal_mutable_recordid() {
  
  return _impl_.recordid_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordWithInfoWithReturnedRecordIDResponse::release_recordid() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordWithInfoWithReturnedRecordIDResponse.recordID)
  return _impl_.recordid_.Release();
}
inline void AddRecordWithInfoWithReturnedRecordIDResponse::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  _impl_.recordid_.SetAllocated(recordid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid_.IsDefault()) {
    _impl_.recordid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordWithInfoWithReturnedRecordIDResponse.recordID)
}

// -------------------------------------------------------------------

// AddRecordWithReturnedRecordIDRequest

// string dataSourceCode = 1;
inline void AddRecordWithReturnedRecordIDRequest::clear_datasourcecode() {
  _impl_.datasourcecode_.ClearToEmpty();
}
inline const std::string& AddRecordWithReturnedRecordIDRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordWithReturnedRecordIDRequest.dataSourceCode)
  return _internal_datasourcecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordWithReturnedRecordIDRequest::set_datasourcecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordWithReturnedRecordIDRequest.dataSourceCode)
}
inline std::string* AddRecordWithReturnedRecordIDRequest::mutable_datasourcecode() {
  std::string* _s = _internal_mutable_datasourcecode();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordWithReturnedRecordIDRequest.dataSourceCode)
  return _s;
}
inline const std::string& AddRecordWithReturnedRecordIDRequest::_internal_datasourcecode() const {
  return _impl_.datasourcecode_.Get();
}
inline void AddRecordWithReturnedRecordIDRequest::_internal_set_datasourcecode(const std::string& value) {
  
  _impl_.datasourcecode_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordWithReturnedRecordIDRequest::_internal_mutable_datasourcecode() {
  
  return _impl_.datasourcecode_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordWithReturnedRecordIDRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordWithReturnedRecordIDRequest.dataSourceCode)
  return _impl_.datasourcecode_.Release();
}
inline void AddRecordWithReturnedRecordIDRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode_.SetAllocated(datasourcecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode_.IsDefault()) {
    _impl_.datasourcecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordWithReturnedRecordIDRequest.dataSourceCode)
}

// string jsonData = 2;
inline void AddRecordWithReturnedRecordIDRequest::clear_jsondata() {
  _impl_.jsondata_.ClearToEmpty();
}
inline const std::string& AddRecordWithReturnedRecordIDRequest::jsondata() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordWithReturnedRecordIDRequest.jsonData)
  return _internal_jsondata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordWithReturnedRecordIDRequest::set_jsondata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.jsondata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordWithReturnedRecordIDRequest.jsonData)
}
inline std::string* AddRecordWithReturnedRecordIDRequest::mutable_jsondata() {
  std::string* _s = _internal_mutable_jsondata();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordWithReturnedRecordIDRequest.jsonData)
  return _s;
}
inline const std::string& AddRecordWithReturnedRecordIDRequest::_internal_jsondata() const {
  return _impl_.jsondata_.Get();
}
inline void AddRecordWithReturnedRecordIDRequest::_internal_set_jsondata(const std::string& value) {
  
  _impl_.jsondata_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordWithReturnedRecordIDRequest::_internal_mutable_jsondata() {
  
  return _impl_.jsondata_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordWithReturnedRecordIDRequest::release_jsondata() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordWithReturnedRecordIDRequest.jsonData)
  return _impl_.jsondata_.Release();
}
inline void AddRecordWithReturnedRecordIDRequest::set_allocated_jsondata(std::string* jsondata) {
  if (jsondata != nullptr) {
    
  } else {
    
  }
  _impl_.jsondata_.SetAllocated(jsondata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.jsondata_.IsDefault()) {
    _impl_.jsondata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordWithReturnedRecordIDRequest.jsonData)
}

// string loadID = 3;
inline void AddRecordWithReturnedRecordIDRequest::clear_loadid() {
  _impl_.loadid_.ClearToEmpty();
}
inline const std::string& AddRecordWithReturnedRecordIDRequest::loadid() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordWithReturnedRecordIDRequest.loadID)
  return _internal_loadid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordWithReturnedRecordIDRequest::set_loadid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.loadid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordWithReturnedRecordIDRequest.loadID)
}
inline std::string* AddRecordWithReturnedRecordIDRequest::mutable_loadid() {
  std::string* _s = _internal_mutable_loadid();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordWithReturnedRecordIDRequest.loadID)
  return _s;
}
inline const std::string& AddRecordWithReturnedRecordIDRequest::_internal_loadid() const {
  return _impl_.loadid_.Get();
}
inline void AddRecordWithReturnedRecordIDRequest::_internal_set_loadid(const std::string& value) {
  
  _impl_.loadid_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordWithReturnedRecordIDRequest::_internal_mutable_loadid() {
  
  return _impl_.loadid_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordWithReturnedRecordIDRequest::release_loadid() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordWithReturnedRecordIDRequest.loadID)
  return _impl_.loadid_.Release();
}
inline void AddRecordWithReturnedRecordIDRequest::set_allocated_loadid(std::string* loadid) {
  if (loadid != nullptr) {
    
  } else {
    
  }
  _impl_.loadid_.SetAllocated(loadid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.loadid_.IsDefault()) {
    _impl_.loadid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordWithReturnedRecordIDRequest.loadID)
}

// -------------------------------------------------------------------

// AddRecordWithReturnedRecordIDResponse

// string result = 1;
inline void AddRecordWithReturnedRecordIDResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& AddRecordWithReturnedRecordIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.AddRecordWithReturnedRecordIDResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecordWithReturnedRecordIDResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.AddRecordWithReturnedRecordIDResponse.result)
}
inline std::string* AddRecordWithReturnedRecordIDResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.AddRecordWithReturnedRecordIDResponse.result)
  return _s;
}
inline const std::string& AddRecordWithReturnedRecordIDResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void AddRecordWithReturnedRecordIDResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecordWithReturnedRecordIDResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecordWithReturnedRecordIDResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.AddRecordWithReturnedRecordIDResponse.result)
  return _impl_.result_.Release();
}
inline void AddRecordWithReturnedRecordIDResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.AddRecordWithReturnedRecordIDResponse.result)
}

// -------------------------------------------------------------------

// CheckRecordRequest

// string record = 1;
inline void CheckRecordRequest::clear_record() {
  _impl_.record_.ClearToEmpty();
}
inline const std::string& CheckRecordRequest::record() const {
  // @@protoc_insertion_point(field_get:g2engine.CheckRecordRequest.record)
  return _internal_record();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckRecordRequest::set_record(ArgT0&& arg0, ArgT... args) {
 
 _impl_.record_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.CheckRecordRequest.record)
}
inline std::string* CheckRecordRequest::mutable_record() {
  std::string* _s = _internal_mutable_record();
  // @@protoc_insertion_point(field_mutable:g2engine.CheckRecordRequest.record)
  return _s;
}
inline const std::string& CheckRecordRequest::_internal_record() const {
  return _impl_.record_.Get();
}
inline void CheckRecordRequest::_internal_set_record(const std::string& value) {
  
  _impl_.record_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckRecordRequest::_internal_mutable_record() {
  
  return _impl_.record_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckRecordRequest::release_record() {
  // @@protoc_insertion_point(field_release:g2engine.CheckRecordRequest.record)
  return _impl_.record_.Release();
}
inline void CheckRecordRequest::set_allocated_record(std::string* record) {
  if (record != nullptr) {
    
  } else {
    
  }
  _impl_.record_.SetAllocated(record, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.record_.IsDefault()) {
    _impl_.record_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.CheckRecordRequest.record)
}

// string recordQueryList = 2;
inline void CheckRecordRequest::clear_recordquerylist() {
  _impl_.recordquerylist_.ClearToEmpty();
}
inline const std::string& CheckRecordRequest::recordquerylist() const {
  // @@protoc_insertion_point(field_get:g2engine.CheckRecordRequest.recordQueryList)
  return _internal_recordquerylist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckRecordRequest::set_recordquerylist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordquerylist_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.CheckRecordRequest.recordQueryList)
}
inline std::string* CheckRecordRequest::mutable_recordquerylist() {
  std::string* _s = _internal_mutable_recordquerylist();
  // @@protoc_insertion_point(field_mutable:g2engine.CheckRecordRequest.recordQueryList)
  return _s;
}
inline const std::string& CheckRecordRequest::_internal_recordquerylist() const {
  return _impl_.recordquerylist_.Get();
}
inline void CheckRecordRequest::_internal_set_recordquerylist(const std::string& value) {
  
  _impl_.recordquerylist_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckRecordRequest::_internal_mutable_recordquerylist() {
  
  return _impl_.recordquerylist_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckRecordRequest::release_recordquerylist() {
  // @@protoc_insertion_point(field_release:g2engine.CheckRecordRequest.recordQueryList)
  return _impl_.recordquerylist_.Release();
}
inline void CheckRecordRequest::set_allocated_recordquerylist(std::string* recordquerylist) {
  if (recordquerylist != nullptr) {
    
  } else {
    
  }
  _impl_.recordquerylist_.SetAllocated(recordquerylist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordquerylist_.IsDefault()) {
    _impl_.recordquerylist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.CheckRecordRequest.recordQueryList)
}

// -------------------------------------------------------------------

// CheckRecordResponse

// string result = 1;
inline void CheckRecordResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& CheckRecordResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.CheckRecordResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckRecordResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.CheckRecordResponse.result)
}
inline std::string* CheckRecordResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.CheckRecordResponse.result)
  return _s;
}
inline const std::string& CheckRecordResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void CheckRecordResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckRecordResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckRecordResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.CheckRecordResponse.result)
  return _impl_.result_.Release();
}
inline void CheckRecordResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.CheckRecordResponse.result)
}

// -------------------------------------------------------------------

// CloseExportRequest

// int64 responseHandle = 1;
inline void CloseExportRequest::clear_responsehandle() {
  _impl_.responsehandle_ = int64_t{0};
}
inline int64_t CloseExportRequest::_internal_responsehandle() const {
  return _impl_.responsehandle_;
}
inline int64_t CloseExportRequest::responsehandle() const {
  // @@protoc_insertion_point(field_get:g2engine.CloseExportRequest.responseHandle)
  return _internal_responsehandle();
}
inline void CloseExportRequest::_internal_set_responsehandle(int64_t value) {
  
  _impl_.responsehandle_ = value;
}
inline void CloseExportRequest::set_responsehandle(int64_t value) {
  _internal_set_responsehandle(value);
  // @@protoc_insertion_point(field_set:g2engine.CloseExportRequest.responseHandle)
}

// -------------------------------------------------------------------

// CloseExportResponse

// -------------------------------------------------------------------

// CountRedoRecordsRequest

// -------------------------------------------------------------------

// CountRedoRecordsResponse

// int64 result = 1;
inline void CountRedoRecordsResponse::clear_result() {
  _impl_.result_ = int64_t{0};
}
inline int64_t CountRedoRecordsResponse::_internal_result() const {
  return _impl_.result_;
}
inline int64_t CountRedoRecordsResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.CountRedoRecordsResponse.result)
  return _internal_result();
}
inline void CountRedoRecordsResponse::_internal_set_result(int64_t value) {
  
  _impl_.result_ = value;
}
inline void CountRedoRecordsResponse::set_result(int64_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:g2engine.CountRedoRecordsResponse.result)
}

// -------------------------------------------------------------------

// DeleteRecordRequest

// string dataSourceCode = 1;
inline void DeleteRecordRequest::clear_datasourcecode() {
  _impl_.datasourcecode_.ClearToEmpty();
}
inline const std::string& DeleteRecordRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:g2engine.DeleteRecordRequest.dataSourceCode)
  return _internal_datasourcecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRecordRequest::set_datasourcecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.DeleteRecordRequest.dataSourceCode)
}
inline std::string* DeleteRecordRequest::mutable_datasourcecode() {
  std::string* _s = _internal_mutable_datasourcecode();
  // @@protoc_insertion_point(field_mutable:g2engine.DeleteRecordRequest.dataSourceCode)
  return _s;
}
inline const std::string& DeleteRecordRequest::_internal_datasourcecode() const {
  return _impl_.datasourcecode_.Get();
}
inline void DeleteRecordRequest::_internal_set_datasourcecode(const std::string& value) {
  
  _impl_.datasourcecode_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRecordRequest::_internal_mutable_datasourcecode() {
  
  return _impl_.datasourcecode_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRecordRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:g2engine.DeleteRecordRequest.dataSourceCode)
  return _impl_.datasourcecode_.Release();
}
inline void DeleteRecordRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode_.SetAllocated(datasourcecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode_.IsDefault()) {
    _impl_.datasourcecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.DeleteRecordRequest.dataSourceCode)
}

// string recordID = 2;
inline void DeleteRecordRequest::clear_recordid() {
  _impl_.recordid_.ClearToEmpty();
}
inline const std::string& DeleteRecordRequest::recordid() const {
  // @@protoc_insertion_point(field_get:g2engine.DeleteRecordRequest.recordID)
  return _internal_recordid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRecordRequest::set_recordid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.DeleteRecordRequest.recordID)
}
inline std::string* DeleteRecordRequest::mutable_recordid() {
  std::string* _s = _internal_mutable_recordid();
  // @@protoc_insertion_point(field_mutable:g2engine.DeleteRecordRequest.recordID)
  return _s;
}
inline const std::string& DeleteRecordRequest::_internal_recordid() const {
  return _impl_.recordid_.Get();
}
inline void DeleteRecordRequest::_internal_set_recordid(const std::string& value) {
  
  _impl_.recordid_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRecordRequest::_internal_mutable_recordid() {
  
  return _impl_.recordid_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRecordRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:g2engine.DeleteRecordRequest.recordID)
  return _impl_.recordid_.Release();
}
inline void DeleteRecordRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  _impl_.recordid_.SetAllocated(recordid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid_.IsDefault()) {
    _impl_.recordid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.DeleteRecordRequest.recordID)
}

// string loadID = 3;
inline void DeleteRecordRequest::clear_loadid() {
  _impl_.loadid_.ClearToEmpty();
}
inline const std::string& DeleteRecordRequest::loadid() const {
  // @@protoc_insertion_point(field_get:g2engine.DeleteRecordRequest.loadID)
  return _internal_loadid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRecordRequest::set_loadid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.loadid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.DeleteRecordRequest.loadID)
}
inline std::string* DeleteRecordRequest::mutable_loadid() {
  std::string* _s = _internal_mutable_loadid();
  // @@protoc_insertion_point(field_mutable:g2engine.DeleteRecordRequest.loadID)
  return _s;
}
inline const std::string& DeleteRecordRequest::_internal_loadid() const {
  return _impl_.loadid_.Get();
}
inline void DeleteRecordRequest::_internal_set_loadid(const std::string& value) {
  
  _impl_.loadid_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRecordRequest::_internal_mutable_loadid() {
  
  return _impl_.loadid_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRecordRequest::release_loadid() {
  // @@protoc_insertion_point(field_release:g2engine.DeleteRecordRequest.loadID)
  return _impl_.loadid_.Release();
}
inline void DeleteRecordRequest::set_allocated_loadid(std::string* loadid) {
  if (loadid != nullptr) {
    
  } else {
    
  }
  _impl_.loadid_.SetAllocated(loadid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.loadid_.IsDefault()) {
    _impl_.loadid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.DeleteRecordRequest.loadID)
}

// -------------------------------------------------------------------

// DeleteRecordResponse

// -------------------------------------------------------------------

// DeleteRecordWithInfoRequest

// string dataSourceCode = 1;
inline void DeleteRecordWithInfoRequest::clear_datasourcecode() {
  _impl_.datasourcecode_.ClearToEmpty();
}
inline const std::string& DeleteRecordWithInfoRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:g2engine.DeleteRecordWithInfoRequest.dataSourceCode)
  return _internal_datasourcecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRecordWithInfoRequest::set_datasourcecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.DeleteRecordWithInfoRequest.dataSourceCode)
}
inline std::string* DeleteRecordWithInfoRequest::mutable_datasourcecode() {
  std::string* _s = _internal_mutable_datasourcecode();
  // @@protoc_insertion_point(field_mutable:g2engine.DeleteRecordWithInfoRequest.dataSourceCode)
  return _s;
}
inline const std::string& DeleteRecordWithInfoRequest::_internal_datasourcecode() const {
  return _impl_.datasourcecode_.Get();
}
inline void DeleteRecordWithInfoRequest::_internal_set_datasourcecode(const std::string& value) {
  
  _impl_.datasourcecode_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRecordWithInfoRequest::_internal_mutable_datasourcecode() {
  
  return _impl_.datasourcecode_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRecordWithInfoRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:g2engine.DeleteRecordWithInfoRequest.dataSourceCode)
  return _impl_.datasourcecode_.Release();
}
inline void DeleteRecordWithInfoRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode_.SetAllocated(datasourcecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode_.IsDefault()) {
    _impl_.datasourcecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.DeleteRecordWithInfoRequest.dataSourceCode)
}

// string recordID = 2;
inline void DeleteRecordWithInfoRequest::clear_recordid() {
  _impl_.recordid_.ClearToEmpty();
}
inline const std::string& DeleteRecordWithInfoRequest::recordid() const {
  // @@protoc_insertion_point(field_get:g2engine.DeleteRecordWithInfoRequest.recordID)
  return _internal_recordid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRecordWithInfoRequest::set_recordid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.DeleteRecordWithInfoRequest.recordID)
}
inline std::string* DeleteRecordWithInfoRequest::mutable_recordid() {
  std::string* _s = _internal_mutable_recordid();
  // @@protoc_insertion_point(field_mutable:g2engine.DeleteRecordWithInfoRequest.recordID)
  return _s;
}
inline const std::string& DeleteRecordWithInfoRequest::_internal_recordid() const {
  return _impl_.recordid_.Get();
}
inline void DeleteRecordWithInfoRequest::_internal_set_recordid(const std::string& value) {
  
  _impl_.recordid_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRecordWithInfoRequest::_internal_mutable_recordid() {
  
  return _impl_.recordid_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRecordWithInfoRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:g2engine.DeleteRecordWithInfoRequest.recordID)
  return _impl_.recordid_.Release();
}
inline void DeleteRecordWithInfoRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  _impl_.recordid_.SetAllocated(recordid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid_.IsDefault()) {
    _impl_.recordid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.DeleteRecordWithInfoRequest.recordID)
}

// string loadID = 3;
inline void DeleteRecordWithInfoRequest::clear_loadid() {
  _impl_.loadid_.ClearToEmpty();
}
inline const std::string& DeleteRecordWithInfoRequest::loadid() const {
  // @@protoc_insertion_point(field_get:g2engine.DeleteRecordWithInfoRequest.loadID)
  return _internal_loadid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRecordWithInfoRequest::set_loadid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.loadid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.DeleteRecordWithInfoRequest.loadID)
}
inline std::string* DeleteRecordWithInfoRequest::mutable_loadid() {
  std::string* _s = _internal_mutable_loadid();
  // @@protoc_insertion_point(field_mutable:g2engine.DeleteRecordWithInfoRequest.loadID)
  return _s;
}
inline const std::string& DeleteRecordWithInfoRequest::_internal_loadid() const {
  return _impl_.loadid_.Get();
}
inline void DeleteRecordWithInfoRequest::_internal_set_loadid(const std::string& value) {
  
  _impl_.loadid_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRecordWithInfoRequest::_internal_mutable_loadid() {
  
  return _impl_.loadid_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRecordWithInfoRequest::release_loadid() {
  // @@protoc_insertion_point(field_release:g2engine.DeleteRecordWithInfoRequest.loadID)
  return _impl_.loadid_.Release();
}
inline void DeleteRecordWithInfoRequest::set_allocated_loadid(std::string* loadid) {
  if (loadid != nullptr) {
    
  } else {
    
  }
  _impl_.loadid_.SetAllocated(loadid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.loadid_.IsDefault()) {
    _impl_.loadid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.DeleteRecordWithInfoRequest.loadID)
}

// int64 flags = 4;
inline void DeleteRecordWithInfoRequest::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t DeleteRecordWithInfoRequest::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t DeleteRecordWithInfoRequest::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.DeleteRecordWithInfoRequest.flags)
  return _internal_flags();
}
inline void DeleteRecordWithInfoRequest::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void DeleteRecordWithInfoRequest::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.DeleteRecordWithInfoRequest.flags)
}

// -------------------------------------------------------------------

// DeleteRecordWithInfoResponse

// string result = 1;
inline void DeleteRecordWithInfoResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& DeleteRecordWithInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.DeleteRecordWithInfoResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRecordWithInfoResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.DeleteRecordWithInfoResponse.result)
}
inline std::string* DeleteRecordWithInfoResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.DeleteRecordWithInfoResponse.result)
  return _s;
}
inline const std::string& DeleteRecordWithInfoResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void DeleteRecordWithInfoResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRecordWithInfoResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRecordWithInfoResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.DeleteRecordWithInfoResponse.result)
  return _impl_.result_.Release();
}
inline void DeleteRecordWithInfoResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.DeleteRecordWithInfoResponse.result)
}

// -------------------------------------------------------------------

// DestroyRequest

// -------------------------------------------------------------------

// DestroyResponse

// -------------------------------------------------------------------

// ExportConfigRequest

// -------------------------------------------------------------------

// ExportConfigResponse

// string result = 1;
inline void ExportConfigResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& ExportConfigResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.ExportConfigResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExportConfigResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ExportConfigResponse.result)
}
inline std::string* ExportConfigResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.ExportConfigResponse.result)
  return _s;
}
inline const std::string& ExportConfigResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void ExportConfigResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* ExportConfigResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* ExportConfigResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.ExportConfigResponse.result)
  return _impl_.result_.Release();
}
inline void ExportConfigResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ExportConfigResponse.result)
}

// -------------------------------------------------------------------

// ExportConfigAndConfigIDRequest

// -------------------------------------------------------------------

// ExportConfigAndConfigIDResponse

// string config = 1;
inline void ExportConfigAndConfigIDResponse::clear_config() {
  _impl_.config_.ClearToEmpty();
}
inline const std::string& ExportConfigAndConfigIDResponse::config() const {
  // @@protoc_insertion_point(field_get:g2engine.ExportConfigAndConfigIDResponse.config)
  return _internal_config();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExportConfigAndConfigIDResponse::set_config(ArgT0&& arg0, ArgT... args) {
 
 _impl_.config_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ExportConfigAndConfigIDResponse.config)
}
inline std::string* ExportConfigAndConfigIDResponse::mutable_config() {
  std::string* _s = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:g2engine.ExportConfigAndConfigIDResponse.config)
  return _s;
}
inline const std::string& ExportConfigAndConfigIDResponse::_internal_config() const {
  return _impl_.config_.Get();
}
inline void ExportConfigAndConfigIDResponse::_internal_set_config(const std::string& value) {
  
  _impl_.config_.Set(value, GetArenaForAllocation());
}
inline std::string* ExportConfigAndConfigIDResponse::_internal_mutable_config() {
  
  return _impl_.config_.Mutable(GetArenaForAllocation());
}
inline std::string* ExportConfigAndConfigIDResponse::release_config() {
  // @@protoc_insertion_point(field_release:g2engine.ExportConfigAndConfigIDResponse.config)
  return _impl_.config_.Release();
}
inline void ExportConfigAndConfigIDResponse::set_allocated_config(std::string* config) {
  if (config != nullptr) {
    
  } else {
    
  }
  _impl_.config_.SetAllocated(config, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.config_.IsDefault()) {
    _impl_.config_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ExportConfigAndConfigIDResponse.config)
}

// int64 configID = 2;
inline void ExportConfigAndConfigIDResponse::clear_configid() {
  _impl_.configid_ = int64_t{0};
}
inline int64_t ExportConfigAndConfigIDResponse::_internal_configid() const {
  return _impl_.configid_;
}
inline int64_t ExportConfigAndConfigIDResponse::configid() const {
  // @@protoc_insertion_point(field_get:g2engine.ExportConfigAndConfigIDResponse.configID)
  return _internal_configid();
}
inline void ExportConfigAndConfigIDResponse::_internal_set_configid(int64_t value) {
  
  _impl_.configid_ = value;
}
inline void ExportConfigAndConfigIDResponse::set_configid(int64_t value) {
  _internal_set_configid(value);
  // @@protoc_insertion_point(field_set:g2engine.ExportConfigAndConfigIDResponse.configID)
}

// -------------------------------------------------------------------

// ExportCSVEntityReportRequest

// string csvColumnList = 1;
inline void ExportCSVEntityReportRequest::clear_csvcolumnlist() {
  _impl_.csvcolumnlist_.ClearToEmpty();
}
inline const std::string& ExportCSVEntityReportRequest::csvcolumnlist() const {
  // @@protoc_insertion_point(field_get:g2engine.ExportCSVEntityReportRequest.csvColumnList)
  return _internal_csvcolumnlist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExportCSVEntityReportRequest::set_csvcolumnlist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.csvcolumnlist_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ExportCSVEntityReportRequest.csvColumnList)
}
inline std::string* ExportCSVEntityReportRequest::mutable_csvcolumnlist() {
  std::string* _s = _internal_mutable_csvcolumnlist();
  // @@protoc_insertion_point(field_mutable:g2engine.ExportCSVEntityReportRequest.csvColumnList)
  return _s;
}
inline const std::string& ExportCSVEntityReportRequest::_internal_csvcolumnlist() const {
  return _impl_.csvcolumnlist_.Get();
}
inline void ExportCSVEntityReportRequest::_internal_set_csvcolumnlist(const std::string& value) {
  
  _impl_.csvcolumnlist_.Set(value, GetArenaForAllocation());
}
inline std::string* ExportCSVEntityReportRequest::_internal_mutable_csvcolumnlist() {
  
  return _impl_.csvcolumnlist_.Mutable(GetArenaForAllocation());
}
inline std::string* ExportCSVEntityReportRequest::release_csvcolumnlist() {
  // @@protoc_insertion_point(field_release:g2engine.ExportCSVEntityReportRequest.csvColumnList)
  return _impl_.csvcolumnlist_.Release();
}
inline void ExportCSVEntityReportRequest::set_allocated_csvcolumnlist(std::string* csvcolumnlist) {
  if (csvcolumnlist != nullptr) {
    
  } else {
    
  }
  _impl_.csvcolumnlist_.SetAllocated(csvcolumnlist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.csvcolumnlist_.IsDefault()) {
    _impl_.csvcolumnlist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ExportCSVEntityReportRequest.csvColumnList)
}

// int64 flags = 2;
inline void ExportCSVEntityReportRequest::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t ExportCSVEntityReportRequest::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t ExportCSVEntityReportRequest::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.ExportCSVEntityReportRequest.flags)
  return _internal_flags();
}
inline void ExportCSVEntityReportRequest::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void ExportCSVEntityReportRequest::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.ExportCSVEntityReportRequest.flags)
}

// -------------------------------------------------------------------

// ExportCSVEntityReportResponse

// int64 result = 1;
inline void ExportCSVEntityReportResponse::clear_result() {
  _impl_.result_ = int64_t{0};
}
inline int64_t ExportCSVEntityReportResponse::_internal_result() const {
  return _impl_.result_;
}
inline int64_t ExportCSVEntityReportResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.ExportCSVEntityReportResponse.result)
  return _internal_result();
}
inline void ExportCSVEntityReportResponse::_internal_set_result(int64_t value) {
  
  _impl_.result_ = value;
}
inline void ExportCSVEntityReportResponse::set_result(int64_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:g2engine.ExportCSVEntityReportResponse.result)
}

// -------------------------------------------------------------------

// ExportJSONEntityReportRequest

// int64 flags = 1;
inline void ExportJSONEntityReportRequest::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t ExportJSONEntityReportRequest::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t ExportJSONEntityReportRequest::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.ExportJSONEntityReportRequest.flags)
  return _internal_flags();
}
inline void ExportJSONEntityReportRequest::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void ExportJSONEntityReportRequest::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.ExportJSONEntityReportRequest.flags)
}

// -------------------------------------------------------------------

// ExportJSONEntityReportResponse

// int64 result = 1;
inline void ExportJSONEntityReportResponse::clear_result() {
  _impl_.result_ = int64_t{0};
}
inline int64_t ExportJSONEntityReportResponse::_internal_result() const {
  return _impl_.result_;
}
inline int64_t ExportJSONEntityReportResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.ExportJSONEntityReportResponse.result)
  return _internal_result();
}
inline void ExportJSONEntityReportResponse::_internal_set_result(int64_t value) {
  
  _impl_.result_ = value;
}
inline void ExportJSONEntityReportResponse::set_result(int64_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:g2engine.ExportJSONEntityReportResponse.result)
}

// -------------------------------------------------------------------

// FetchNextRequest

// int64 responseHandle = 1;
inline void FetchNextRequest::clear_responsehandle() {
  _impl_.responsehandle_ = int64_t{0};
}
inline int64_t FetchNextRequest::_internal_responsehandle() const {
  return _impl_.responsehandle_;
}
inline int64_t FetchNextRequest::responsehandle() const {
  // @@protoc_insertion_point(field_get:g2engine.FetchNextRequest.responseHandle)
  return _internal_responsehandle();
}
inline void FetchNextRequest::_internal_set_responsehandle(int64_t value) {
  
  _impl_.responsehandle_ = value;
}
inline void FetchNextRequest::set_responsehandle(int64_t value) {
  _internal_set_responsehandle(value);
  // @@protoc_insertion_point(field_set:g2engine.FetchNextRequest.responseHandle)
}

// -------------------------------------------------------------------

// FetchNextResponse

// string result = 1;
inline void FetchNextResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FetchNextResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FetchNextResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FetchNextResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FetchNextResponse.result)
}
inline std::string* FetchNextResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FetchNextResponse.result)
  return _s;
}
inline const std::string& FetchNextResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FetchNextResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FetchNextResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FetchNextResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FetchNextResponse.result)
  return _impl_.result_.Release();
}
inline void FetchNextResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FetchNextResponse.result)
}

// -------------------------------------------------------------------

// FindInterestingEntitiesByEntityIDRequest

// int64 entityID = 1;
inline void FindInterestingEntitiesByEntityIDRequest::clear_entityid() {
  _impl_.entityid_ = int64_t{0};
}
inline int64_t FindInterestingEntitiesByEntityIDRequest::_internal_entityid() const {
  return _impl_.entityid_;
}
inline int64_t FindInterestingEntitiesByEntityIDRequest::entityid() const {
  // @@protoc_insertion_point(field_get:g2engine.FindInterestingEntitiesByEntityIDRequest.entityID)
  return _internal_entityid();
}
inline void FindInterestingEntitiesByEntityIDRequest::_internal_set_entityid(int64_t value) {
  
  _impl_.entityid_ = value;
}
inline void FindInterestingEntitiesByEntityIDRequest::set_entityid(int64_t value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:g2engine.FindInterestingEntitiesByEntityIDRequest.entityID)
}

// int64 flags = 2;
inline void FindInterestingEntitiesByEntityIDRequest::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t FindInterestingEntitiesByEntityIDRequest::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t FindInterestingEntitiesByEntityIDRequest::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.FindInterestingEntitiesByEntityIDRequest.flags)
  return _internal_flags();
}
inline void FindInterestingEntitiesByEntityIDRequest::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void FindInterestingEntitiesByEntityIDRequest::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.FindInterestingEntitiesByEntityIDRequest.flags)
}

// -------------------------------------------------------------------

// FindInterestingEntitiesByEntityIDResponse

// string result = 1;
inline void FindInterestingEntitiesByEntityIDResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindInterestingEntitiesByEntityIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindInterestingEntitiesByEntityIDResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindInterestingEntitiesByEntityIDResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindInterestingEntitiesByEntityIDResponse.result)
}
inline std::string* FindInterestingEntitiesByEntityIDResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindInterestingEntitiesByEntityIDResponse.result)
  return _s;
}
inline const std::string& FindInterestingEntitiesByEntityIDResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindInterestingEntitiesByEntityIDResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindInterestingEntitiesByEntityIDResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindInterestingEntitiesByEntityIDResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindInterestingEntitiesByEntityIDResponse.result)
  return _impl_.result_.Release();
}
inline void FindInterestingEntitiesByEntityIDResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindInterestingEntitiesByEntityIDResponse.result)
}

// -------------------------------------------------------------------

// FindInterestingEntitiesByRecordIDRequest

// string dataSourceCode = 1;
inline void FindInterestingEntitiesByRecordIDRequest::clear_datasourcecode() {
  _impl_.datasourcecode_.ClearToEmpty();
}
inline const std::string& FindInterestingEntitiesByRecordIDRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:g2engine.FindInterestingEntitiesByRecordIDRequest.dataSourceCode)
  return _internal_datasourcecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindInterestingEntitiesByRecordIDRequest::set_datasourcecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindInterestingEntitiesByRecordIDRequest.dataSourceCode)
}
inline std::string* FindInterestingEntitiesByRecordIDRequest::mutable_datasourcecode() {
  std::string* _s = _internal_mutable_datasourcecode();
  // @@protoc_insertion_point(field_mutable:g2engine.FindInterestingEntitiesByRecordIDRequest.dataSourceCode)
  return _s;
}
inline const std::string& FindInterestingEntitiesByRecordIDRequest::_internal_datasourcecode() const {
  return _impl_.datasourcecode_.Get();
}
inline void FindInterestingEntitiesByRecordIDRequest::_internal_set_datasourcecode(const std::string& value) {
  
  _impl_.datasourcecode_.Set(value, GetArenaForAllocation());
}
inline std::string* FindInterestingEntitiesByRecordIDRequest::_internal_mutable_datasourcecode() {
  
  return _impl_.datasourcecode_.Mutable(GetArenaForAllocation());
}
inline std::string* FindInterestingEntitiesByRecordIDRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:g2engine.FindInterestingEntitiesByRecordIDRequest.dataSourceCode)
  return _impl_.datasourcecode_.Release();
}
inline void FindInterestingEntitiesByRecordIDRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode_.SetAllocated(datasourcecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode_.IsDefault()) {
    _impl_.datasourcecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindInterestingEntitiesByRecordIDRequest.dataSourceCode)
}

// string recordID = 2;
inline void FindInterestingEntitiesByRecordIDRequest::clear_recordid() {
  _impl_.recordid_.ClearToEmpty();
}
inline const std::string& FindInterestingEntitiesByRecordIDRequest::recordid() const {
  // @@protoc_insertion_point(field_get:g2engine.FindInterestingEntitiesByRecordIDRequest.recordID)
  return _internal_recordid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindInterestingEntitiesByRecordIDRequest::set_recordid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindInterestingEntitiesByRecordIDRequest.recordID)
}
inline std::string* FindInterestingEntitiesByRecordIDRequest::mutable_recordid() {
  std::string* _s = _internal_mutable_recordid();
  // @@protoc_insertion_point(field_mutable:g2engine.FindInterestingEntitiesByRecordIDRequest.recordID)
  return _s;
}
inline const std::string& FindInterestingEntitiesByRecordIDRequest::_internal_recordid() const {
  return _impl_.recordid_.Get();
}
inline void FindInterestingEntitiesByRecordIDRequest::_internal_set_recordid(const std::string& value) {
  
  _impl_.recordid_.Set(value, GetArenaForAllocation());
}
inline std::string* FindInterestingEntitiesByRecordIDRequest::_internal_mutable_recordid() {
  
  return _impl_.recordid_.Mutable(GetArenaForAllocation());
}
inline std::string* FindInterestingEntitiesByRecordIDRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:g2engine.FindInterestingEntitiesByRecordIDRequest.recordID)
  return _impl_.recordid_.Release();
}
inline void FindInterestingEntitiesByRecordIDRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  _impl_.recordid_.SetAllocated(recordid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid_.IsDefault()) {
    _impl_.recordid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindInterestingEntitiesByRecordIDRequest.recordID)
}

// int64 flags = 3;
inline void FindInterestingEntitiesByRecordIDRequest::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t FindInterestingEntitiesByRecordIDRequest::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t FindInterestingEntitiesByRecordIDRequest::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.FindInterestingEntitiesByRecordIDRequest.flags)
  return _internal_flags();
}
inline void FindInterestingEntitiesByRecordIDRequest::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void FindInterestingEntitiesByRecordIDRequest::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.FindInterestingEntitiesByRecordIDRequest.flags)
}

// -------------------------------------------------------------------

// FindInterestingEntitiesByRecordIDResponse

// string result = 1;
inline void FindInterestingEntitiesByRecordIDResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindInterestingEntitiesByRecordIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindInterestingEntitiesByRecordIDResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindInterestingEntitiesByRecordIDResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindInterestingEntitiesByRecordIDResponse.result)
}
inline std::string* FindInterestingEntitiesByRecordIDResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindInterestingEntitiesByRecordIDResponse.result)
  return _s;
}
inline const std::string& FindInterestingEntitiesByRecordIDResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindInterestingEntitiesByRecordIDResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindInterestingEntitiesByRecordIDResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindInterestingEntitiesByRecordIDResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindInterestingEntitiesByRecordIDResponse.result)
  return _impl_.result_.Release();
}
inline void FindInterestingEntitiesByRecordIDResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindInterestingEntitiesByRecordIDResponse.result)
}

// -------------------------------------------------------------------

// FindNetworkByEntityIDRequest

// string entityList = 1;
inline void FindNetworkByEntityIDRequest::clear_entitylist() {
  _impl_.entitylist_.ClearToEmpty();
}
inline const std::string& FindNetworkByEntityIDRequest::entitylist() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByEntityIDRequest.entityList)
  return _internal_entitylist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindNetworkByEntityIDRequest::set_entitylist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entitylist_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByEntityIDRequest.entityList)
}
inline std::string* FindNetworkByEntityIDRequest::mutable_entitylist() {
  std::string* _s = _internal_mutable_entitylist();
  // @@protoc_insertion_point(field_mutable:g2engine.FindNetworkByEntityIDRequest.entityList)
  return _s;
}
inline const std::string& FindNetworkByEntityIDRequest::_internal_entitylist() const {
  return _impl_.entitylist_.Get();
}
inline void FindNetworkByEntityIDRequest::_internal_set_entitylist(const std::string& value) {
  
  _impl_.entitylist_.Set(value, GetArenaForAllocation());
}
inline std::string* FindNetworkByEntityIDRequest::_internal_mutable_entitylist() {
  
  return _impl_.entitylist_.Mutable(GetArenaForAllocation());
}
inline std::string* FindNetworkByEntityIDRequest::release_entitylist() {
  // @@protoc_insertion_point(field_release:g2engine.FindNetworkByEntityIDRequest.entityList)
  return _impl_.entitylist_.Release();
}
inline void FindNetworkByEntityIDRequest::set_allocated_entitylist(std::string* entitylist) {
  if (entitylist != nullptr) {
    
  } else {
    
  }
  _impl_.entitylist_.SetAllocated(entitylist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entitylist_.IsDefault()) {
    _impl_.entitylist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindNetworkByEntityIDRequest.entityList)
}

// int32 maxDegree = 2;
inline void FindNetworkByEntityIDRequest::clear_maxdegree() {
  _impl_.maxdegree_ = 0;
}
inline int32_t FindNetworkByEntityIDRequest::_internal_maxdegree() const {
  return _impl_.maxdegree_;
}
inline int32_t FindNetworkByEntityIDRequest::maxdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByEntityIDRequest.maxDegree)
  return _internal_maxdegree();
}
inline void FindNetworkByEntityIDRequest::_internal_set_maxdegree(int32_t value) {
  
  _impl_.maxdegree_ = value;
}
inline void FindNetworkByEntityIDRequest::set_maxdegree(int32_t value) {
  _internal_set_maxdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByEntityIDRequest.maxDegree)
}

// int32 buildOutDegree = 3;
inline void FindNetworkByEntityIDRequest::clear_buildoutdegree() {
  _impl_.buildoutdegree_ = 0;
}
inline int32_t FindNetworkByEntityIDRequest::_internal_buildoutdegree() const {
  return _impl_.buildoutdegree_;
}
inline int32_t FindNetworkByEntityIDRequest::buildoutdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByEntityIDRequest.buildOutDegree)
  return _internal_buildoutdegree();
}
inline void FindNetworkByEntityIDRequest::_internal_set_buildoutdegree(int32_t value) {
  
  _impl_.buildoutdegree_ = value;
}
inline void FindNetworkByEntityIDRequest::set_buildoutdegree(int32_t value) {
  _internal_set_buildoutdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByEntityIDRequest.buildOutDegree)
}

// int32 maxEntities = 4;
inline void FindNetworkByEntityIDRequest::clear_maxentities() {
  _impl_.maxentities_ = 0;
}
inline int32_t FindNetworkByEntityIDRequest::_internal_maxentities() const {
  return _impl_.maxentities_;
}
inline int32_t FindNetworkByEntityIDRequest::maxentities() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByEntityIDRequest.maxEntities)
  return _internal_maxentities();
}
inline void FindNetworkByEntityIDRequest::_internal_set_maxentities(int32_t value) {
  
  _impl_.maxentities_ = value;
}
inline void FindNetworkByEntityIDRequest::set_maxentities(int32_t value) {
  _internal_set_maxentities(value);
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByEntityIDRequest.maxEntities)
}

// -------------------------------------------------------------------

// FindNetworkByEntityIDResponse

// string result = 1;
inline void FindNetworkByEntityIDResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindNetworkByEntityIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByEntityIDResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindNetworkByEntityIDResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByEntityIDResponse.result)
}
inline std::string* FindNetworkByEntityIDResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindNetworkByEntityIDResponse.result)
  return _s;
}
inline const std::string& FindNetworkByEntityIDResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindNetworkByEntityIDResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindNetworkByEntityIDResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindNetworkByEntityIDResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindNetworkByEntityIDResponse.result)
  return _impl_.result_.Release();
}
inline void FindNetworkByEntityIDResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindNetworkByEntityIDResponse.result)
}

// -------------------------------------------------------------------

// FindNetworkByEntityID_V2Request

// string entityList = 1;
inline void FindNetworkByEntityID_V2Request::clear_entitylist() {
  _impl_.entitylist_.ClearToEmpty();
}
inline const std::string& FindNetworkByEntityID_V2Request::entitylist() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByEntityID_V2Request.entityList)
  return _internal_entitylist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindNetworkByEntityID_V2Request::set_entitylist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entitylist_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByEntityID_V2Request.entityList)
}
inline std::string* FindNetworkByEntityID_V2Request::mutable_entitylist() {
  std::string* _s = _internal_mutable_entitylist();
  // @@protoc_insertion_point(field_mutable:g2engine.FindNetworkByEntityID_V2Request.entityList)
  return _s;
}
inline const std::string& FindNetworkByEntityID_V2Request::_internal_entitylist() const {
  return _impl_.entitylist_.Get();
}
inline void FindNetworkByEntityID_V2Request::_internal_set_entitylist(const std::string& value) {
  
  _impl_.entitylist_.Set(value, GetArenaForAllocation());
}
inline std::string* FindNetworkByEntityID_V2Request::_internal_mutable_entitylist() {
  
  return _impl_.entitylist_.Mutable(GetArenaForAllocation());
}
inline std::string* FindNetworkByEntityID_V2Request::release_entitylist() {
  // @@protoc_insertion_point(field_release:g2engine.FindNetworkByEntityID_V2Request.entityList)
  return _impl_.entitylist_.Release();
}
inline void FindNetworkByEntityID_V2Request::set_allocated_entitylist(std::string* entitylist) {
  if (entitylist != nullptr) {
    
  } else {
    
  }
  _impl_.entitylist_.SetAllocated(entitylist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entitylist_.IsDefault()) {
    _impl_.entitylist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindNetworkByEntityID_V2Request.entityList)
}

// int32 maxDegree = 2;
inline void FindNetworkByEntityID_V2Request::clear_maxdegree() {
  _impl_.maxdegree_ = 0;
}
inline int32_t FindNetworkByEntityID_V2Request::_internal_maxdegree() const {
  return _impl_.maxdegree_;
}
inline int32_t FindNetworkByEntityID_V2Request::maxdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByEntityID_V2Request.maxDegree)
  return _internal_maxdegree();
}
inline void FindNetworkByEntityID_V2Request::_internal_set_maxdegree(int32_t value) {
  
  _impl_.maxdegree_ = value;
}
inline void FindNetworkByEntityID_V2Request::set_maxdegree(int32_t value) {
  _internal_set_maxdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByEntityID_V2Request.maxDegree)
}

// int32 buildOutDegree = 3;
inline void FindNetworkByEntityID_V2Request::clear_buildoutdegree() {
  _impl_.buildoutdegree_ = 0;
}
inline int32_t FindNetworkByEntityID_V2Request::_internal_buildoutdegree() const {
  return _impl_.buildoutdegree_;
}
inline int32_t FindNetworkByEntityID_V2Request::buildoutdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByEntityID_V2Request.buildOutDegree)
  return _internal_buildoutdegree();
}
inline void FindNetworkByEntityID_V2Request::_internal_set_buildoutdegree(int32_t value) {
  
  _impl_.buildoutdegree_ = value;
}
inline void FindNetworkByEntityID_V2Request::set_buildoutdegree(int32_t value) {
  _internal_set_buildoutdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByEntityID_V2Request.buildOutDegree)
}

// int32 maxEntities = 4;
inline void FindNetworkByEntityID_V2Request::clear_maxentities() {
  _impl_.maxentities_ = 0;
}
inline int32_t FindNetworkByEntityID_V2Request::_internal_maxentities() const {
  return _impl_.maxentities_;
}
inline int32_t FindNetworkByEntityID_V2Request::maxentities() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByEntityID_V2Request.maxEntities)
  return _internal_maxentities();
}
inline void FindNetworkByEntityID_V2Request::_internal_set_maxentities(int32_t value) {
  
  _impl_.maxentities_ = value;
}
inline void FindNetworkByEntityID_V2Request::set_maxentities(int32_t value) {
  _internal_set_maxentities(value);
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByEntityID_V2Request.maxEntities)
}

// int64 flags = 5;
inline void FindNetworkByEntityID_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t FindNetworkByEntityID_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t FindNetworkByEntityID_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByEntityID_V2Request.flags)
  return _internal_flags();
}
inline void FindNetworkByEntityID_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void FindNetworkByEntityID_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByEntityID_V2Request.flags)
}

// -------------------------------------------------------------------

// FindNetworkByEntityID_V2Response

// string result = 1;
inline void FindNetworkByEntityID_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindNetworkByEntityID_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByEntityID_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindNetworkByEntityID_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByEntityID_V2Response.result)
}
inline std::string* FindNetworkByEntityID_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindNetworkByEntityID_V2Response.result)
  return _s;
}
inline const std::string& FindNetworkByEntityID_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindNetworkByEntityID_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindNetworkByEntityID_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindNetworkByEntityID_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindNetworkByEntityID_V2Response.result)
  return _impl_.result_.Release();
}
inline void FindNetworkByEntityID_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindNetworkByEntityID_V2Response.result)
}

// -------------------------------------------------------------------

// FindNetworkByRecordIDRequest

// string recordList = 1;
inline void FindNetworkByRecordIDRequest::clear_recordlist() {
  _impl_.recordlist_.ClearToEmpty();
}
inline const std::string& FindNetworkByRecordIDRequest::recordlist() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByRecordIDRequest.recordList)
  return _internal_recordlist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindNetworkByRecordIDRequest::set_recordlist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordlist_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByRecordIDRequest.recordList)
}
inline std::string* FindNetworkByRecordIDRequest::mutable_recordlist() {
  std::string* _s = _internal_mutable_recordlist();
  // @@protoc_insertion_point(field_mutable:g2engine.FindNetworkByRecordIDRequest.recordList)
  return _s;
}
inline const std::string& FindNetworkByRecordIDRequest::_internal_recordlist() const {
  return _impl_.recordlist_.Get();
}
inline void FindNetworkByRecordIDRequest::_internal_set_recordlist(const std::string& value) {
  
  _impl_.recordlist_.Set(value, GetArenaForAllocation());
}
inline std::string* FindNetworkByRecordIDRequest::_internal_mutable_recordlist() {
  
  return _impl_.recordlist_.Mutable(GetArenaForAllocation());
}
inline std::string* FindNetworkByRecordIDRequest::release_recordlist() {
  // @@protoc_insertion_point(field_release:g2engine.FindNetworkByRecordIDRequest.recordList)
  return _impl_.recordlist_.Release();
}
inline void FindNetworkByRecordIDRequest::set_allocated_recordlist(std::string* recordlist) {
  if (recordlist != nullptr) {
    
  } else {
    
  }
  _impl_.recordlist_.SetAllocated(recordlist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordlist_.IsDefault()) {
    _impl_.recordlist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindNetworkByRecordIDRequest.recordList)
}

// int32 maxDegree = 2;
inline void FindNetworkByRecordIDRequest::clear_maxdegree() {
  _impl_.maxdegree_ = 0;
}
inline int32_t FindNetworkByRecordIDRequest::_internal_maxdegree() const {
  return _impl_.maxdegree_;
}
inline int32_t FindNetworkByRecordIDRequest::maxdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByRecordIDRequest.maxDegree)
  return _internal_maxdegree();
}
inline void FindNetworkByRecordIDRequest::_internal_set_maxdegree(int32_t value) {
  
  _impl_.maxdegree_ = value;
}
inline void FindNetworkByRecordIDRequest::set_maxdegree(int32_t value) {
  _internal_set_maxdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByRecordIDRequest.maxDegree)
}

// int32 buildOutDegree = 3;
inline void FindNetworkByRecordIDRequest::clear_buildoutdegree() {
  _impl_.buildoutdegree_ = 0;
}
inline int32_t FindNetworkByRecordIDRequest::_internal_buildoutdegree() const {
  return _impl_.buildoutdegree_;
}
inline int32_t FindNetworkByRecordIDRequest::buildoutdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByRecordIDRequest.buildOutDegree)
  return _internal_buildoutdegree();
}
inline void FindNetworkByRecordIDRequest::_internal_set_buildoutdegree(int32_t value) {
  
  _impl_.buildoutdegree_ = value;
}
inline void FindNetworkByRecordIDRequest::set_buildoutdegree(int32_t value) {
  _internal_set_buildoutdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByRecordIDRequest.buildOutDegree)
}

// int32 maxEntities = 4;
inline void FindNetworkByRecordIDRequest::clear_maxentities() {
  _impl_.maxentities_ = 0;
}
inline int32_t FindNetworkByRecordIDRequest::_internal_maxentities() const {
  return _impl_.maxentities_;
}
inline int32_t FindNetworkByRecordIDRequest::maxentities() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByRecordIDRequest.maxEntities)
  return _internal_maxentities();
}
inline void FindNetworkByRecordIDRequest::_internal_set_maxentities(int32_t value) {
  
  _impl_.maxentities_ = value;
}
inline void FindNetworkByRecordIDRequest::set_maxentities(int32_t value) {
  _internal_set_maxentities(value);
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByRecordIDRequest.maxEntities)
}

// -------------------------------------------------------------------

// FindNetworkByRecordIDResponse

// string result = 1;
inline void FindNetworkByRecordIDResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindNetworkByRecordIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByRecordIDResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindNetworkByRecordIDResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByRecordIDResponse.result)
}
inline std::string* FindNetworkByRecordIDResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindNetworkByRecordIDResponse.result)
  return _s;
}
inline const std::string& FindNetworkByRecordIDResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindNetworkByRecordIDResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindNetworkByRecordIDResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindNetworkByRecordIDResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindNetworkByRecordIDResponse.result)
  return _impl_.result_.Release();
}
inline void FindNetworkByRecordIDResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindNetworkByRecordIDResponse.result)
}

// -------------------------------------------------------------------

// FindNetworkByRecordID_V2Request

// string recordList = 1;
inline void FindNetworkByRecordID_V2Request::clear_recordlist() {
  _impl_.recordlist_.ClearToEmpty();
}
inline const std::string& FindNetworkByRecordID_V2Request::recordlist() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByRecordID_V2Request.recordList)
  return _internal_recordlist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindNetworkByRecordID_V2Request::set_recordlist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordlist_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByRecordID_V2Request.recordList)
}
inline std::string* FindNetworkByRecordID_V2Request::mutable_recordlist() {
  std::string* _s = _internal_mutable_recordlist();
  // @@protoc_insertion_point(field_mutable:g2engine.FindNetworkByRecordID_V2Request.recordList)
  return _s;
}
inline const std::string& FindNetworkByRecordID_V2Request::_internal_recordlist() const {
  return _impl_.recordlist_.Get();
}
inline void FindNetworkByRecordID_V2Request::_internal_set_recordlist(const std::string& value) {
  
  _impl_.recordlist_.Set(value, GetArenaForAllocation());
}
inline std::string* FindNetworkByRecordID_V2Request::_internal_mutable_recordlist() {
  
  return _impl_.recordlist_.Mutable(GetArenaForAllocation());
}
inline std::string* FindNetworkByRecordID_V2Request::release_recordlist() {
  // @@protoc_insertion_point(field_release:g2engine.FindNetworkByRecordID_V2Request.recordList)
  return _impl_.recordlist_.Release();
}
inline void FindNetworkByRecordID_V2Request::set_allocated_recordlist(std::string* recordlist) {
  if (recordlist != nullptr) {
    
  } else {
    
  }
  _impl_.recordlist_.SetAllocated(recordlist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordlist_.IsDefault()) {
    _impl_.recordlist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindNetworkByRecordID_V2Request.recordList)
}

// int32 maxDegree = 2;
inline void FindNetworkByRecordID_V2Request::clear_maxdegree() {
  _impl_.maxdegree_ = 0;
}
inline int32_t FindNetworkByRecordID_V2Request::_internal_maxdegree() const {
  return _impl_.maxdegree_;
}
inline int32_t FindNetworkByRecordID_V2Request::maxdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByRecordID_V2Request.maxDegree)
  return _internal_maxdegree();
}
inline void FindNetworkByRecordID_V2Request::_internal_set_maxdegree(int32_t value) {
  
  _impl_.maxdegree_ = value;
}
inline void FindNetworkByRecordID_V2Request::set_maxdegree(int32_t value) {
  _internal_set_maxdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByRecordID_V2Request.maxDegree)
}

// int32 buildOutDegree = 3;
inline void FindNetworkByRecordID_V2Request::clear_buildoutdegree() {
  _impl_.buildoutdegree_ = 0;
}
inline int32_t FindNetworkByRecordID_V2Request::_internal_buildoutdegree() const {
  return _impl_.buildoutdegree_;
}
inline int32_t FindNetworkByRecordID_V2Request::buildoutdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByRecordID_V2Request.buildOutDegree)
  return _internal_buildoutdegree();
}
inline void FindNetworkByRecordID_V2Request::_internal_set_buildoutdegree(int32_t value) {
  
  _impl_.buildoutdegree_ = value;
}
inline void FindNetworkByRecordID_V2Request::set_buildoutdegree(int32_t value) {
  _internal_set_buildoutdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByRecordID_V2Request.buildOutDegree)
}

// int32 maxEntities = 4;
inline void FindNetworkByRecordID_V2Request::clear_maxentities() {
  _impl_.maxentities_ = 0;
}
inline int32_t FindNetworkByRecordID_V2Request::_internal_maxentities() const {
  return _impl_.maxentities_;
}
inline int32_t FindNetworkByRecordID_V2Request::maxentities() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByRecordID_V2Request.maxEntities)
  return _internal_maxentities();
}
inline void FindNetworkByRecordID_V2Request::_internal_set_maxentities(int32_t value) {
  
  _impl_.maxentities_ = value;
}
inline void FindNetworkByRecordID_V2Request::set_maxentities(int32_t value) {
  _internal_set_maxentities(value);
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByRecordID_V2Request.maxEntities)
}

// int64 flags = 5;
inline void FindNetworkByRecordID_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t FindNetworkByRecordID_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t FindNetworkByRecordID_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByRecordID_V2Request.flags)
  return _internal_flags();
}
inline void FindNetworkByRecordID_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void FindNetworkByRecordID_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByRecordID_V2Request.flags)
}

// -------------------------------------------------------------------

// FindNetworkByRecordID_V2Response

// string result = 1;
inline void FindNetworkByRecordID_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindNetworkByRecordID_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindNetworkByRecordID_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindNetworkByRecordID_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindNetworkByRecordID_V2Response.result)
}
inline std::string* FindNetworkByRecordID_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindNetworkByRecordID_V2Response.result)
  return _s;
}
inline const std::string& FindNetworkByRecordID_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindNetworkByRecordID_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindNetworkByRecordID_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindNetworkByRecordID_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindNetworkByRecordID_V2Response.result)
  return _impl_.result_.Release();
}
inline void FindNetworkByRecordID_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindNetworkByRecordID_V2Response.result)
}

// -------------------------------------------------------------------

// FindPathByEntityIDRequest

// int64 entityID1 = 1;
inline void FindPathByEntityIDRequest::clear_entityid1() {
  _impl_.entityid1_ = int64_t{0};
}
inline int64_t FindPathByEntityIDRequest::_internal_entityid1() const {
  return _impl_.entityid1_;
}
inline int64_t FindPathByEntityIDRequest::entityid1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByEntityIDRequest.entityID1)
  return _internal_entityid1();
}
inline void FindPathByEntityIDRequest::_internal_set_entityid1(int64_t value) {
  
  _impl_.entityid1_ = value;
}
inline void FindPathByEntityIDRequest::set_entityid1(int64_t value) {
  _internal_set_entityid1(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathByEntityIDRequest.entityID1)
}

// int64 entityID2 = 2;
inline void FindPathByEntityIDRequest::clear_entityid2() {
  _impl_.entityid2_ = int64_t{0};
}
inline int64_t FindPathByEntityIDRequest::_internal_entityid2() const {
  return _impl_.entityid2_;
}
inline int64_t FindPathByEntityIDRequest::entityid2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByEntityIDRequest.entityID2)
  return _internal_entityid2();
}
inline void FindPathByEntityIDRequest::_internal_set_entityid2(int64_t value) {
  
  _impl_.entityid2_ = value;
}
inline void FindPathByEntityIDRequest::set_entityid2(int64_t value) {
  _internal_set_entityid2(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathByEntityIDRequest.entityID2)
}

// int32 maxDegree = 3;
inline void FindPathByEntityIDRequest::clear_maxdegree() {
  _impl_.maxdegree_ = 0;
}
inline int32_t FindPathByEntityIDRequest::_internal_maxdegree() const {
  return _impl_.maxdegree_;
}
inline int32_t FindPathByEntityIDRequest::maxdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByEntityIDRequest.maxDegree)
  return _internal_maxdegree();
}
inline void FindPathByEntityIDRequest::_internal_set_maxdegree(int32_t value) {
  
  _impl_.maxdegree_ = value;
}
inline void FindPathByEntityIDRequest::set_maxdegree(int32_t value) {
  _internal_set_maxdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathByEntityIDRequest.maxDegree)
}

// -------------------------------------------------------------------

// FindPathByEntityIDResponse

// string result = 1;
inline void FindPathByEntityIDResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindPathByEntityIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByEntityIDResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathByEntityIDResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathByEntityIDResponse.result)
}
inline std::string* FindPathByEntityIDResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathByEntityIDResponse.result)
  return _s;
}
inline const std::string& FindPathByEntityIDResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindPathByEntityIDResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathByEntityIDResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathByEntityIDResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathByEntityIDResponse.result)
  return _impl_.result_.Release();
}
inline void FindPathByEntityIDResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathByEntityIDResponse.result)
}

// -------------------------------------------------------------------

// FindPathByEntityID_V2Request

// int64 entityID1 = 1;
inline void FindPathByEntityID_V2Request::clear_entityid1() {
  _impl_.entityid1_ = int64_t{0};
}
inline int64_t FindPathByEntityID_V2Request::_internal_entityid1() const {
  return _impl_.entityid1_;
}
inline int64_t FindPathByEntityID_V2Request::entityid1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByEntityID_V2Request.entityID1)
  return _internal_entityid1();
}
inline void FindPathByEntityID_V2Request::_internal_set_entityid1(int64_t value) {
  
  _impl_.entityid1_ = value;
}
inline void FindPathByEntityID_V2Request::set_entityid1(int64_t value) {
  _internal_set_entityid1(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathByEntityID_V2Request.entityID1)
}

// int64 entityID2 = 2;
inline void FindPathByEntityID_V2Request::clear_entityid2() {
  _impl_.entityid2_ = int64_t{0};
}
inline int64_t FindPathByEntityID_V2Request::_internal_entityid2() const {
  return _impl_.entityid2_;
}
inline int64_t FindPathByEntityID_V2Request::entityid2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByEntityID_V2Request.entityID2)
  return _internal_entityid2();
}
inline void FindPathByEntityID_V2Request::_internal_set_entityid2(int64_t value) {
  
  _impl_.entityid2_ = value;
}
inline void FindPathByEntityID_V2Request::set_entityid2(int64_t value) {
  _internal_set_entityid2(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathByEntityID_V2Request.entityID2)
}

// int32 maxDegree = 3;
inline void FindPathByEntityID_V2Request::clear_maxdegree() {
  _impl_.maxdegree_ = 0;
}
inline int32_t FindPathByEntityID_V2Request::_internal_maxdegree() const {
  return _impl_.maxdegree_;
}
inline int32_t FindPathByEntityID_V2Request::maxdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByEntityID_V2Request.maxDegree)
  return _internal_maxdegree();
}
inline void FindPathByEntityID_V2Request::_internal_set_maxdegree(int32_t value) {
  
  _impl_.maxdegree_ = value;
}
inline void FindPathByEntityID_V2Request::set_maxdegree(int32_t value) {
  _internal_set_maxdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathByEntityID_V2Request.maxDegree)
}

// int64 flags = 4;
inline void FindPathByEntityID_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t FindPathByEntityID_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t FindPathByEntityID_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByEntityID_V2Request.flags)
  return _internal_flags();
}
inline void FindPathByEntityID_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void FindPathByEntityID_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathByEntityID_V2Request.flags)
}

// -------------------------------------------------------------------

// FindPathByEntityID_V2Response

// string result = 1;
inline void FindPathByEntityID_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindPathByEntityID_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByEntityID_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathByEntityID_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathByEntityID_V2Response.result)
}
inline std::string* FindPathByEntityID_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathByEntityID_V2Response.result)
  return _s;
}
inline const std::string& FindPathByEntityID_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindPathByEntityID_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathByEntityID_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathByEntityID_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathByEntityID_V2Response.result)
  return _impl_.result_.Release();
}
inline void FindPathByEntityID_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathByEntityID_V2Response.result)
}

// -------------------------------------------------------------------

// FindPathByRecordIDRequest

// string dataSourceCode1 = 1;
inline void FindPathByRecordIDRequest::clear_datasourcecode1() {
  _impl_.datasourcecode1_.ClearToEmpty();
}
inline const std::string& FindPathByRecordIDRequest::datasourcecode1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByRecordIDRequest.dataSourceCode1)
  return _internal_datasourcecode1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathByRecordIDRequest::set_datasourcecode1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathByRecordIDRequest.dataSourceCode1)
}
inline std::string* FindPathByRecordIDRequest::mutable_datasourcecode1() {
  std::string* _s = _internal_mutable_datasourcecode1();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathByRecordIDRequest.dataSourceCode1)
  return _s;
}
inline const std::string& FindPathByRecordIDRequest::_internal_datasourcecode1() const {
  return _impl_.datasourcecode1_.Get();
}
inline void FindPathByRecordIDRequest::_internal_set_datasourcecode1(const std::string& value) {
  
  _impl_.datasourcecode1_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathByRecordIDRequest::_internal_mutable_datasourcecode1() {
  
  return _impl_.datasourcecode1_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathByRecordIDRequest::release_datasourcecode1() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathByRecordIDRequest.dataSourceCode1)
  return _impl_.datasourcecode1_.Release();
}
inline void FindPathByRecordIDRequest::set_allocated_datasourcecode1(std::string* datasourcecode1) {
  if (datasourcecode1 != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode1_.SetAllocated(datasourcecode1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode1_.IsDefault()) {
    _impl_.datasourcecode1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathByRecordIDRequest.dataSourceCode1)
}

// string recordID1 = 2;
inline void FindPathByRecordIDRequest::clear_recordid1() {
  _impl_.recordid1_.ClearToEmpty();
}
inline const std::string& FindPathByRecordIDRequest::recordid1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByRecordIDRequest.recordID1)
  return _internal_recordid1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathByRecordIDRequest::set_recordid1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathByRecordIDRequest.recordID1)
}
inline std::string* FindPathByRecordIDRequest::mutable_recordid1() {
  std::string* _s = _internal_mutable_recordid1();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathByRecordIDRequest.recordID1)
  return _s;
}
inline const std::string& FindPathByRecordIDRequest::_internal_recordid1() const {
  return _impl_.recordid1_.Get();
}
inline void FindPathByRecordIDRequest::_internal_set_recordid1(const std::string& value) {
  
  _impl_.recordid1_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathByRecordIDRequest::_internal_mutable_recordid1() {
  
  return _impl_.recordid1_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathByRecordIDRequest::release_recordid1() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathByRecordIDRequest.recordID1)
  return _impl_.recordid1_.Release();
}
inline void FindPathByRecordIDRequest::set_allocated_recordid1(std::string* recordid1) {
  if (recordid1 != nullptr) {
    
  } else {
    
  }
  _impl_.recordid1_.SetAllocated(recordid1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid1_.IsDefault()) {
    _impl_.recordid1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathByRecordIDRequest.recordID1)
}

// string dataSourceCode2 = 3;
inline void FindPathByRecordIDRequest::clear_datasourcecode2() {
  _impl_.datasourcecode2_.ClearToEmpty();
}
inline const std::string& FindPathByRecordIDRequest::datasourcecode2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByRecordIDRequest.dataSourceCode2)
  return _internal_datasourcecode2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathByRecordIDRequest::set_datasourcecode2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathByRecordIDRequest.dataSourceCode2)
}
inline std::string* FindPathByRecordIDRequest::mutable_datasourcecode2() {
  std::string* _s = _internal_mutable_datasourcecode2();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathByRecordIDRequest.dataSourceCode2)
  return _s;
}
inline const std::string& FindPathByRecordIDRequest::_internal_datasourcecode2() const {
  return _impl_.datasourcecode2_.Get();
}
inline void FindPathByRecordIDRequest::_internal_set_datasourcecode2(const std::string& value) {
  
  _impl_.datasourcecode2_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathByRecordIDRequest::_internal_mutable_datasourcecode2() {
  
  return _impl_.datasourcecode2_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathByRecordIDRequest::release_datasourcecode2() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathByRecordIDRequest.dataSourceCode2)
  return _impl_.datasourcecode2_.Release();
}
inline void FindPathByRecordIDRequest::set_allocated_datasourcecode2(std::string* datasourcecode2) {
  if (datasourcecode2 != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode2_.SetAllocated(datasourcecode2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode2_.IsDefault()) {
    _impl_.datasourcecode2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathByRecordIDRequest.dataSourceCode2)
}

// string recordID2 = 4;
inline void FindPathByRecordIDRequest::clear_recordid2() {
  _impl_.recordid2_.ClearToEmpty();
}
inline const std::string& FindPathByRecordIDRequest::recordid2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByRecordIDRequest.recordID2)
  return _internal_recordid2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathByRecordIDRequest::set_recordid2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathByRecordIDRequest.recordID2)
}
inline std::string* FindPathByRecordIDRequest::mutable_recordid2() {
  std::string* _s = _internal_mutable_recordid2();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathByRecordIDRequest.recordID2)
  return _s;
}
inline const std::string& FindPathByRecordIDRequest::_internal_recordid2() const {
  return _impl_.recordid2_.Get();
}
inline void FindPathByRecordIDRequest::_internal_set_recordid2(const std::string& value) {
  
  _impl_.recordid2_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathByRecordIDRequest::_internal_mutable_recordid2() {
  
  return _impl_.recordid2_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathByRecordIDRequest::release_recordid2() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathByRecordIDRequest.recordID2)
  return _impl_.recordid2_.Release();
}
inline void FindPathByRecordIDRequest::set_allocated_recordid2(std::string* recordid2) {
  if (recordid2 != nullptr) {
    
  } else {
    
  }
  _impl_.recordid2_.SetAllocated(recordid2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid2_.IsDefault()) {
    _impl_.recordid2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathByRecordIDRequest.recordID2)
}

// int32 maxDegree = 5;
inline void FindPathByRecordIDRequest::clear_maxdegree() {
  _impl_.maxdegree_ = 0;
}
inline int32_t FindPathByRecordIDRequest::_internal_maxdegree() const {
  return _impl_.maxdegree_;
}
inline int32_t FindPathByRecordIDRequest::maxdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByRecordIDRequest.maxDegree)
  return _internal_maxdegree();
}
inline void FindPathByRecordIDRequest::_internal_set_maxdegree(int32_t value) {
  
  _impl_.maxdegree_ = value;
}
inline void FindPathByRecordIDRequest::set_maxdegree(int32_t value) {
  _internal_set_maxdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathByRecordIDRequest.maxDegree)
}

// -------------------------------------------------------------------

// FindPathByRecordIDResponse

// string result = 1;
inline void FindPathByRecordIDResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindPathByRecordIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByRecordIDResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathByRecordIDResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathByRecordIDResponse.result)
}
inline std::string* FindPathByRecordIDResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathByRecordIDResponse.result)
  return _s;
}
inline const std::string& FindPathByRecordIDResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindPathByRecordIDResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathByRecordIDResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathByRecordIDResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathByRecordIDResponse.result)
  return _impl_.result_.Release();
}
inline void FindPathByRecordIDResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathByRecordIDResponse.result)
}

// -------------------------------------------------------------------

// FindPathByRecordID_V2Request

// string dataSourceCode1 = 1;
inline void FindPathByRecordID_V2Request::clear_datasourcecode1() {
  _impl_.datasourcecode1_.ClearToEmpty();
}
inline const std::string& FindPathByRecordID_V2Request::datasourcecode1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByRecordID_V2Request.dataSourceCode1)
  return _internal_datasourcecode1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathByRecordID_V2Request::set_datasourcecode1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathByRecordID_V2Request.dataSourceCode1)
}
inline std::string* FindPathByRecordID_V2Request::mutable_datasourcecode1() {
  std::string* _s = _internal_mutable_datasourcecode1();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathByRecordID_V2Request.dataSourceCode1)
  return _s;
}
inline const std::string& FindPathByRecordID_V2Request::_internal_datasourcecode1() const {
  return _impl_.datasourcecode1_.Get();
}
inline void FindPathByRecordID_V2Request::_internal_set_datasourcecode1(const std::string& value) {
  
  _impl_.datasourcecode1_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathByRecordID_V2Request::_internal_mutable_datasourcecode1() {
  
  return _impl_.datasourcecode1_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathByRecordID_V2Request::release_datasourcecode1() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathByRecordID_V2Request.dataSourceCode1)
  return _impl_.datasourcecode1_.Release();
}
inline void FindPathByRecordID_V2Request::set_allocated_datasourcecode1(std::string* datasourcecode1) {
  if (datasourcecode1 != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode1_.SetAllocated(datasourcecode1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode1_.IsDefault()) {
    _impl_.datasourcecode1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathByRecordID_V2Request.dataSourceCode1)
}

// string recordID1 = 2;
inline void FindPathByRecordID_V2Request::clear_recordid1() {
  _impl_.recordid1_.ClearToEmpty();
}
inline const std::string& FindPathByRecordID_V2Request::recordid1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByRecordID_V2Request.recordID1)
  return _internal_recordid1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathByRecordID_V2Request::set_recordid1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathByRecordID_V2Request.recordID1)
}
inline std::string* FindPathByRecordID_V2Request::mutable_recordid1() {
  std::string* _s = _internal_mutable_recordid1();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathByRecordID_V2Request.recordID1)
  return _s;
}
inline const std::string& FindPathByRecordID_V2Request::_internal_recordid1() const {
  return _impl_.recordid1_.Get();
}
inline void FindPathByRecordID_V2Request::_internal_set_recordid1(const std::string& value) {
  
  _impl_.recordid1_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathByRecordID_V2Request::_internal_mutable_recordid1() {
  
  return _impl_.recordid1_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathByRecordID_V2Request::release_recordid1() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathByRecordID_V2Request.recordID1)
  return _impl_.recordid1_.Release();
}
inline void FindPathByRecordID_V2Request::set_allocated_recordid1(std::string* recordid1) {
  if (recordid1 != nullptr) {
    
  } else {
    
  }
  _impl_.recordid1_.SetAllocated(recordid1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid1_.IsDefault()) {
    _impl_.recordid1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathByRecordID_V2Request.recordID1)
}

// string dataSourceCode2 = 3;
inline void FindPathByRecordID_V2Request::clear_datasourcecode2() {
  _impl_.datasourcecode2_.ClearToEmpty();
}
inline const std::string& FindPathByRecordID_V2Request::datasourcecode2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByRecordID_V2Request.dataSourceCode2)
  return _internal_datasourcecode2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathByRecordID_V2Request::set_datasourcecode2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathByRecordID_V2Request.dataSourceCode2)
}
inline std::string* FindPathByRecordID_V2Request::mutable_datasourcecode2() {
  std::string* _s = _internal_mutable_datasourcecode2();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathByRecordID_V2Request.dataSourceCode2)
  return _s;
}
inline const std::string& FindPathByRecordID_V2Request::_internal_datasourcecode2() const {
  return _impl_.datasourcecode2_.Get();
}
inline void FindPathByRecordID_V2Request::_internal_set_datasourcecode2(const std::string& value) {
  
  _impl_.datasourcecode2_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathByRecordID_V2Request::_internal_mutable_datasourcecode2() {
  
  return _impl_.datasourcecode2_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathByRecordID_V2Request::release_datasourcecode2() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathByRecordID_V2Request.dataSourceCode2)
  return _impl_.datasourcecode2_.Release();
}
inline void FindPathByRecordID_V2Request::set_allocated_datasourcecode2(std::string* datasourcecode2) {
  if (datasourcecode2 != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode2_.SetAllocated(datasourcecode2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode2_.IsDefault()) {
    _impl_.datasourcecode2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathByRecordID_V2Request.dataSourceCode2)
}

// string recordID2 = 4;
inline void FindPathByRecordID_V2Request::clear_recordid2() {
  _impl_.recordid2_.ClearToEmpty();
}
inline const std::string& FindPathByRecordID_V2Request::recordid2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByRecordID_V2Request.recordID2)
  return _internal_recordid2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathByRecordID_V2Request::set_recordid2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathByRecordID_V2Request.recordID2)
}
inline std::string* FindPathByRecordID_V2Request::mutable_recordid2() {
  std::string* _s = _internal_mutable_recordid2();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathByRecordID_V2Request.recordID2)
  return _s;
}
inline const std::string& FindPathByRecordID_V2Request::_internal_recordid2() const {
  return _impl_.recordid2_.Get();
}
inline void FindPathByRecordID_V2Request::_internal_set_recordid2(const std::string& value) {
  
  _impl_.recordid2_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathByRecordID_V2Request::_internal_mutable_recordid2() {
  
  return _impl_.recordid2_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathByRecordID_V2Request::release_recordid2() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathByRecordID_V2Request.recordID2)
  return _impl_.recordid2_.Release();
}
inline void FindPathByRecordID_V2Request::set_allocated_recordid2(std::string* recordid2) {
  if (recordid2 != nullptr) {
    
  } else {
    
  }
  _impl_.recordid2_.SetAllocated(recordid2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid2_.IsDefault()) {
    _impl_.recordid2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathByRecordID_V2Request.recordID2)
}

// int32 maxDegree = 5;
inline void FindPathByRecordID_V2Request::clear_maxdegree() {
  _impl_.maxdegree_ = 0;
}
inline int32_t FindPathByRecordID_V2Request::_internal_maxdegree() const {
  return _impl_.maxdegree_;
}
inline int32_t FindPathByRecordID_V2Request::maxdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByRecordID_V2Request.maxDegree)
  return _internal_maxdegree();
}
inline void FindPathByRecordID_V2Request::_internal_set_maxdegree(int32_t value) {
  
  _impl_.maxdegree_ = value;
}
inline void FindPathByRecordID_V2Request::set_maxdegree(int32_t value) {
  _internal_set_maxdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathByRecordID_V2Request.maxDegree)
}

// int64 flags = 6;
inline void FindPathByRecordID_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t FindPathByRecordID_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t FindPathByRecordID_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByRecordID_V2Request.flags)
  return _internal_flags();
}
inline void FindPathByRecordID_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void FindPathByRecordID_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathByRecordID_V2Request.flags)
}

// -------------------------------------------------------------------

// FindPathByRecordID_V2Response

// string result = 1;
inline void FindPathByRecordID_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindPathByRecordID_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathByRecordID_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathByRecordID_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathByRecordID_V2Response.result)
}
inline std::string* FindPathByRecordID_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathByRecordID_V2Response.result)
  return _s;
}
inline const std::string& FindPathByRecordID_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindPathByRecordID_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathByRecordID_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathByRecordID_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathByRecordID_V2Response.result)
  return _impl_.result_.Release();
}
inline void FindPathByRecordID_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathByRecordID_V2Response.result)
}

// -------------------------------------------------------------------

// FindPathExcludingByEntityIDRequest

// int64 entityID1 = 1;
inline void FindPathExcludingByEntityIDRequest::clear_entityid1() {
  _impl_.entityid1_ = int64_t{0};
}
inline int64_t FindPathExcludingByEntityIDRequest::_internal_entityid1() const {
  return _impl_.entityid1_;
}
inline int64_t FindPathExcludingByEntityIDRequest::entityid1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByEntityIDRequest.entityID1)
  return _internal_entityid1();
}
inline void FindPathExcludingByEntityIDRequest::_internal_set_entityid1(int64_t value) {
  
  _impl_.entityid1_ = value;
}
inline void FindPathExcludingByEntityIDRequest::set_entityid1(int64_t value) {
  _internal_set_entityid1(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByEntityIDRequest.entityID1)
}

// int64 entityID2 = 2;
inline void FindPathExcludingByEntityIDRequest::clear_entityid2() {
  _impl_.entityid2_ = int64_t{0};
}
inline int64_t FindPathExcludingByEntityIDRequest::_internal_entityid2() const {
  return _impl_.entityid2_;
}
inline int64_t FindPathExcludingByEntityIDRequest::entityid2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByEntityIDRequest.entityID2)
  return _internal_entityid2();
}
inline void FindPathExcludingByEntityIDRequest::_internal_set_entityid2(int64_t value) {
  
  _impl_.entityid2_ = value;
}
inline void FindPathExcludingByEntityIDRequest::set_entityid2(int64_t value) {
  _internal_set_entityid2(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByEntityIDRequest.entityID2)
}

// int32 maxDegree = 3;
inline void FindPathExcludingByEntityIDRequest::clear_maxdegree() {
  _impl_.maxdegree_ = 0;
}
inline int32_t FindPathExcludingByEntityIDRequest::_internal_maxdegree() const {
  return _impl_.maxdegree_;
}
inline int32_t FindPathExcludingByEntityIDRequest::maxdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByEntityIDRequest.maxDegree)
  return _internal_maxdegree();
}
inline void FindPathExcludingByEntityIDRequest::_internal_set_maxdegree(int32_t value) {
  
  _impl_.maxdegree_ = value;
}
inline void FindPathExcludingByEntityIDRequest::set_maxdegree(int32_t value) {
  _internal_set_maxdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByEntityIDRequest.maxDegree)
}

// string excludedEntities = 4;
inline void FindPathExcludingByEntityIDRequest::clear_excludedentities() {
  _impl_.excludedentities_.ClearToEmpty();
}
inline const std::string& FindPathExcludingByEntityIDRequest::excludedentities() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByEntityIDRequest.excludedEntities)
  return _internal_excludedentities();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathExcludingByEntityIDRequest::set_excludedentities(ArgT0&& arg0, ArgT... args) {
 
 _impl_.excludedentities_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByEntityIDRequest.excludedEntities)
}
inline std::string* FindPathExcludingByEntityIDRequest::mutable_excludedentities() {
  std::string* _s = _internal_mutable_excludedentities();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathExcludingByEntityIDRequest.excludedEntities)
  return _s;
}
inline const std::string& FindPathExcludingByEntityIDRequest::_internal_excludedentities() const {
  return _impl_.excludedentities_.Get();
}
inline void FindPathExcludingByEntityIDRequest::_internal_set_excludedentities(const std::string& value) {
  
  _impl_.excludedentities_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathExcludingByEntityIDRequest::_internal_mutable_excludedentities() {
  
  return _impl_.excludedentities_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathExcludingByEntityIDRequest::release_excludedentities() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathExcludingByEntityIDRequest.excludedEntities)
  return _impl_.excludedentities_.Release();
}
inline void FindPathExcludingByEntityIDRequest::set_allocated_excludedentities(std::string* excludedentities) {
  if (excludedentities != nullptr) {
    
  } else {
    
  }
  _impl_.excludedentities_.SetAllocated(excludedentities, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.excludedentities_.IsDefault()) {
    _impl_.excludedentities_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathExcludingByEntityIDRequest.excludedEntities)
}

// -------------------------------------------------------------------

// FindPathExcludingByEntityIDResponse

// string result = 1;
inline void FindPathExcludingByEntityIDResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindPathExcludingByEntityIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByEntityIDResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathExcludingByEntityIDResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByEntityIDResponse.result)
}
inline std::string* FindPathExcludingByEntityIDResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathExcludingByEntityIDResponse.result)
  return _s;
}
inline const std::string& FindPathExcludingByEntityIDResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindPathExcludingByEntityIDResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathExcludingByEntityIDResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathExcludingByEntityIDResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathExcludingByEntityIDResponse.result)
  return _impl_.result_.Release();
}
inline void FindPathExcludingByEntityIDResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathExcludingByEntityIDResponse.result)
}

// -------------------------------------------------------------------

// FindPathExcludingByEntityID_V2Request

// int64 entityID1 = 1;
inline void FindPathExcludingByEntityID_V2Request::clear_entityid1() {
  _impl_.entityid1_ = int64_t{0};
}
inline int64_t FindPathExcludingByEntityID_V2Request::_internal_entityid1() const {
  return _impl_.entityid1_;
}
inline int64_t FindPathExcludingByEntityID_V2Request::entityid1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByEntityID_V2Request.entityID1)
  return _internal_entityid1();
}
inline void FindPathExcludingByEntityID_V2Request::_internal_set_entityid1(int64_t value) {
  
  _impl_.entityid1_ = value;
}
inline void FindPathExcludingByEntityID_V2Request::set_entityid1(int64_t value) {
  _internal_set_entityid1(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByEntityID_V2Request.entityID1)
}

// int64 entityID2 = 2;
inline void FindPathExcludingByEntityID_V2Request::clear_entityid2() {
  _impl_.entityid2_ = int64_t{0};
}
inline int64_t FindPathExcludingByEntityID_V2Request::_internal_entityid2() const {
  return _impl_.entityid2_;
}
inline int64_t FindPathExcludingByEntityID_V2Request::entityid2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByEntityID_V2Request.entityID2)
  return _internal_entityid2();
}
inline void FindPathExcludingByEntityID_V2Request::_internal_set_entityid2(int64_t value) {
  
  _impl_.entityid2_ = value;
}
inline void FindPathExcludingByEntityID_V2Request::set_entityid2(int64_t value) {
  _internal_set_entityid2(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByEntityID_V2Request.entityID2)
}

// int32 maxDegree = 3;
inline void FindPathExcludingByEntityID_V2Request::clear_maxdegree() {
  _impl_.maxdegree_ = 0;
}
inline int32_t FindPathExcludingByEntityID_V2Request::_internal_maxdegree() const {
  return _impl_.maxdegree_;
}
inline int32_t FindPathExcludingByEntityID_V2Request::maxdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByEntityID_V2Request.maxDegree)
  return _internal_maxdegree();
}
inline void FindPathExcludingByEntityID_V2Request::_internal_set_maxdegree(int32_t value) {
  
  _impl_.maxdegree_ = value;
}
inline void FindPathExcludingByEntityID_V2Request::set_maxdegree(int32_t value) {
  _internal_set_maxdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByEntityID_V2Request.maxDegree)
}

// string excludedEntities = 4;
inline void FindPathExcludingByEntityID_V2Request::clear_excludedentities() {
  _impl_.excludedentities_.ClearToEmpty();
}
inline const std::string& FindPathExcludingByEntityID_V2Request::excludedentities() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByEntityID_V2Request.excludedEntities)
  return _internal_excludedentities();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathExcludingByEntityID_V2Request::set_excludedentities(ArgT0&& arg0, ArgT... args) {
 
 _impl_.excludedentities_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByEntityID_V2Request.excludedEntities)
}
inline std::string* FindPathExcludingByEntityID_V2Request::mutable_excludedentities() {
  std::string* _s = _internal_mutable_excludedentities();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathExcludingByEntityID_V2Request.excludedEntities)
  return _s;
}
inline const std::string& FindPathExcludingByEntityID_V2Request::_internal_excludedentities() const {
  return _impl_.excludedentities_.Get();
}
inline void FindPathExcludingByEntityID_V2Request::_internal_set_excludedentities(const std::string& value) {
  
  _impl_.excludedentities_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathExcludingByEntityID_V2Request::_internal_mutable_excludedentities() {
  
  return _impl_.excludedentities_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathExcludingByEntityID_V2Request::release_excludedentities() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathExcludingByEntityID_V2Request.excludedEntities)
  return _impl_.excludedentities_.Release();
}
inline void FindPathExcludingByEntityID_V2Request::set_allocated_excludedentities(std::string* excludedentities) {
  if (excludedentities != nullptr) {
    
  } else {
    
  }
  _impl_.excludedentities_.SetAllocated(excludedentities, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.excludedentities_.IsDefault()) {
    _impl_.excludedentities_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathExcludingByEntityID_V2Request.excludedEntities)
}

// int64 flags = 5;
inline void FindPathExcludingByEntityID_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t FindPathExcludingByEntityID_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t FindPathExcludingByEntityID_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByEntityID_V2Request.flags)
  return _internal_flags();
}
inline void FindPathExcludingByEntityID_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void FindPathExcludingByEntityID_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByEntityID_V2Request.flags)
}

// -------------------------------------------------------------------

// FindPathExcludingByEntityID_V2Response

// string result = 1;
inline void FindPathExcludingByEntityID_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindPathExcludingByEntityID_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByEntityID_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathExcludingByEntityID_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByEntityID_V2Response.result)
}
inline std::string* FindPathExcludingByEntityID_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathExcludingByEntityID_V2Response.result)
  return _s;
}
inline const std::string& FindPathExcludingByEntityID_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindPathExcludingByEntityID_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathExcludingByEntityID_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathExcludingByEntityID_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathExcludingByEntityID_V2Response.result)
  return _impl_.result_.Release();
}
inline void FindPathExcludingByEntityID_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathExcludingByEntityID_V2Response.result)
}

// -------------------------------------------------------------------

// FindPathExcludingByRecordIDRequest

// string dataSourceCode1 = 1;
inline void FindPathExcludingByRecordIDRequest::clear_datasourcecode1() {
  _impl_.datasourcecode1_.ClearToEmpty();
}
inline const std::string& FindPathExcludingByRecordIDRequest::datasourcecode1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByRecordIDRequest.dataSourceCode1)
  return _internal_datasourcecode1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathExcludingByRecordIDRequest::set_datasourcecode1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByRecordIDRequest.dataSourceCode1)
}
inline std::string* FindPathExcludingByRecordIDRequest::mutable_datasourcecode1() {
  std::string* _s = _internal_mutable_datasourcecode1();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathExcludingByRecordIDRequest.dataSourceCode1)
  return _s;
}
inline const std::string& FindPathExcludingByRecordIDRequest::_internal_datasourcecode1() const {
  return _impl_.datasourcecode1_.Get();
}
inline void FindPathExcludingByRecordIDRequest::_internal_set_datasourcecode1(const std::string& value) {
  
  _impl_.datasourcecode1_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordIDRequest::_internal_mutable_datasourcecode1() {
  
  return _impl_.datasourcecode1_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordIDRequest::release_datasourcecode1() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathExcludingByRecordIDRequest.dataSourceCode1)
  return _impl_.datasourcecode1_.Release();
}
inline void FindPathExcludingByRecordIDRequest::set_allocated_datasourcecode1(std::string* datasourcecode1) {
  if (datasourcecode1 != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode1_.SetAllocated(datasourcecode1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode1_.IsDefault()) {
    _impl_.datasourcecode1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathExcludingByRecordIDRequest.dataSourceCode1)
}

// string recordID1 = 2;
inline void FindPathExcludingByRecordIDRequest::clear_recordid1() {
  _impl_.recordid1_.ClearToEmpty();
}
inline const std::string& FindPathExcludingByRecordIDRequest::recordid1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByRecordIDRequest.recordID1)
  return _internal_recordid1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathExcludingByRecordIDRequest::set_recordid1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByRecordIDRequest.recordID1)
}
inline std::string* FindPathExcludingByRecordIDRequest::mutable_recordid1() {
  std::string* _s = _internal_mutable_recordid1();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathExcludingByRecordIDRequest.recordID1)
  return _s;
}
inline const std::string& FindPathExcludingByRecordIDRequest::_internal_recordid1() const {
  return _impl_.recordid1_.Get();
}
inline void FindPathExcludingByRecordIDRequest::_internal_set_recordid1(const std::string& value) {
  
  _impl_.recordid1_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordIDRequest::_internal_mutable_recordid1() {
  
  return _impl_.recordid1_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordIDRequest::release_recordid1() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathExcludingByRecordIDRequest.recordID1)
  return _impl_.recordid1_.Release();
}
inline void FindPathExcludingByRecordIDRequest::set_allocated_recordid1(std::string* recordid1) {
  if (recordid1 != nullptr) {
    
  } else {
    
  }
  _impl_.recordid1_.SetAllocated(recordid1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid1_.IsDefault()) {
    _impl_.recordid1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathExcludingByRecordIDRequest.recordID1)
}

// string dataSourceCode2 = 3;
inline void FindPathExcludingByRecordIDRequest::clear_datasourcecode2() {
  _impl_.datasourcecode2_.ClearToEmpty();
}
inline const std::string& FindPathExcludingByRecordIDRequest::datasourcecode2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByRecordIDRequest.dataSourceCode2)
  return _internal_datasourcecode2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathExcludingByRecordIDRequest::set_datasourcecode2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByRecordIDRequest.dataSourceCode2)
}
inline std::string* FindPathExcludingByRecordIDRequest::mutable_datasourcecode2() {
  std::string* _s = _internal_mutable_datasourcecode2();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathExcludingByRecordIDRequest.dataSourceCode2)
  return _s;
}
inline const std::string& FindPathExcludingByRecordIDRequest::_internal_datasourcecode2() const {
  return _impl_.datasourcecode2_.Get();
}
inline void FindPathExcludingByRecordIDRequest::_internal_set_datasourcecode2(const std::string& value) {
  
  _impl_.datasourcecode2_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordIDRequest::_internal_mutable_datasourcecode2() {
  
  return _impl_.datasourcecode2_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordIDRequest::release_datasourcecode2() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathExcludingByRecordIDRequest.dataSourceCode2)
  return _impl_.datasourcecode2_.Release();
}
inline void FindPathExcludingByRecordIDRequest::set_allocated_datasourcecode2(std::string* datasourcecode2) {
  if (datasourcecode2 != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode2_.SetAllocated(datasourcecode2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode2_.IsDefault()) {
    _impl_.datasourcecode2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathExcludingByRecordIDRequest.dataSourceCode2)
}

// string recordID2 = 4;
inline void FindPathExcludingByRecordIDRequest::clear_recordid2() {
  _impl_.recordid2_.ClearToEmpty();
}
inline const std::string& FindPathExcludingByRecordIDRequest::recordid2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByRecordIDRequest.recordID2)
  return _internal_recordid2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathExcludingByRecordIDRequest::set_recordid2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByRecordIDRequest.recordID2)
}
inline std::string* FindPathExcludingByRecordIDRequest::mutable_recordid2() {
  std::string* _s = _internal_mutable_recordid2();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathExcludingByRecordIDRequest.recordID2)
  return _s;
}
inline const std::string& FindPathExcludingByRecordIDRequest::_internal_recordid2() const {
  return _impl_.recordid2_.Get();
}
inline void FindPathExcludingByRecordIDRequest::_internal_set_recordid2(const std::string& value) {
  
  _impl_.recordid2_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordIDRequest::_internal_mutable_recordid2() {
  
  return _impl_.recordid2_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordIDRequest::release_recordid2() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathExcludingByRecordIDRequest.recordID2)
  return _impl_.recordid2_.Release();
}
inline void FindPathExcludingByRecordIDRequest::set_allocated_recordid2(std::string* recordid2) {
  if (recordid2 != nullptr) {
    
  } else {
    
  }
  _impl_.recordid2_.SetAllocated(recordid2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid2_.IsDefault()) {
    _impl_.recordid2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathExcludingByRecordIDRequest.recordID2)
}

// int32 maxDegree = 5;
inline void FindPathExcludingByRecordIDRequest::clear_maxdegree() {
  _impl_.maxdegree_ = 0;
}
inline int32_t FindPathExcludingByRecordIDRequest::_internal_maxdegree() const {
  return _impl_.maxdegree_;
}
inline int32_t FindPathExcludingByRecordIDRequest::maxdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByRecordIDRequest.maxDegree)
  return _internal_maxdegree();
}
inline void FindPathExcludingByRecordIDRequest::_internal_set_maxdegree(int32_t value) {
  
  _impl_.maxdegree_ = value;
}
inline void FindPathExcludingByRecordIDRequest::set_maxdegree(int32_t value) {
  _internal_set_maxdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByRecordIDRequest.maxDegree)
}

// string excludedRecords = 6;
inline void FindPathExcludingByRecordIDRequest::clear_excludedrecords() {
  _impl_.excludedrecords_.ClearToEmpty();
}
inline const std::string& FindPathExcludingByRecordIDRequest::excludedrecords() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByRecordIDRequest.excludedRecords)
  return _internal_excludedrecords();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathExcludingByRecordIDRequest::set_excludedrecords(ArgT0&& arg0, ArgT... args) {
 
 _impl_.excludedrecords_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByRecordIDRequest.excludedRecords)
}
inline std::string* FindPathExcludingByRecordIDRequest::mutable_excludedrecords() {
  std::string* _s = _internal_mutable_excludedrecords();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathExcludingByRecordIDRequest.excludedRecords)
  return _s;
}
inline const std::string& FindPathExcludingByRecordIDRequest::_internal_excludedrecords() const {
  return _impl_.excludedrecords_.Get();
}
inline void FindPathExcludingByRecordIDRequest::_internal_set_excludedrecords(const std::string& value) {
  
  _impl_.excludedrecords_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordIDRequest::_internal_mutable_excludedrecords() {
  
  return _impl_.excludedrecords_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordIDRequest::release_excludedrecords() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathExcludingByRecordIDRequest.excludedRecords)
  return _impl_.excludedrecords_.Release();
}
inline void FindPathExcludingByRecordIDRequest::set_allocated_excludedrecords(std::string* excludedrecords) {
  if (excludedrecords != nullptr) {
    
  } else {
    
  }
  _impl_.excludedrecords_.SetAllocated(excludedrecords, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.excludedrecords_.IsDefault()) {
    _impl_.excludedrecords_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathExcludingByRecordIDRequest.excludedRecords)
}

// -------------------------------------------------------------------

// FindPathExcludingByRecordIDResponse

// string result = 1;
inline void FindPathExcludingByRecordIDResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindPathExcludingByRecordIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByRecordIDResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathExcludingByRecordIDResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByRecordIDResponse.result)
}
inline std::string* FindPathExcludingByRecordIDResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathExcludingByRecordIDResponse.result)
  return _s;
}
inline const std::string& FindPathExcludingByRecordIDResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindPathExcludingByRecordIDResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordIDResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordIDResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathExcludingByRecordIDResponse.result)
  return _impl_.result_.Release();
}
inline void FindPathExcludingByRecordIDResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathExcludingByRecordIDResponse.result)
}

// -------------------------------------------------------------------

// FindPathExcludingByRecordID_V2Request

// string dataSourceCode1 = 1;
inline void FindPathExcludingByRecordID_V2Request::clear_datasourcecode1() {
  _impl_.datasourcecode1_.ClearToEmpty();
}
inline const std::string& FindPathExcludingByRecordID_V2Request::datasourcecode1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByRecordID_V2Request.dataSourceCode1)
  return _internal_datasourcecode1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathExcludingByRecordID_V2Request::set_datasourcecode1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByRecordID_V2Request.dataSourceCode1)
}
inline std::string* FindPathExcludingByRecordID_V2Request::mutable_datasourcecode1() {
  std::string* _s = _internal_mutable_datasourcecode1();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathExcludingByRecordID_V2Request.dataSourceCode1)
  return _s;
}
inline const std::string& FindPathExcludingByRecordID_V2Request::_internal_datasourcecode1() const {
  return _impl_.datasourcecode1_.Get();
}
inline void FindPathExcludingByRecordID_V2Request::_internal_set_datasourcecode1(const std::string& value) {
  
  _impl_.datasourcecode1_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordID_V2Request::_internal_mutable_datasourcecode1() {
  
  return _impl_.datasourcecode1_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordID_V2Request::release_datasourcecode1() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathExcludingByRecordID_V2Request.dataSourceCode1)
  return _impl_.datasourcecode1_.Release();
}
inline void FindPathExcludingByRecordID_V2Request::set_allocated_datasourcecode1(std::string* datasourcecode1) {
  if (datasourcecode1 != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode1_.SetAllocated(datasourcecode1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode1_.IsDefault()) {
    _impl_.datasourcecode1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathExcludingByRecordID_V2Request.dataSourceCode1)
}

// string recordID1 = 2;
inline void FindPathExcludingByRecordID_V2Request::clear_recordid1() {
  _impl_.recordid1_.ClearToEmpty();
}
inline const std::string& FindPathExcludingByRecordID_V2Request::recordid1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByRecordID_V2Request.recordID1)
  return _internal_recordid1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathExcludingByRecordID_V2Request::set_recordid1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByRecordID_V2Request.recordID1)
}
inline std::string* FindPathExcludingByRecordID_V2Request::mutable_recordid1() {
  std::string* _s = _internal_mutable_recordid1();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathExcludingByRecordID_V2Request.recordID1)
  return _s;
}
inline const std::string& FindPathExcludingByRecordID_V2Request::_internal_recordid1() const {
  return _impl_.recordid1_.Get();
}
inline void FindPathExcludingByRecordID_V2Request::_internal_set_recordid1(const std::string& value) {
  
  _impl_.recordid1_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordID_V2Request::_internal_mutable_recordid1() {
  
  return _impl_.recordid1_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordID_V2Request::release_recordid1() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathExcludingByRecordID_V2Request.recordID1)
  return _impl_.recordid1_.Release();
}
inline void FindPathExcludingByRecordID_V2Request::set_allocated_recordid1(std::string* recordid1) {
  if (recordid1 != nullptr) {
    
  } else {
    
  }
  _impl_.recordid1_.SetAllocated(recordid1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid1_.IsDefault()) {
    _impl_.recordid1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathExcludingByRecordID_V2Request.recordID1)
}

// string dataSourceCode2 = 3;
inline void FindPathExcludingByRecordID_V2Request::clear_datasourcecode2() {
  _impl_.datasourcecode2_.ClearToEmpty();
}
inline const std::string& FindPathExcludingByRecordID_V2Request::datasourcecode2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByRecordID_V2Request.dataSourceCode2)
  return _internal_datasourcecode2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathExcludingByRecordID_V2Request::set_datasourcecode2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByRecordID_V2Request.dataSourceCode2)
}
inline std::string* FindPathExcludingByRecordID_V2Request::mutable_datasourcecode2() {
  std::string* _s = _internal_mutable_datasourcecode2();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathExcludingByRecordID_V2Request.dataSourceCode2)
  return _s;
}
inline const std::string& FindPathExcludingByRecordID_V2Request::_internal_datasourcecode2() const {
  return _impl_.datasourcecode2_.Get();
}
inline void FindPathExcludingByRecordID_V2Request::_internal_set_datasourcecode2(const std::string& value) {
  
  _impl_.datasourcecode2_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordID_V2Request::_internal_mutable_datasourcecode2() {
  
  return _impl_.datasourcecode2_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordID_V2Request::release_datasourcecode2() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathExcludingByRecordID_V2Request.dataSourceCode2)
  return _impl_.datasourcecode2_.Release();
}
inline void FindPathExcludingByRecordID_V2Request::set_allocated_datasourcecode2(std::string* datasourcecode2) {
  if (datasourcecode2 != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode2_.SetAllocated(datasourcecode2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode2_.IsDefault()) {
    _impl_.datasourcecode2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathExcludingByRecordID_V2Request.dataSourceCode2)
}

// string recordID2 = 4;
inline void FindPathExcludingByRecordID_V2Request::clear_recordid2() {
  _impl_.recordid2_.ClearToEmpty();
}
inline const std::string& FindPathExcludingByRecordID_V2Request::recordid2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByRecordID_V2Request.recordID2)
  return _internal_recordid2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathExcludingByRecordID_V2Request::set_recordid2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByRecordID_V2Request.recordID2)
}
inline std::string* FindPathExcludingByRecordID_V2Request::mutable_recordid2() {
  std::string* _s = _internal_mutable_recordid2();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathExcludingByRecordID_V2Request.recordID2)
  return _s;
}
inline const std::string& FindPathExcludingByRecordID_V2Request::_internal_recordid2() const {
  return _impl_.recordid2_.Get();
}
inline void FindPathExcludingByRecordID_V2Request::_internal_set_recordid2(const std::string& value) {
  
  _impl_.recordid2_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordID_V2Request::_internal_mutable_recordid2() {
  
  return _impl_.recordid2_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordID_V2Request::release_recordid2() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathExcludingByRecordID_V2Request.recordID2)
  return _impl_.recordid2_.Release();
}
inline void FindPathExcludingByRecordID_V2Request::set_allocated_recordid2(std::string* recordid2) {
  if (recordid2 != nullptr) {
    
  } else {
    
  }
  _impl_.recordid2_.SetAllocated(recordid2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid2_.IsDefault()) {
    _impl_.recordid2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathExcludingByRecordID_V2Request.recordID2)
}

// int32 maxDegree = 5;
inline void FindPathExcludingByRecordID_V2Request::clear_maxdegree() {
  _impl_.maxdegree_ = 0;
}
inline int32_t FindPathExcludingByRecordID_V2Request::_internal_maxdegree() const {
  return _impl_.maxdegree_;
}
inline int32_t FindPathExcludingByRecordID_V2Request::maxdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByRecordID_V2Request.maxDegree)
  return _internal_maxdegree();
}
inline void FindPathExcludingByRecordID_V2Request::_internal_set_maxdegree(int32_t value) {
  
  _impl_.maxdegree_ = value;
}
inline void FindPathExcludingByRecordID_V2Request::set_maxdegree(int32_t value) {
  _internal_set_maxdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByRecordID_V2Request.maxDegree)
}

// string excludedRecords = 6;
inline void FindPathExcludingByRecordID_V2Request::clear_excludedrecords() {
  _impl_.excludedrecords_.ClearToEmpty();
}
inline const std::string& FindPathExcludingByRecordID_V2Request::excludedrecords() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByRecordID_V2Request.excludedRecords)
  return _internal_excludedrecords();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathExcludingByRecordID_V2Request::set_excludedrecords(ArgT0&& arg0, ArgT... args) {
 
 _impl_.excludedrecords_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByRecordID_V2Request.excludedRecords)
}
inline std::string* FindPathExcludingByRecordID_V2Request::mutable_excludedrecords() {
  std::string* _s = _internal_mutable_excludedrecords();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathExcludingByRecordID_V2Request.excludedRecords)
  return _s;
}
inline const std::string& FindPathExcludingByRecordID_V2Request::_internal_excludedrecords() const {
  return _impl_.excludedrecords_.Get();
}
inline void FindPathExcludingByRecordID_V2Request::_internal_set_excludedrecords(const std::string& value) {
  
  _impl_.excludedrecords_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordID_V2Request::_internal_mutable_excludedrecords() {
  
  return _impl_.excludedrecords_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordID_V2Request::release_excludedrecords() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathExcludingByRecordID_V2Request.excludedRecords)
  return _impl_.excludedrecords_.Release();
}
inline void FindPathExcludingByRecordID_V2Request::set_allocated_excludedrecords(std::string* excludedrecords) {
  if (excludedrecords != nullptr) {
    
  } else {
    
  }
  _impl_.excludedrecords_.SetAllocated(excludedrecords, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.excludedrecords_.IsDefault()) {
    _impl_.excludedrecords_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathExcludingByRecordID_V2Request.excludedRecords)
}

// int64 flags = 7;
inline void FindPathExcludingByRecordID_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t FindPathExcludingByRecordID_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t FindPathExcludingByRecordID_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByRecordID_V2Request.flags)
  return _internal_flags();
}
inline void FindPathExcludingByRecordID_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void FindPathExcludingByRecordID_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByRecordID_V2Request.flags)
}

// -------------------------------------------------------------------

// FindPathExcludingByRecordID_V2Response

// string result = 1;
inline void FindPathExcludingByRecordID_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindPathExcludingByRecordID_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathExcludingByRecordID_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathExcludingByRecordID_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathExcludingByRecordID_V2Response.result)
}
inline std::string* FindPathExcludingByRecordID_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathExcludingByRecordID_V2Response.result)
  return _s;
}
inline const std::string& FindPathExcludingByRecordID_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindPathExcludingByRecordID_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordID_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathExcludingByRecordID_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathExcludingByRecordID_V2Response.result)
  return _impl_.result_.Release();
}
inline void FindPathExcludingByRecordID_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathExcludingByRecordID_V2Response.result)
}

// -------------------------------------------------------------------

// FindPathIncludingSourceByEntityIDRequest

// int64 entityID1 = 1;
inline void FindPathIncludingSourceByEntityIDRequest::clear_entityid1() {
  _impl_.entityid1_ = int64_t{0};
}
inline int64_t FindPathIncludingSourceByEntityIDRequest::_internal_entityid1() const {
  return _impl_.entityid1_;
}
inline int64_t FindPathIncludingSourceByEntityIDRequest::entityid1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByEntityIDRequest.entityID1)
  return _internal_entityid1();
}
inline void FindPathIncludingSourceByEntityIDRequest::_internal_set_entityid1(int64_t value) {
  
  _impl_.entityid1_ = value;
}
inline void FindPathIncludingSourceByEntityIDRequest::set_entityid1(int64_t value) {
  _internal_set_entityid1(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByEntityIDRequest.entityID1)
}

// int64 entityID2 = 2;
inline void FindPathIncludingSourceByEntityIDRequest::clear_entityid2() {
  _impl_.entityid2_ = int64_t{0};
}
inline int64_t FindPathIncludingSourceByEntityIDRequest::_internal_entityid2() const {
  return _impl_.entityid2_;
}
inline int64_t FindPathIncludingSourceByEntityIDRequest::entityid2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByEntityIDRequest.entityID2)
  return _internal_entityid2();
}
inline void FindPathIncludingSourceByEntityIDRequest::_internal_set_entityid2(int64_t value) {
  
  _impl_.entityid2_ = value;
}
inline void FindPathIncludingSourceByEntityIDRequest::set_entityid2(int64_t value) {
  _internal_set_entityid2(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByEntityIDRequest.entityID2)
}

// int32 maxDegree = 3;
inline void FindPathIncludingSourceByEntityIDRequest::clear_maxdegree() {
  _impl_.maxdegree_ = 0;
}
inline int32_t FindPathIncludingSourceByEntityIDRequest::_internal_maxdegree() const {
  return _impl_.maxdegree_;
}
inline int32_t FindPathIncludingSourceByEntityIDRequest::maxdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByEntityIDRequest.maxDegree)
  return _internal_maxdegree();
}
inline void FindPathIncludingSourceByEntityIDRequest::_internal_set_maxdegree(int32_t value) {
  
  _impl_.maxdegree_ = value;
}
inline void FindPathIncludingSourceByEntityIDRequest::set_maxdegree(int32_t value) {
  _internal_set_maxdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByEntityIDRequest.maxDegree)
}

// string excludedEntities = 4;
inline void FindPathIncludingSourceByEntityIDRequest::clear_excludedentities() {
  _impl_.excludedentities_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByEntityIDRequest::excludedentities() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByEntityIDRequest.excludedEntities)
  return _internal_excludedentities();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByEntityIDRequest::set_excludedentities(ArgT0&& arg0, ArgT... args) {
 
 _impl_.excludedentities_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByEntityIDRequest.excludedEntities)
}
inline std::string* FindPathIncludingSourceByEntityIDRequest::mutable_excludedentities() {
  std::string* _s = _internal_mutable_excludedentities();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByEntityIDRequest.excludedEntities)
  return _s;
}
inline const std::string& FindPathIncludingSourceByEntityIDRequest::_internal_excludedentities() const {
  return _impl_.excludedentities_.Get();
}
inline void FindPathIncludingSourceByEntityIDRequest::_internal_set_excludedentities(const std::string& value) {
  
  _impl_.excludedentities_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByEntityIDRequest::_internal_mutable_excludedentities() {
  
  return _impl_.excludedentities_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByEntityIDRequest::release_excludedentities() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByEntityIDRequest.excludedEntities)
  return _impl_.excludedentities_.Release();
}
inline void FindPathIncludingSourceByEntityIDRequest::set_allocated_excludedentities(std::string* excludedentities) {
  if (excludedentities != nullptr) {
    
  } else {
    
  }
  _impl_.excludedentities_.SetAllocated(excludedentities, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.excludedentities_.IsDefault()) {
    _impl_.excludedentities_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByEntityIDRequest.excludedEntities)
}

// string requiredDsrcs = 5;
inline void FindPathIncludingSourceByEntityIDRequest::clear_requireddsrcs() {
  _impl_.requireddsrcs_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByEntityIDRequest::requireddsrcs() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByEntityIDRequest.requiredDsrcs)
  return _internal_requireddsrcs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByEntityIDRequest::set_requireddsrcs(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requireddsrcs_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByEntityIDRequest.requiredDsrcs)
}
inline std::string* FindPathIncludingSourceByEntityIDRequest::mutable_requireddsrcs() {
  std::string* _s = _internal_mutable_requireddsrcs();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByEntityIDRequest.requiredDsrcs)
  return _s;
}
inline const std::string& FindPathIncludingSourceByEntityIDRequest::_internal_requireddsrcs() const {
  return _impl_.requireddsrcs_.Get();
}
inline void FindPathIncludingSourceByEntityIDRequest::_internal_set_requireddsrcs(const std::string& value) {
  
  _impl_.requireddsrcs_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByEntityIDRequest::_internal_mutable_requireddsrcs() {
  
  return _impl_.requireddsrcs_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByEntityIDRequest::release_requireddsrcs() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByEntityIDRequest.requiredDsrcs)
  return _impl_.requireddsrcs_.Release();
}
inline void FindPathIncludingSourceByEntityIDRequest::set_allocated_requireddsrcs(std::string* requireddsrcs) {
  if (requireddsrcs != nullptr) {
    
  } else {
    
  }
  _impl_.requireddsrcs_.SetAllocated(requireddsrcs, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requireddsrcs_.IsDefault()) {
    _impl_.requireddsrcs_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByEntityIDRequest.requiredDsrcs)
}

// -------------------------------------------------------------------

// FindPathIncludingSourceByEntityIDResponse

// string result = 1;
inline void FindPathIncludingSourceByEntityIDResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByEntityIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByEntityIDResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByEntityIDResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByEntityIDResponse.result)
}
inline std::string* FindPathIncludingSourceByEntityIDResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByEntityIDResponse.result)
  return _s;
}
inline const std::string& FindPathIncludingSourceByEntityIDResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindPathIncludingSourceByEntityIDResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByEntityIDResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByEntityIDResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByEntityIDResponse.result)
  return _impl_.result_.Release();
}
inline void FindPathIncludingSourceByEntityIDResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByEntityIDResponse.result)
}

// -------------------------------------------------------------------

// FindPathIncludingSourceByEntityID_V2Request

// int64 entityID1 = 1;
inline void FindPathIncludingSourceByEntityID_V2Request::clear_entityid1() {
  _impl_.entityid1_ = int64_t{0};
}
inline int64_t FindPathIncludingSourceByEntityID_V2Request::_internal_entityid1() const {
  return _impl_.entityid1_;
}
inline int64_t FindPathIncludingSourceByEntityID_V2Request::entityid1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByEntityID_V2Request.entityID1)
  return _internal_entityid1();
}
inline void FindPathIncludingSourceByEntityID_V2Request::_internal_set_entityid1(int64_t value) {
  
  _impl_.entityid1_ = value;
}
inline void FindPathIncludingSourceByEntityID_V2Request::set_entityid1(int64_t value) {
  _internal_set_entityid1(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByEntityID_V2Request.entityID1)
}

// int64 entityID2 = 2;
inline void FindPathIncludingSourceByEntityID_V2Request::clear_entityid2() {
  _impl_.entityid2_ = int64_t{0};
}
inline int64_t FindPathIncludingSourceByEntityID_V2Request::_internal_entityid2() const {
  return _impl_.entityid2_;
}
inline int64_t FindPathIncludingSourceByEntityID_V2Request::entityid2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByEntityID_V2Request.entityID2)
  return _internal_entityid2();
}
inline void FindPathIncludingSourceByEntityID_V2Request::_internal_set_entityid2(int64_t value) {
  
  _impl_.entityid2_ = value;
}
inline void FindPathIncludingSourceByEntityID_V2Request::set_entityid2(int64_t value) {
  _internal_set_entityid2(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByEntityID_V2Request.entityID2)
}

// int32 maxDegree = 3;
inline void FindPathIncludingSourceByEntityID_V2Request::clear_maxdegree() {
  _impl_.maxdegree_ = 0;
}
inline int32_t FindPathIncludingSourceByEntityID_V2Request::_internal_maxdegree() const {
  return _impl_.maxdegree_;
}
inline int32_t FindPathIncludingSourceByEntityID_V2Request::maxdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByEntityID_V2Request.maxDegree)
  return _internal_maxdegree();
}
inline void FindPathIncludingSourceByEntityID_V2Request::_internal_set_maxdegree(int32_t value) {
  
  _impl_.maxdegree_ = value;
}
inline void FindPathIncludingSourceByEntityID_V2Request::set_maxdegree(int32_t value) {
  _internal_set_maxdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByEntityID_V2Request.maxDegree)
}

// string excludedEntities = 4;
inline void FindPathIncludingSourceByEntityID_V2Request::clear_excludedentities() {
  _impl_.excludedentities_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByEntityID_V2Request::excludedentities() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByEntityID_V2Request.excludedEntities)
  return _internal_excludedentities();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByEntityID_V2Request::set_excludedentities(ArgT0&& arg0, ArgT... args) {
 
 _impl_.excludedentities_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByEntityID_V2Request.excludedEntities)
}
inline std::string* FindPathIncludingSourceByEntityID_V2Request::mutable_excludedentities() {
  std::string* _s = _internal_mutable_excludedentities();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByEntityID_V2Request.excludedEntities)
  return _s;
}
inline const std::string& FindPathIncludingSourceByEntityID_V2Request::_internal_excludedentities() const {
  return _impl_.excludedentities_.Get();
}
inline void FindPathIncludingSourceByEntityID_V2Request::_internal_set_excludedentities(const std::string& value) {
  
  _impl_.excludedentities_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByEntityID_V2Request::_internal_mutable_excludedentities() {
  
  return _impl_.excludedentities_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByEntityID_V2Request::release_excludedentities() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByEntityID_V2Request.excludedEntities)
  return _impl_.excludedentities_.Release();
}
inline void FindPathIncludingSourceByEntityID_V2Request::set_allocated_excludedentities(std::string* excludedentities) {
  if (excludedentities != nullptr) {
    
  } else {
    
  }
  _impl_.excludedentities_.SetAllocated(excludedentities, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.excludedentities_.IsDefault()) {
    _impl_.excludedentities_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByEntityID_V2Request.excludedEntities)
}

// string requiredDsrcs = 5;
inline void FindPathIncludingSourceByEntityID_V2Request::clear_requireddsrcs() {
  _impl_.requireddsrcs_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByEntityID_V2Request::requireddsrcs() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByEntityID_V2Request.requiredDsrcs)
  return _internal_requireddsrcs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByEntityID_V2Request::set_requireddsrcs(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requireddsrcs_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByEntityID_V2Request.requiredDsrcs)
}
inline std::string* FindPathIncludingSourceByEntityID_V2Request::mutable_requireddsrcs() {
  std::string* _s = _internal_mutable_requireddsrcs();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByEntityID_V2Request.requiredDsrcs)
  return _s;
}
inline const std::string& FindPathIncludingSourceByEntityID_V2Request::_internal_requireddsrcs() const {
  return _impl_.requireddsrcs_.Get();
}
inline void FindPathIncludingSourceByEntityID_V2Request::_internal_set_requireddsrcs(const std::string& value) {
  
  _impl_.requireddsrcs_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByEntityID_V2Request::_internal_mutable_requireddsrcs() {
  
  return _impl_.requireddsrcs_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByEntityID_V2Request::release_requireddsrcs() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByEntityID_V2Request.requiredDsrcs)
  return _impl_.requireddsrcs_.Release();
}
inline void FindPathIncludingSourceByEntityID_V2Request::set_allocated_requireddsrcs(std::string* requireddsrcs) {
  if (requireddsrcs != nullptr) {
    
  } else {
    
  }
  _impl_.requireddsrcs_.SetAllocated(requireddsrcs, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requireddsrcs_.IsDefault()) {
    _impl_.requireddsrcs_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByEntityID_V2Request.requiredDsrcs)
}

// int64 flags = 6;
inline void FindPathIncludingSourceByEntityID_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t FindPathIncludingSourceByEntityID_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t FindPathIncludingSourceByEntityID_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByEntityID_V2Request.flags)
  return _internal_flags();
}
inline void FindPathIncludingSourceByEntityID_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void FindPathIncludingSourceByEntityID_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByEntityID_V2Request.flags)
}

// -------------------------------------------------------------------

// FindPathIncludingSourceByEntityID_V2Response

// string result = 1;
inline void FindPathIncludingSourceByEntityID_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByEntityID_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByEntityID_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByEntityID_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByEntityID_V2Response.result)
}
inline std::string* FindPathIncludingSourceByEntityID_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByEntityID_V2Response.result)
  return _s;
}
inline const std::string& FindPathIncludingSourceByEntityID_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindPathIncludingSourceByEntityID_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByEntityID_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByEntityID_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByEntityID_V2Response.result)
  return _impl_.result_.Release();
}
inline void FindPathIncludingSourceByEntityID_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByEntityID_V2Response.result)
}

// -------------------------------------------------------------------

// FindPathIncludingSourceByRecordIDRequest

// string dataSourceCode1 = 1;
inline void FindPathIncludingSourceByRecordIDRequest::clear_datasourcecode1() {
  _impl_.datasourcecode1_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByRecordIDRequest::datasourcecode1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByRecordIDRequest.dataSourceCode1)
  return _internal_datasourcecode1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByRecordIDRequest::set_datasourcecode1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByRecordIDRequest.dataSourceCode1)
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::mutable_datasourcecode1() {
  std::string* _s = _internal_mutable_datasourcecode1();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByRecordIDRequest.dataSourceCode1)
  return _s;
}
inline const std::string& FindPathIncludingSourceByRecordIDRequest::_internal_datasourcecode1() const {
  return _impl_.datasourcecode1_.Get();
}
inline void FindPathIncludingSourceByRecordIDRequest::_internal_set_datasourcecode1(const std::string& value) {
  
  _impl_.datasourcecode1_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::_internal_mutable_datasourcecode1() {
  
  return _impl_.datasourcecode1_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::release_datasourcecode1() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByRecordIDRequest.dataSourceCode1)
  return _impl_.datasourcecode1_.Release();
}
inline void FindPathIncludingSourceByRecordIDRequest::set_allocated_datasourcecode1(std::string* datasourcecode1) {
  if (datasourcecode1 != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode1_.SetAllocated(datasourcecode1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode1_.IsDefault()) {
    _impl_.datasourcecode1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByRecordIDRequest.dataSourceCode1)
}

// string recordID1 = 2;
inline void FindPathIncludingSourceByRecordIDRequest::clear_recordid1() {
  _impl_.recordid1_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByRecordIDRequest::recordid1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByRecordIDRequest.recordID1)
  return _internal_recordid1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByRecordIDRequest::set_recordid1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByRecordIDRequest.recordID1)
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::mutable_recordid1() {
  std::string* _s = _internal_mutable_recordid1();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByRecordIDRequest.recordID1)
  return _s;
}
inline const std::string& FindPathIncludingSourceByRecordIDRequest::_internal_recordid1() const {
  return _impl_.recordid1_.Get();
}
inline void FindPathIncludingSourceByRecordIDRequest::_internal_set_recordid1(const std::string& value) {
  
  _impl_.recordid1_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::_internal_mutable_recordid1() {
  
  return _impl_.recordid1_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::release_recordid1() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByRecordIDRequest.recordID1)
  return _impl_.recordid1_.Release();
}
inline void FindPathIncludingSourceByRecordIDRequest::set_allocated_recordid1(std::string* recordid1) {
  if (recordid1 != nullptr) {
    
  } else {
    
  }
  _impl_.recordid1_.SetAllocated(recordid1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid1_.IsDefault()) {
    _impl_.recordid1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByRecordIDRequest.recordID1)
}

// string dataSourceCode2 = 3;
inline void FindPathIncludingSourceByRecordIDRequest::clear_datasourcecode2() {
  _impl_.datasourcecode2_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByRecordIDRequest::datasourcecode2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByRecordIDRequest.dataSourceCode2)
  return _internal_datasourcecode2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByRecordIDRequest::set_datasourcecode2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByRecordIDRequest.dataSourceCode2)
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::mutable_datasourcecode2() {
  std::string* _s = _internal_mutable_datasourcecode2();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByRecordIDRequest.dataSourceCode2)
  return _s;
}
inline const std::string& FindPathIncludingSourceByRecordIDRequest::_internal_datasourcecode2() const {
  return _impl_.datasourcecode2_.Get();
}
inline void FindPathIncludingSourceByRecordIDRequest::_internal_set_datasourcecode2(const std::string& value) {
  
  _impl_.datasourcecode2_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::_internal_mutable_datasourcecode2() {
  
  return _impl_.datasourcecode2_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::release_datasourcecode2() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByRecordIDRequest.dataSourceCode2)
  return _impl_.datasourcecode2_.Release();
}
inline void FindPathIncludingSourceByRecordIDRequest::set_allocated_datasourcecode2(std::string* datasourcecode2) {
  if (datasourcecode2 != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode2_.SetAllocated(datasourcecode2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode2_.IsDefault()) {
    _impl_.datasourcecode2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByRecordIDRequest.dataSourceCode2)
}

// string recordID2 = 4;
inline void FindPathIncludingSourceByRecordIDRequest::clear_recordid2() {
  _impl_.recordid2_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByRecordIDRequest::recordid2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByRecordIDRequest.recordID2)
  return _internal_recordid2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByRecordIDRequest::set_recordid2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByRecordIDRequest.recordID2)
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::mutable_recordid2() {
  std::string* _s = _internal_mutable_recordid2();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByRecordIDRequest.recordID2)
  return _s;
}
inline const std::string& FindPathIncludingSourceByRecordIDRequest::_internal_recordid2() const {
  return _impl_.recordid2_.Get();
}
inline void FindPathIncludingSourceByRecordIDRequest::_internal_set_recordid2(const std::string& value) {
  
  _impl_.recordid2_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::_internal_mutable_recordid2() {
  
  return _impl_.recordid2_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::release_recordid2() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByRecordIDRequest.recordID2)
  return _impl_.recordid2_.Release();
}
inline void FindPathIncludingSourceByRecordIDRequest::set_allocated_recordid2(std::string* recordid2) {
  if (recordid2 != nullptr) {
    
  } else {
    
  }
  _impl_.recordid2_.SetAllocated(recordid2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid2_.IsDefault()) {
    _impl_.recordid2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByRecordIDRequest.recordID2)
}

// int32 maxDegree = 5;
inline void FindPathIncludingSourceByRecordIDRequest::clear_maxdegree() {
  _impl_.maxdegree_ = 0;
}
inline int32_t FindPathIncludingSourceByRecordIDRequest::_internal_maxdegree() const {
  return _impl_.maxdegree_;
}
inline int32_t FindPathIncludingSourceByRecordIDRequest::maxdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByRecordIDRequest.maxDegree)
  return _internal_maxdegree();
}
inline void FindPathIncludingSourceByRecordIDRequest::_internal_set_maxdegree(int32_t value) {
  
  _impl_.maxdegree_ = value;
}
inline void FindPathIncludingSourceByRecordIDRequest::set_maxdegree(int32_t value) {
  _internal_set_maxdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByRecordIDRequest.maxDegree)
}

// string excludedRecords = 6;
inline void FindPathIncludingSourceByRecordIDRequest::clear_excludedrecords() {
  _impl_.excludedrecords_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByRecordIDRequest::excludedrecords() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByRecordIDRequest.excludedRecords)
  return _internal_excludedrecords();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByRecordIDRequest::set_excludedrecords(ArgT0&& arg0, ArgT... args) {
 
 _impl_.excludedrecords_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByRecordIDRequest.excludedRecords)
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::mutable_excludedrecords() {
  std::string* _s = _internal_mutable_excludedrecords();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByRecordIDRequest.excludedRecords)
  return _s;
}
inline const std::string& FindPathIncludingSourceByRecordIDRequest::_internal_excludedrecords() const {
  return _impl_.excludedrecords_.Get();
}
inline void FindPathIncludingSourceByRecordIDRequest::_internal_set_excludedrecords(const std::string& value) {
  
  _impl_.excludedrecords_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::_internal_mutable_excludedrecords() {
  
  return _impl_.excludedrecords_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::release_excludedrecords() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByRecordIDRequest.excludedRecords)
  return _impl_.excludedrecords_.Release();
}
inline void FindPathIncludingSourceByRecordIDRequest::set_allocated_excludedrecords(std::string* excludedrecords) {
  if (excludedrecords != nullptr) {
    
  } else {
    
  }
  _impl_.excludedrecords_.SetAllocated(excludedrecords, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.excludedrecords_.IsDefault()) {
    _impl_.excludedrecords_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByRecordIDRequest.excludedRecords)
}

// string requiredDsrcs = 7;
inline void FindPathIncludingSourceByRecordIDRequest::clear_requireddsrcs() {
  _impl_.requireddsrcs_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByRecordIDRequest::requireddsrcs() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByRecordIDRequest.requiredDsrcs)
  return _internal_requireddsrcs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByRecordIDRequest::set_requireddsrcs(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requireddsrcs_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByRecordIDRequest.requiredDsrcs)
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::mutable_requireddsrcs() {
  std::string* _s = _internal_mutable_requireddsrcs();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByRecordIDRequest.requiredDsrcs)
  return _s;
}
inline const std::string& FindPathIncludingSourceByRecordIDRequest::_internal_requireddsrcs() const {
  return _impl_.requireddsrcs_.Get();
}
inline void FindPathIncludingSourceByRecordIDRequest::_internal_set_requireddsrcs(const std::string& value) {
  
  _impl_.requireddsrcs_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::_internal_mutable_requireddsrcs() {
  
  return _impl_.requireddsrcs_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordIDRequest::release_requireddsrcs() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByRecordIDRequest.requiredDsrcs)
  return _impl_.requireddsrcs_.Release();
}
inline void FindPathIncludingSourceByRecordIDRequest::set_allocated_requireddsrcs(std::string* requireddsrcs) {
  if (requireddsrcs != nullptr) {
    
  } else {
    
  }
  _impl_.requireddsrcs_.SetAllocated(requireddsrcs, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requireddsrcs_.IsDefault()) {
    _impl_.requireddsrcs_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByRecordIDRequest.requiredDsrcs)
}

// -------------------------------------------------------------------

// FindPathIncludingSourceByRecordIDResponse

// string result = 1;
inline void FindPathIncludingSourceByRecordIDResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByRecordIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByRecordIDResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByRecordIDResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByRecordIDResponse.result)
}
inline std::string* FindPathIncludingSourceByRecordIDResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByRecordIDResponse.result)
  return _s;
}
inline const std::string& FindPathIncludingSourceByRecordIDResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindPathIncludingSourceByRecordIDResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordIDResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordIDResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByRecordIDResponse.result)
  return _impl_.result_.Release();
}
inline void FindPathIncludingSourceByRecordIDResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByRecordIDResponse.result)
}

// -------------------------------------------------------------------

// FindPathIncludingSourceByRecordID_V2Request

// string dataSourceCode1 = 1;
inline void FindPathIncludingSourceByRecordID_V2Request::clear_datasourcecode1() {
  _impl_.datasourcecode1_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByRecordID_V2Request::datasourcecode1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByRecordID_V2Request.dataSourceCode1)
  return _internal_datasourcecode1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByRecordID_V2Request::set_datasourcecode1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByRecordID_V2Request.dataSourceCode1)
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::mutable_datasourcecode1() {
  std::string* _s = _internal_mutable_datasourcecode1();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByRecordID_V2Request.dataSourceCode1)
  return _s;
}
inline const std::string& FindPathIncludingSourceByRecordID_V2Request::_internal_datasourcecode1() const {
  return _impl_.datasourcecode1_.Get();
}
inline void FindPathIncludingSourceByRecordID_V2Request::_internal_set_datasourcecode1(const std::string& value) {
  
  _impl_.datasourcecode1_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::_internal_mutable_datasourcecode1() {
  
  return _impl_.datasourcecode1_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::release_datasourcecode1() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByRecordID_V2Request.dataSourceCode1)
  return _impl_.datasourcecode1_.Release();
}
inline void FindPathIncludingSourceByRecordID_V2Request::set_allocated_datasourcecode1(std::string* datasourcecode1) {
  if (datasourcecode1 != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode1_.SetAllocated(datasourcecode1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode1_.IsDefault()) {
    _impl_.datasourcecode1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByRecordID_V2Request.dataSourceCode1)
}

// string recordID1 = 2;
inline void FindPathIncludingSourceByRecordID_V2Request::clear_recordid1() {
  _impl_.recordid1_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByRecordID_V2Request::recordid1() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByRecordID_V2Request.recordID1)
  return _internal_recordid1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByRecordID_V2Request::set_recordid1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByRecordID_V2Request.recordID1)
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::mutable_recordid1() {
  std::string* _s = _internal_mutable_recordid1();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByRecordID_V2Request.recordID1)
  return _s;
}
inline const std::string& FindPathIncludingSourceByRecordID_V2Request::_internal_recordid1() const {
  return _impl_.recordid1_.Get();
}
inline void FindPathIncludingSourceByRecordID_V2Request::_internal_set_recordid1(const std::string& value) {
  
  _impl_.recordid1_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::_internal_mutable_recordid1() {
  
  return _impl_.recordid1_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::release_recordid1() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByRecordID_V2Request.recordID1)
  return _impl_.recordid1_.Release();
}
inline void FindPathIncludingSourceByRecordID_V2Request::set_allocated_recordid1(std::string* recordid1) {
  if (recordid1 != nullptr) {
    
  } else {
    
  }
  _impl_.recordid1_.SetAllocated(recordid1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid1_.IsDefault()) {
    _impl_.recordid1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByRecordID_V2Request.recordID1)
}

// string dataSourceCode2 = 3;
inline void FindPathIncludingSourceByRecordID_V2Request::clear_datasourcecode2() {
  _impl_.datasourcecode2_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByRecordID_V2Request::datasourcecode2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByRecordID_V2Request.dataSourceCode2)
  return _internal_datasourcecode2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByRecordID_V2Request::set_datasourcecode2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByRecordID_V2Request.dataSourceCode2)
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::mutable_datasourcecode2() {
  std::string* _s = _internal_mutable_datasourcecode2();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByRecordID_V2Request.dataSourceCode2)
  return _s;
}
inline const std::string& FindPathIncludingSourceByRecordID_V2Request::_internal_datasourcecode2() const {
  return _impl_.datasourcecode2_.Get();
}
inline void FindPathIncludingSourceByRecordID_V2Request::_internal_set_datasourcecode2(const std::string& value) {
  
  _impl_.datasourcecode2_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::_internal_mutable_datasourcecode2() {
  
  return _impl_.datasourcecode2_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::release_datasourcecode2() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByRecordID_V2Request.dataSourceCode2)
  return _impl_.datasourcecode2_.Release();
}
inline void FindPathIncludingSourceByRecordID_V2Request::set_allocated_datasourcecode2(std::string* datasourcecode2) {
  if (datasourcecode2 != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode2_.SetAllocated(datasourcecode2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode2_.IsDefault()) {
    _impl_.datasourcecode2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByRecordID_V2Request.dataSourceCode2)
}

// string recordID2 = 4;
inline void FindPathIncludingSourceByRecordID_V2Request::clear_recordid2() {
  _impl_.recordid2_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByRecordID_V2Request::recordid2() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByRecordID_V2Request.recordID2)
  return _internal_recordid2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByRecordID_V2Request::set_recordid2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByRecordID_V2Request.recordID2)
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::mutable_recordid2() {
  std::string* _s = _internal_mutable_recordid2();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByRecordID_V2Request.recordID2)
  return _s;
}
inline const std::string& FindPathIncludingSourceByRecordID_V2Request::_internal_recordid2() const {
  return _impl_.recordid2_.Get();
}
inline void FindPathIncludingSourceByRecordID_V2Request::_internal_set_recordid2(const std::string& value) {
  
  _impl_.recordid2_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::_internal_mutable_recordid2() {
  
  return _impl_.recordid2_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::release_recordid2() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByRecordID_V2Request.recordID2)
  return _impl_.recordid2_.Release();
}
inline void FindPathIncludingSourceByRecordID_V2Request::set_allocated_recordid2(std::string* recordid2) {
  if (recordid2 != nullptr) {
    
  } else {
    
  }
  _impl_.recordid2_.SetAllocated(recordid2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid2_.IsDefault()) {
    _impl_.recordid2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByRecordID_V2Request.recordID2)
}

// int32 maxDegree = 5;
inline void FindPathIncludingSourceByRecordID_V2Request::clear_maxdegree() {
  _impl_.maxdegree_ = 0;
}
inline int32_t FindPathIncludingSourceByRecordID_V2Request::_internal_maxdegree() const {
  return _impl_.maxdegree_;
}
inline int32_t FindPathIncludingSourceByRecordID_V2Request::maxdegree() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByRecordID_V2Request.maxDegree)
  return _internal_maxdegree();
}
inline void FindPathIncludingSourceByRecordID_V2Request::_internal_set_maxdegree(int32_t value) {
  
  _impl_.maxdegree_ = value;
}
inline void FindPathIncludingSourceByRecordID_V2Request::set_maxdegree(int32_t value) {
  _internal_set_maxdegree(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByRecordID_V2Request.maxDegree)
}

// string excludedRecords = 6;
inline void FindPathIncludingSourceByRecordID_V2Request::clear_excludedrecords() {
  _impl_.excludedrecords_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByRecordID_V2Request::excludedrecords() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByRecordID_V2Request.excludedRecords)
  return _internal_excludedrecords();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByRecordID_V2Request::set_excludedrecords(ArgT0&& arg0, ArgT... args) {
 
 _impl_.excludedrecords_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByRecordID_V2Request.excludedRecords)
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::mutable_excludedrecords() {
  std::string* _s = _internal_mutable_excludedrecords();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByRecordID_V2Request.excludedRecords)
  return _s;
}
inline const std::string& FindPathIncludingSourceByRecordID_V2Request::_internal_excludedrecords() const {
  return _impl_.excludedrecords_.Get();
}
inline void FindPathIncludingSourceByRecordID_V2Request::_internal_set_excludedrecords(const std::string& value) {
  
  _impl_.excludedrecords_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::_internal_mutable_excludedrecords() {
  
  return _impl_.excludedrecords_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::release_excludedrecords() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByRecordID_V2Request.excludedRecords)
  return _impl_.excludedrecords_.Release();
}
inline void FindPathIncludingSourceByRecordID_V2Request::set_allocated_excludedrecords(std::string* excludedrecords) {
  if (excludedrecords != nullptr) {
    
  } else {
    
  }
  _impl_.excludedrecords_.SetAllocated(excludedrecords, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.excludedrecords_.IsDefault()) {
    _impl_.excludedrecords_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByRecordID_V2Request.excludedRecords)
}

// string requiredDsrcs = 7;
inline void FindPathIncludingSourceByRecordID_V2Request::clear_requireddsrcs() {
  _impl_.requireddsrcs_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByRecordID_V2Request::requireddsrcs() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByRecordID_V2Request.requiredDsrcs)
  return _internal_requireddsrcs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByRecordID_V2Request::set_requireddsrcs(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requireddsrcs_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByRecordID_V2Request.requiredDsrcs)
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::mutable_requireddsrcs() {
  std::string* _s = _internal_mutable_requireddsrcs();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByRecordID_V2Request.requiredDsrcs)
  return _s;
}
inline const std::string& FindPathIncludingSourceByRecordID_V2Request::_internal_requireddsrcs() const {
  return _impl_.requireddsrcs_.Get();
}
inline void FindPathIncludingSourceByRecordID_V2Request::_internal_set_requireddsrcs(const std::string& value) {
  
  _impl_.requireddsrcs_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::_internal_mutable_requireddsrcs() {
  
  return _impl_.requireddsrcs_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordID_V2Request::release_requireddsrcs() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByRecordID_V2Request.requiredDsrcs)
  return _impl_.requireddsrcs_.Release();
}
inline void FindPathIncludingSourceByRecordID_V2Request::set_allocated_requireddsrcs(std::string* requireddsrcs) {
  if (requireddsrcs != nullptr) {
    
  } else {
    
  }
  _impl_.requireddsrcs_.SetAllocated(requireddsrcs, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requireddsrcs_.IsDefault()) {
    _impl_.requireddsrcs_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByRecordID_V2Request.requiredDsrcs)
}

// int64 flags = 8;
inline void FindPathIncludingSourceByRecordID_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t FindPathIncludingSourceByRecordID_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t FindPathIncludingSourceByRecordID_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByRecordID_V2Request.flags)
  return _internal_flags();
}
inline void FindPathIncludingSourceByRecordID_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void FindPathIncludingSourceByRecordID_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByRecordID_V2Request.flags)
}

// -------------------------------------------------------------------

// FindPathIncludingSourceByRecordID_V2Response

// string result = 1;
inline void FindPathIncludingSourceByRecordID_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& FindPathIncludingSourceByRecordID_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.FindPathIncludingSourceByRecordID_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPathIncludingSourceByRecordID_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.FindPathIncludingSourceByRecordID_V2Response.result)
}
inline std::string* FindPathIncludingSourceByRecordID_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.FindPathIncludingSourceByRecordID_V2Response.result)
  return _s;
}
inline const std::string& FindPathIncludingSourceByRecordID_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void FindPathIncludingSourceByRecordID_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordID_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPathIncludingSourceByRecordID_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.FindPathIncludingSourceByRecordID_V2Response.result)
  return _impl_.result_.Release();
}
inline void FindPathIncludingSourceByRecordID_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.FindPathIncludingSourceByRecordID_V2Response.result)
}

// -------------------------------------------------------------------

// GetActiveConfigIDRequest

// -------------------------------------------------------------------

// GetActiveConfigIDResponse

// int64 result = 1;
inline void GetActiveConfigIDResponse::clear_result() {
  _impl_.result_ = int64_t{0};
}
inline int64_t GetActiveConfigIDResponse::_internal_result() const {
  return _impl_.result_;
}
inline int64_t GetActiveConfigIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.GetActiveConfigIDResponse.result)
  return _internal_result();
}
inline void GetActiveConfigIDResponse::_internal_set_result(int64_t value) {
  
  _impl_.result_ = value;
}
inline void GetActiveConfigIDResponse::set_result(int64_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:g2engine.GetActiveConfigIDResponse.result)
}

// -------------------------------------------------------------------

// GetEntityByEntityIDRequest

// int64 entityID = 1;
inline void GetEntityByEntityIDRequest::clear_entityid() {
  _impl_.entityid_ = int64_t{0};
}
inline int64_t GetEntityByEntityIDRequest::_internal_entityid() const {
  return _impl_.entityid_;
}
inline int64_t GetEntityByEntityIDRequest::entityid() const {
  // @@protoc_insertion_point(field_get:g2engine.GetEntityByEntityIDRequest.entityID)
  return _internal_entityid();
}
inline void GetEntityByEntityIDRequest::_internal_set_entityid(int64_t value) {
  
  _impl_.entityid_ = value;
}
inline void GetEntityByEntityIDRequest::set_entityid(int64_t value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:g2engine.GetEntityByEntityIDRequest.entityID)
}

// -------------------------------------------------------------------

// GetEntityByEntityIDResponse

// string result = 1;
inline void GetEntityByEntityIDResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& GetEntityByEntityIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.GetEntityByEntityIDResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEntityByEntityIDResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetEntityByEntityIDResponse.result)
}
inline std::string* GetEntityByEntityIDResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.GetEntityByEntityIDResponse.result)
  return _s;
}
inline const std::string& GetEntityByEntityIDResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void GetEntityByEntityIDResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEntityByEntityIDResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEntityByEntityIDResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.GetEntityByEntityIDResponse.result)
  return _impl_.result_.Release();
}
inline void GetEntityByEntityIDResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetEntityByEntityIDResponse.result)
}

// -------------------------------------------------------------------

// GetEntityByEntityID_V2Request

// int64 entityID = 1;
inline void GetEntityByEntityID_V2Request::clear_entityid() {
  _impl_.entityid_ = int64_t{0};
}
inline int64_t GetEntityByEntityID_V2Request::_internal_entityid() const {
  return _impl_.entityid_;
}
inline int64_t GetEntityByEntityID_V2Request::entityid() const {
  // @@protoc_insertion_point(field_get:g2engine.GetEntityByEntityID_V2Request.entityID)
  return _internal_entityid();
}
inline void GetEntityByEntityID_V2Request::_internal_set_entityid(int64_t value) {
  
  _impl_.entityid_ = value;
}
inline void GetEntityByEntityID_V2Request::set_entityid(int64_t value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:g2engine.GetEntityByEntityID_V2Request.entityID)
}

// int64 flags = 2;
inline void GetEntityByEntityID_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t GetEntityByEntityID_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t GetEntityByEntityID_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.GetEntityByEntityID_V2Request.flags)
  return _internal_flags();
}
inline void GetEntityByEntityID_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void GetEntityByEntityID_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.GetEntityByEntityID_V2Request.flags)
}

// -------------------------------------------------------------------

// GetEntityByEntityID_V2Response

// string result = 1;
inline void GetEntityByEntityID_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& GetEntityByEntityID_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.GetEntityByEntityID_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEntityByEntityID_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetEntityByEntityID_V2Response.result)
}
inline std::string* GetEntityByEntityID_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.GetEntityByEntityID_V2Response.result)
  return _s;
}
inline const std::string& GetEntityByEntityID_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void GetEntityByEntityID_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEntityByEntityID_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEntityByEntityID_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.GetEntityByEntityID_V2Response.result)
  return _impl_.result_.Release();
}
inline void GetEntityByEntityID_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetEntityByEntityID_V2Response.result)
}

// -------------------------------------------------------------------

// GetEntityByRecordIDRequest

// string dataSourceCode = 1;
inline void GetEntityByRecordIDRequest::clear_datasourcecode() {
  _impl_.datasourcecode_.ClearToEmpty();
}
inline const std::string& GetEntityByRecordIDRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:g2engine.GetEntityByRecordIDRequest.dataSourceCode)
  return _internal_datasourcecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEntityByRecordIDRequest::set_datasourcecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetEntityByRecordIDRequest.dataSourceCode)
}
inline std::string* GetEntityByRecordIDRequest::mutable_datasourcecode() {
  std::string* _s = _internal_mutable_datasourcecode();
  // @@protoc_insertion_point(field_mutable:g2engine.GetEntityByRecordIDRequest.dataSourceCode)
  return _s;
}
inline const std::string& GetEntityByRecordIDRequest::_internal_datasourcecode() const {
  return _impl_.datasourcecode_.Get();
}
inline void GetEntityByRecordIDRequest::_internal_set_datasourcecode(const std::string& value) {
  
  _impl_.datasourcecode_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEntityByRecordIDRequest::_internal_mutable_datasourcecode() {
  
  return _impl_.datasourcecode_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEntityByRecordIDRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:g2engine.GetEntityByRecordIDRequest.dataSourceCode)
  return _impl_.datasourcecode_.Release();
}
inline void GetEntityByRecordIDRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode_.SetAllocated(datasourcecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode_.IsDefault()) {
    _impl_.datasourcecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetEntityByRecordIDRequest.dataSourceCode)
}

// string recordID = 2;
inline void GetEntityByRecordIDRequest::clear_recordid() {
  _impl_.recordid_.ClearToEmpty();
}
inline const std::string& GetEntityByRecordIDRequest::recordid() const {
  // @@protoc_insertion_point(field_get:g2engine.GetEntityByRecordIDRequest.recordID)
  return _internal_recordid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEntityByRecordIDRequest::set_recordid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetEntityByRecordIDRequest.recordID)
}
inline std::string* GetEntityByRecordIDRequest::mutable_recordid() {
  std::string* _s = _internal_mutable_recordid();
  // @@protoc_insertion_point(field_mutable:g2engine.GetEntityByRecordIDRequest.recordID)
  return _s;
}
inline const std::string& GetEntityByRecordIDRequest::_internal_recordid() const {
  return _impl_.recordid_.Get();
}
inline void GetEntityByRecordIDRequest::_internal_set_recordid(const std::string& value) {
  
  _impl_.recordid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEntityByRecordIDRequest::_internal_mutable_recordid() {
  
  return _impl_.recordid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEntityByRecordIDRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:g2engine.GetEntityByRecordIDRequest.recordID)
  return _impl_.recordid_.Release();
}
inline void GetEntityByRecordIDRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  _impl_.recordid_.SetAllocated(recordid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid_.IsDefault()) {
    _impl_.recordid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetEntityByRecordIDRequest.recordID)
}

// -------------------------------------------------------------------

// GetEntityByRecordIDResponse

// string result = 1;
inline void GetEntityByRecordIDResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& GetEntityByRecordIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.GetEntityByRecordIDResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEntityByRecordIDResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetEntityByRecordIDResponse.result)
}
inline std::string* GetEntityByRecordIDResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.GetEntityByRecordIDResponse.result)
  return _s;
}
inline const std::string& GetEntityByRecordIDResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void GetEntityByRecordIDResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEntityByRecordIDResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEntityByRecordIDResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.GetEntityByRecordIDResponse.result)
  return _impl_.result_.Release();
}
inline void GetEntityByRecordIDResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetEntityByRecordIDResponse.result)
}

// -------------------------------------------------------------------

// GetEntityByRecordID_V2Request

// string dataSourceCode = 1;
inline void GetEntityByRecordID_V2Request::clear_datasourcecode() {
  _impl_.datasourcecode_.ClearToEmpty();
}
inline const std::string& GetEntityByRecordID_V2Request::datasourcecode() const {
  // @@protoc_insertion_point(field_get:g2engine.GetEntityByRecordID_V2Request.dataSourceCode)
  return _internal_datasourcecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEntityByRecordID_V2Request::set_datasourcecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetEntityByRecordID_V2Request.dataSourceCode)
}
inline std::string* GetEntityByRecordID_V2Request::mutable_datasourcecode() {
  std::string* _s = _internal_mutable_datasourcecode();
  // @@protoc_insertion_point(field_mutable:g2engine.GetEntityByRecordID_V2Request.dataSourceCode)
  return _s;
}
inline const std::string& GetEntityByRecordID_V2Request::_internal_datasourcecode() const {
  return _impl_.datasourcecode_.Get();
}
inline void GetEntityByRecordID_V2Request::_internal_set_datasourcecode(const std::string& value) {
  
  _impl_.datasourcecode_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEntityByRecordID_V2Request::_internal_mutable_datasourcecode() {
  
  return _impl_.datasourcecode_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEntityByRecordID_V2Request::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:g2engine.GetEntityByRecordID_V2Request.dataSourceCode)
  return _impl_.datasourcecode_.Release();
}
inline void GetEntityByRecordID_V2Request::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode_.SetAllocated(datasourcecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode_.IsDefault()) {
    _impl_.datasourcecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetEntityByRecordID_V2Request.dataSourceCode)
}

// string recordID = 2;
inline void GetEntityByRecordID_V2Request::clear_recordid() {
  _impl_.recordid_.ClearToEmpty();
}
inline const std::string& GetEntityByRecordID_V2Request::recordid() const {
  // @@protoc_insertion_point(field_get:g2engine.GetEntityByRecordID_V2Request.recordID)
  return _internal_recordid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEntityByRecordID_V2Request::set_recordid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetEntityByRecordID_V2Request.recordID)
}
inline std::string* GetEntityByRecordID_V2Request::mutable_recordid() {
  std::string* _s = _internal_mutable_recordid();
  // @@protoc_insertion_point(field_mutable:g2engine.GetEntityByRecordID_V2Request.recordID)
  return _s;
}
inline const std::string& GetEntityByRecordID_V2Request::_internal_recordid() const {
  return _impl_.recordid_.Get();
}
inline void GetEntityByRecordID_V2Request::_internal_set_recordid(const std::string& value) {
  
  _impl_.recordid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEntityByRecordID_V2Request::_internal_mutable_recordid() {
  
  return _impl_.recordid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEntityByRecordID_V2Request::release_recordid() {
  // @@protoc_insertion_point(field_release:g2engine.GetEntityByRecordID_V2Request.recordID)
  return _impl_.recordid_.Release();
}
inline void GetEntityByRecordID_V2Request::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  _impl_.recordid_.SetAllocated(recordid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid_.IsDefault()) {
    _impl_.recordid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetEntityByRecordID_V2Request.recordID)
}

// int64 flags = 3;
inline void GetEntityByRecordID_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t GetEntityByRecordID_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t GetEntityByRecordID_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.GetEntityByRecordID_V2Request.flags)
  return _internal_flags();
}
inline void GetEntityByRecordID_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void GetEntityByRecordID_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.GetEntityByRecordID_V2Request.flags)
}

// -------------------------------------------------------------------

// GetEntityByRecordID_V2Response

// string result = 1;
inline void GetEntityByRecordID_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& GetEntityByRecordID_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.GetEntityByRecordID_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEntityByRecordID_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetEntityByRecordID_V2Response.result)
}
inline std::string* GetEntityByRecordID_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.GetEntityByRecordID_V2Response.result)
  return _s;
}
inline const std::string& GetEntityByRecordID_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void GetEntityByRecordID_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEntityByRecordID_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEntityByRecordID_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.GetEntityByRecordID_V2Response.result)
  return _impl_.result_.Release();
}
inline void GetEntityByRecordID_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetEntityByRecordID_V2Response.result)
}

// -------------------------------------------------------------------

// GetRecordRequest

// string dataSourceCode = 1;
inline void GetRecordRequest::clear_datasourcecode() {
  _impl_.datasourcecode_.ClearToEmpty();
}
inline const std::string& GetRecordRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:g2engine.GetRecordRequest.dataSourceCode)
  return _internal_datasourcecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecordRequest::set_datasourcecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetRecordRequest.dataSourceCode)
}
inline std::string* GetRecordRequest::mutable_datasourcecode() {
  std::string* _s = _internal_mutable_datasourcecode();
  // @@protoc_insertion_point(field_mutable:g2engine.GetRecordRequest.dataSourceCode)
  return _s;
}
inline const std::string& GetRecordRequest::_internal_datasourcecode() const {
  return _impl_.datasourcecode_.Get();
}
inline void GetRecordRequest::_internal_set_datasourcecode(const std::string& value) {
  
  _impl_.datasourcecode_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecordRequest::_internal_mutable_datasourcecode() {
  
  return _impl_.datasourcecode_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecordRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:g2engine.GetRecordRequest.dataSourceCode)
  return _impl_.datasourcecode_.Release();
}
inline void GetRecordRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode_.SetAllocated(datasourcecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode_.IsDefault()) {
    _impl_.datasourcecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetRecordRequest.dataSourceCode)
}

// string recordID = 2;
inline void GetRecordRequest::clear_recordid() {
  _impl_.recordid_.ClearToEmpty();
}
inline const std::string& GetRecordRequest::recordid() const {
  // @@protoc_insertion_point(field_get:g2engine.GetRecordRequest.recordID)
  return _internal_recordid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecordRequest::set_recordid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetRecordRequest.recordID)
}
inline std::string* GetRecordRequest::mutable_recordid() {
  std::string* _s = _internal_mutable_recordid();
  // @@protoc_insertion_point(field_mutable:g2engine.GetRecordRequest.recordID)
  return _s;
}
inline const std::string& GetRecordRequest::_internal_recordid() const {
  return _impl_.recordid_.Get();
}
inline void GetRecordRequest::_internal_set_recordid(const std::string& value) {
  
  _impl_.recordid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecordRequest::_internal_mutable_recordid() {
  
  return _impl_.recordid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecordRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:g2engine.GetRecordRequest.recordID)
  return _impl_.recordid_.Release();
}
inline void GetRecordRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  _impl_.recordid_.SetAllocated(recordid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid_.IsDefault()) {
    _impl_.recordid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetRecordRequest.recordID)
}

// -------------------------------------------------------------------

// GetRecordResponse

// string result = 1;
inline void GetRecordResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& GetRecordResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.GetRecordResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecordResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetRecordResponse.result)
}
inline std::string* GetRecordResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.GetRecordResponse.result)
  return _s;
}
inline const std::string& GetRecordResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void GetRecordResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecordResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecordResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.GetRecordResponse.result)
  return _impl_.result_.Release();
}
inline void GetRecordResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetRecordResponse.result)
}

// -------------------------------------------------------------------

// GetRecord_V2Request

// string dataSourceCode = 1;
inline void GetRecord_V2Request::clear_datasourcecode() {
  _impl_.datasourcecode_.ClearToEmpty();
}
inline const std::string& GetRecord_V2Request::datasourcecode() const {
  // @@protoc_insertion_point(field_get:g2engine.GetRecord_V2Request.dataSourceCode)
  return _internal_datasourcecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecord_V2Request::set_datasourcecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetRecord_V2Request.dataSourceCode)
}
inline std::string* GetRecord_V2Request::mutable_datasourcecode() {
  std::string* _s = _internal_mutable_datasourcecode();
  // @@protoc_insertion_point(field_mutable:g2engine.GetRecord_V2Request.dataSourceCode)
  return _s;
}
inline const std::string& GetRecord_V2Request::_internal_datasourcecode() const {
  return _impl_.datasourcecode_.Get();
}
inline void GetRecord_V2Request::_internal_set_datasourcecode(const std::string& value) {
  
  _impl_.datasourcecode_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecord_V2Request::_internal_mutable_datasourcecode() {
  
  return _impl_.datasourcecode_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecord_V2Request::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:g2engine.GetRecord_V2Request.dataSourceCode)
  return _impl_.datasourcecode_.Release();
}
inline void GetRecord_V2Request::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode_.SetAllocated(datasourcecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode_.IsDefault()) {
    _impl_.datasourcecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetRecord_V2Request.dataSourceCode)
}

// string recordID = 2;
inline void GetRecord_V2Request::clear_recordid() {
  _impl_.recordid_.ClearToEmpty();
}
inline const std::string& GetRecord_V2Request::recordid() const {
  // @@protoc_insertion_point(field_get:g2engine.GetRecord_V2Request.recordID)
  return _internal_recordid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecord_V2Request::set_recordid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetRecord_V2Request.recordID)
}
inline std::string* GetRecord_V2Request::mutable_recordid() {
  std::string* _s = _internal_mutable_recordid();
  // @@protoc_insertion_point(field_mutable:g2engine.GetRecord_V2Request.recordID)
  return _s;
}
inline const std::string& GetRecord_V2Request::_internal_recordid() const {
  return _impl_.recordid_.Get();
}
inline void GetRecord_V2Request::_internal_set_recordid(const std::string& value) {
  
  _impl_.recordid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecord_V2Request::_internal_mutable_recordid() {
  
  return _impl_.recordid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecord_V2Request::release_recordid() {
  // @@protoc_insertion_point(field_release:g2engine.GetRecord_V2Request.recordID)
  return _impl_.recordid_.Release();
}
inline void GetRecord_V2Request::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  _impl_.recordid_.SetAllocated(recordid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid_.IsDefault()) {
    _impl_.recordid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetRecord_V2Request.recordID)
}

// int64 flags = 3;
inline void GetRecord_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t GetRecord_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t GetRecord_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.GetRecord_V2Request.flags)
  return _internal_flags();
}
inline void GetRecord_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void GetRecord_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.GetRecord_V2Request.flags)
}

// -------------------------------------------------------------------

// GetRecord_V2Response

// string result = 1;
inline void GetRecord_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& GetRecord_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.GetRecord_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecord_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetRecord_V2Response.result)
}
inline std::string* GetRecord_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.GetRecord_V2Response.result)
  return _s;
}
inline const std::string& GetRecord_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void GetRecord_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecord_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecord_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.GetRecord_V2Response.result)
  return _impl_.result_.Release();
}
inline void GetRecord_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetRecord_V2Response.result)
}

// -------------------------------------------------------------------

// GetRedoRecordRequest

// -------------------------------------------------------------------

// GetRedoRecordResponse

// string result = 1;
inline void GetRedoRecordResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& GetRedoRecordResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.GetRedoRecordResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRedoRecordResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetRedoRecordResponse.result)
}
inline std::string* GetRedoRecordResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.GetRedoRecordResponse.result)
  return _s;
}
inline const std::string& GetRedoRecordResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void GetRedoRecordResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRedoRecordResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRedoRecordResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.GetRedoRecordResponse.result)
  return _impl_.result_.Release();
}
inline void GetRedoRecordResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetRedoRecordResponse.result)
}

// -------------------------------------------------------------------

// GetRepositoryLastModifiedTimeRequest

// -------------------------------------------------------------------

// GetRepositoryLastModifiedTimeResponse

// int64 result = 1;
inline void GetRepositoryLastModifiedTimeResponse::clear_result() {
  _impl_.result_ = int64_t{0};
}
inline int64_t GetRepositoryLastModifiedTimeResponse::_internal_result() const {
  return _impl_.result_;
}
inline int64_t GetRepositoryLastModifiedTimeResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.GetRepositoryLastModifiedTimeResponse.result)
  return _internal_result();
}
inline void GetRepositoryLastModifiedTimeResponse::_internal_set_result(int64_t value) {
  
  _impl_.result_ = value;
}
inline void GetRepositoryLastModifiedTimeResponse::set_result(int64_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:g2engine.GetRepositoryLastModifiedTimeResponse.result)
}

// -------------------------------------------------------------------

// GetVirtualEntityByRecordIDRequest

// string recordList = 1;
inline void GetVirtualEntityByRecordIDRequest::clear_recordlist() {
  _impl_.recordlist_.ClearToEmpty();
}
inline const std::string& GetVirtualEntityByRecordIDRequest::recordlist() const {
  // @@protoc_insertion_point(field_get:g2engine.GetVirtualEntityByRecordIDRequest.recordList)
  return _internal_recordlist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVirtualEntityByRecordIDRequest::set_recordlist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordlist_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetVirtualEntityByRecordIDRequest.recordList)
}
inline std::string* GetVirtualEntityByRecordIDRequest::mutable_recordlist() {
  std::string* _s = _internal_mutable_recordlist();
  // @@protoc_insertion_point(field_mutable:g2engine.GetVirtualEntityByRecordIDRequest.recordList)
  return _s;
}
inline const std::string& GetVirtualEntityByRecordIDRequest::_internal_recordlist() const {
  return _impl_.recordlist_.Get();
}
inline void GetVirtualEntityByRecordIDRequest::_internal_set_recordlist(const std::string& value) {
  
  _impl_.recordlist_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVirtualEntityByRecordIDRequest::_internal_mutable_recordlist() {
  
  return _impl_.recordlist_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVirtualEntityByRecordIDRequest::release_recordlist() {
  // @@protoc_insertion_point(field_release:g2engine.GetVirtualEntityByRecordIDRequest.recordList)
  return _impl_.recordlist_.Release();
}
inline void GetVirtualEntityByRecordIDRequest::set_allocated_recordlist(std::string* recordlist) {
  if (recordlist != nullptr) {
    
  } else {
    
  }
  _impl_.recordlist_.SetAllocated(recordlist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordlist_.IsDefault()) {
    _impl_.recordlist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetVirtualEntityByRecordIDRequest.recordList)
}

// -------------------------------------------------------------------

// GetVirtualEntityByRecordIDResponse

// string result = 1;
inline void GetVirtualEntityByRecordIDResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& GetVirtualEntityByRecordIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.GetVirtualEntityByRecordIDResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVirtualEntityByRecordIDResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetVirtualEntityByRecordIDResponse.result)
}
inline std::string* GetVirtualEntityByRecordIDResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.GetVirtualEntityByRecordIDResponse.result)
  return _s;
}
inline const std::string& GetVirtualEntityByRecordIDResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void GetVirtualEntityByRecordIDResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVirtualEntityByRecordIDResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVirtualEntityByRecordIDResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.GetVirtualEntityByRecordIDResponse.result)
  return _impl_.result_.Release();
}
inline void GetVirtualEntityByRecordIDResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetVirtualEntityByRecordIDResponse.result)
}

// -------------------------------------------------------------------

// GetVirtualEntityByRecordID_V2Request

// string recordList = 1;
inline void GetVirtualEntityByRecordID_V2Request::clear_recordlist() {
  _impl_.recordlist_.ClearToEmpty();
}
inline const std::string& GetVirtualEntityByRecordID_V2Request::recordlist() const {
  // @@protoc_insertion_point(field_get:g2engine.GetVirtualEntityByRecordID_V2Request.recordList)
  return _internal_recordlist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVirtualEntityByRecordID_V2Request::set_recordlist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordlist_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetVirtualEntityByRecordID_V2Request.recordList)
}
inline std::string* GetVirtualEntityByRecordID_V2Request::mutable_recordlist() {
  std::string* _s = _internal_mutable_recordlist();
  // @@protoc_insertion_point(field_mutable:g2engine.GetVirtualEntityByRecordID_V2Request.recordList)
  return _s;
}
inline const std::string& GetVirtualEntityByRecordID_V2Request::_internal_recordlist() const {
  return _impl_.recordlist_.Get();
}
inline void GetVirtualEntityByRecordID_V2Request::_internal_set_recordlist(const std::string& value) {
  
  _impl_.recordlist_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVirtualEntityByRecordID_V2Request::_internal_mutable_recordlist() {
  
  return _impl_.recordlist_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVirtualEntityByRecordID_V2Request::release_recordlist() {
  // @@protoc_insertion_point(field_release:g2engine.GetVirtualEntityByRecordID_V2Request.recordList)
  return _impl_.recordlist_.Release();
}
inline void GetVirtualEntityByRecordID_V2Request::set_allocated_recordlist(std::string* recordlist) {
  if (recordlist != nullptr) {
    
  } else {
    
  }
  _impl_.recordlist_.SetAllocated(recordlist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordlist_.IsDefault()) {
    _impl_.recordlist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetVirtualEntityByRecordID_V2Request.recordList)
}

// int64 flags = 2;
inline void GetVirtualEntityByRecordID_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t GetVirtualEntityByRecordID_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t GetVirtualEntityByRecordID_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.GetVirtualEntityByRecordID_V2Request.flags)
  return _internal_flags();
}
inline void GetVirtualEntityByRecordID_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void GetVirtualEntityByRecordID_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.GetVirtualEntityByRecordID_V2Request.flags)
}

// -------------------------------------------------------------------

// GetVirtualEntityByRecordID_V2Response

// string result = 1;
inline void GetVirtualEntityByRecordID_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& GetVirtualEntityByRecordID_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.GetVirtualEntityByRecordID_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVirtualEntityByRecordID_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.GetVirtualEntityByRecordID_V2Response.result)
}
inline std::string* GetVirtualEntityByRecordID_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.GetVirtualEntityByRecordID_V2Response.result)
  return _s;
}
inline const std::string& GetVirtualEntityByRecordID_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void GetVirtualEntityByRecordID_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVirtualEntityByRecordID_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVirtualEntityByRecordID_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.GetVirtualEntityByRecordID_V2Response.result)
  return _impl_.result_.Release();
}
inline void GetVirtualEntityByRecordID_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.GetVirtualEntityByRecordID_V2Response.result)
}

// -------------------------------------------------------------------

// HowEntityByEntityIDRequest

// int64 entityID = 1;
inline void HowEntityByEntityIDRequest::clear_entityid() {
  _impl_.entityid_ = int64_t{0};
}
inline int64_t HowEntityByEntityIDRequest::_internal_entityid() const {
  return _impl_.entityid_;
}
inline int64_t HowEntityByEntityIDRequest::entityid() const {
  // @@protoc_insertion_point(field_get:g2engine.HowEntityByEntityIDRequest.entityID)
  return _internal_entityid();
}
inline void HowEntityByEntityIDRequest::_internal_set_entityid(int64_t value) {
  
  _impl_.entityid_ = value;
}
inline void HowEntityByEntityIDRequest::set_entityid(int64_t value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:g2engine.HowEntityByEntityIDRequest.entityID)
}

// -------------------------------------------------------------------

// HowEntityByEntityIDResponse

// string result = 1;
inline void HowEntityByEntityIDResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& HowEntityByEntityIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.HowEntityByEntityIDResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HowEntityByEntityIDResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.HowEntityByEntityIDResponse.result)
}
inline std::string* HowEntityByEntityIDResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.HowEntityByEntityIDResponse.result)
  return _s;
}
inline const std::string& HowEntityByEntityIDResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void HowEntityByEntityIDResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* HowEntityByEntityIDResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* HowEntityByEntityIDResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.HowEntityByEntityIDResponse.result)
  return _impl_.result_.Release();
}
inline void HowEntityByEntityIDResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.HowEntityByEntityIDResponse.result)
}

// -------------------------------------------------------------------

// HowEntityByEntityID_V2Request

// int64 entityID = 1;
inline void HowEntityByEntityID_V2Request::clear_entityid() {
  _impl_.entityid_ = int64_t{0};
}
inline int64_t HowEntityByEntityID_V2Request::_internal_entityid() const {
  return _impl_.entityid_;
}
inline int64_t HowEntityByEntityID_V2Request::entityid() const {
  // @@protoc_insertion_point(field_get:g2engine.HowEntityByEntityID_V2Request.entityID)
  return _internal_entityid();
}
inline void HowEntityByEntityID_V2Request::_internal_set_entityid(int64_t value) {
  
  _impl_.entityid_ = value;
}
inline void HowEntityByEntityID_V2Request::set_entityid(int64_t value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:g2engine.HowEntityByEntityID_V2Request.entityID)
}

// int64 flags = 2;
inline void HowEntityByEntityID_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t HowEntityByEntityID_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t HowEntityByEntityID_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.HowEntityByEntityID_V2Request.flags)
  return _internal_flags();
}
inline void HowEntityByEntityID_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void HowEntityByEntityID_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.HowEntityByEntityID_V2Request.flags)
}

// -------------------------------------------------------------------

// HowEntityByEntityID_V2Response

// string result = 1;
inline void HowEntityByEntityID_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& HowEntityByEntityID_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.HowEntityByEntityID_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HowEntityByEntityID_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.HowEntityByEntityID_V2Response.result)
}
inline std::string* HowEntityByEntityID_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.HowEntityByEntityID_V2Response.result)
  return _s;
}
inline const std::string& HowEntityByEntityID_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void HowEntityByEntityID_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* HowEntityByEntityID_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* HowEntityByEntityID_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.HowEntityByEntityID_V2Response.result)
  return _impl_.result_.Release();
}
inline void HowEntityByEntityID_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.HowEntityByEntityID_V2Response.result)
}

// -------------------------------------------------------------------

// InitRequest

// string moduleName = 1;
inline void InitRequest::clear_modulename() {
  _impl_.modulename_.ClearToEmpty();
}
inline const std::string& InitRequest::modulename() const {
  // @@protoc_insertion_point(field_get:g2engine.InitRequest.moduleName)
  return _internal_modulename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitRequest::set_modulename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.modulename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.InitRequest.moduleName)
}
inline std::string* InitRequest::mutable_modulename() {
  std::string* _s = _internal_mutable_modulename();
  // @@protoc_insertion_point(field_mutable:g2engine.InitRequest.moduleName)
  return _s;
}
inline const std::string& InitRequest::_internal_modulename() const {
  return _impl_.modulename_.Get();
}
inline void InitRequest::_internal_set_modulename(const std::string& value) {
  
  _impl_.modulename_.Set(value, GetArenaForAllocation());
}
inline std::string* InitRequest::_internal_mutable_modulename() {
  
  return _impl_.modulename_.Mutable(GetArenaForAllocation());
}
inline std::string* InitRequest::release_modulename() {
  // @@protoc_insertion_point(field_release:g2engine.InitRequest.moduleName)
  return _impl_.modulename_.Release();
}
inline void InitRequest::set_allocated_modulename(std::string* modulename) {
  if (modulename != nullptr) {
    
  } else {
    
  }
  _impl_.modulename_.SetAllocated(modulename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.modulename_.IsDefault()) {
    _impl_.modulename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.InitRequest.moduleName)
}

// string iniParams = 2;
inline void InitRequest::clear_iniparams() {
  _impl_.iniparams_.ClearToEmpty();
}
inline const std::string& InitRequest::iniparams() const {
  // @@protoc_insertion_point(field_get:g2engine.InitRequest.iniParams)
  return _internal_iniparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitRequest::set_iniparams(ArgT0&& arg0, ArgT... args) {
 
 _impl_.iniparams_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.InitRequest.iniParams)
}
inline std::string* InitRequest::mutable_iniparams() {
  std::string* _s = _internal_mutable_iniparams();
  // @@protoc_insertion_point(field_mutable:g2engine.InitRequest.iniParams)
  return _s;
}
inline const std::string& InitRequest::_internal_iniparams() const {
  return _impl_.iniparams_.Get();
}
inline void InitRequest::_internal_set_iniparams(const std::string& value) {
  
  _impl_.iniparams_.Set(value, GetArenaForAllocation());
}
inline std::string* InitRequest::_internal_mutable_iniparams() {
  
  return _impl_.iniparams_.Mutable(GetArenaForAllocation());
}
inline std::string* InitRequest::release_iniparams() {
  // @@protoc_insertion_point(field_release:g2engine.InitRequest.iniParams)
  return _impl_.iniparams_.Release();
}
inline void InitRequest::set_allocated_iniparams(std::string* iniparams) {
  if (iniparams != nullptr) {
    
  } else {
    
  }
  _impl_.iniparams_.SetAllocated(iniparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.iniparams_.IsDefault()) {
    _impl_.iniparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.InitRequest.iniParams)
}

// int32 verboseLogging = 3;
inline void InitRequest::clear_verboselogging() {
  _impl_.verboselogging_ = 0;
}
inline int32_t InitRequest::_internal_verboselogging() const {
  return _impl_.verboselogging_;
}
inline int32_t InitRequest::verboselogging() const {
  // @@protoc_insertion_point(field_get:g2engine.InitRequest.verboseLogging)
  return _internal_verboselogging();
}
inline void InitRequest::_internal_set_verboselogging(int32_t value) {
  
  _impl_.verboselogging_ = value;
}
inline void InitRequest::set_verboselogging(int32_t value) {
  _internal_set_verboselogging(value);
  // @@protoc_insertion_point(field_set:g2engine.InitRequest.verboseLogging)
}

// -------------------------------------------------------------------

// InitResponse

// -------------------------------------------------------------------

// InitWithConfigIDRequest

// string moduleName = 1;
inline void InitWithConfigIDRequest::clear_modulename() {
  _impl_.modulename_.ClearToEmpty();
}
inline const std::string& InitWithConfigIDRequest::modulename() const {
  // @@protoc_insertion_point(field_get:g2engine.InitWithConfigIDRequest.moduleName)
  return _internal_modulename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitWithConfigIDRequest::set_modulename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.modulename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.InitWithConfigIDRequest.moduleName)
}
inline std::string* InitWithConfigIDRequest::mutable_modulename() {
  std::string* _s = _internal_mutable_modulename();
  // @@protoc_insertion_point(field_mutable:g2engine.InitWithConfigIDRequest.moduleName)
  return _s;
}
inline const std::string& InitWithConfigIDRequest::_internal_modulename() const {
  return _impl_.modulename_.Get();
}
inline void InitWithConfigIDRequest::_internal_set_modulename(const std::string& value) {
  
  _impl_.modulename_.Set(value, GetArenaForAllocation());
}
inline std::string* InitWithConfigIDRequest::_internal_mutable_modulename() {
  
  return _impl_.modulename_.Mutable(GetArenaForAllocation());
}
inline std::string* InitWithConfigIDRequest::release_modulename() {
  // @@protoc_insertion_point(field_release:g2engine.InitWithConfigIDRequest.moduleName)
  return _impl_.modulename_.Release();
}
inline void InitWithConfigIDRequest::set_allocated_modulename(std::string* modulename) {
  if (modulename != nullptr) {
    
  } else {
    
  }
  _impl_.modulename_.SetAllocated(modulename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.modulename_.IsDefault()) {
    _impl_.modulename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.InitWithConfigIDRequest.moduleName)
}

// string iniParams = 2;
inline void InitWithConfigIDRequest::clear_iniparams() {
  _impl_.iniparams_.ClearToEmpty();
}
inline const std::string& InitWithConfigIDRequest::iniparams() const {
  // @@protoc_insertion_point(field_get:g2engine.InitWithConfigIDRequest.iniParams)
  return _internal_iniparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitWithConfigIDRequest::set_iniparams(ArgT0&& arg0, ArgT... args) {
 
 _impl_.iniparams_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.InitWithConfigIDRequest.iniParams)
}
inline std::string* InitWithConfigIDRequest::mutable_iniparams() {
  std::string* _s = _internal_mutable_iniparams();
  // @@protoc_insertion_point(field_mutable:g2engine.InitWithConfigIDRequest.iniParams)
  return _s;
}
inline const std::string& InitWithConfigIDRequest::_internal_iniparams() const {
  return _impl_.iniparams_.Get();
}
inline void InitWithConfigIDRequest::_internal_set_iniparams(const std::string& value) {
  
  _impl_.iniparams_.Set(value, GetArenaForAllocation());
}
inline std::string* InitWithConfigIDRequest::_internal_mutable_iniparams() {
  
  return _impl_.iniparams_.Mutable(GetArenaForAllocation());
}
inline std::string* InitWithConfigIDRequest::release_iniparams() {
  // @@protoc_insertion_point(field_release:g2engine.InitWithConfigIDRequest.iniParams)
  return _impl_.iniparams_.Release();
}
inline void InitWithConfigIDRequest::set_allocated_iniparams(std::string* iniparams) {
  if (iniparams != nullptr) {
    
  } else {
    
  }
  _impl_.iniparams_.SetAllocated(iniparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.iniparams_.IsDefault()) {
    _impl_.iniparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.InitWithConfigIDRequest.iniParams)
}

// int64 initConfigID = 3;
inline void InitWithConfigIDRequest::clear_initconfigid() {
  _impl_.initconfigid_ = int64_t{0};
}
inline int64_t InitWithConfigIDRequest::_internal_initconfigid() const {
  return _impl_.initconfigid_;
}
inline int64_t InitWithConfigIDRequest::initconfigid() const {
  // @@protoc_insertion_point(field_get:g2engine.InitWithConfigIDRequest.initConfigID)
  return _internal_initconfigid();
}
inline void InitWithConfigIDRequest::_internal_set_initconfigid(int64_t value) {
  
  _impl_.initconfigid_ = value;
}
inline void InitWithConfigIDRequest::set_initconfigid(int64_t value) {
  _internal_set_initconfigid(value);
  // @@protoc_insertion_point(field_set:g2engine.InitWithConfigIDRequest.initConfigID)
}

// int32 verboseLogging = 4;
inline void InitWithConfigIDRequest::clear_verboselogging() {
  _impl_.verboselogging_ = 0;
}
inline int32_t InitWithConfigIDRequest::_internal_verboselogging() const {
  return _impl_.verboselogging_;
}
inline int32_t InitWithConfigIDRequest::verboselogging() const {
  // @@protoc_insertion_point(field_get:g2engine.InitWithConfigIDRequest.verboseLogging)
  return _internal_verboselogging();
}
inline void InitWithConfigIDRequest::_internal_set_verboselogging(int32_t value) {
  
  _impl_.verboselogging_ = value;
}
inline void InitWithConfigIDRequest::set_verboselogging(int32_t value) {
  _internal_set_verboselogging(value);
  // @@protoc_insertion_point(field_set:g2engine.InitWithConfigIDRequest.verboseLogging)
}

// -------------------------------------------------------------------

// InitWithConfigIDResponse

// -------------------------------------------------------------------

// PrimeEngineRequest

// -------------------------------------------------------------------

// PrimeEngineResponse

// -------------------------------------------------------------------

// ProcessRequest

// string record = 1;
inline void ProcessRequest::clear_record() {
  _impl_.record_.ClearToEmpty();
}
inline const std::string& ProcessRequest::record() const {
  // @@protoc_insertion_point(field_get:g2engine.ProcessRequest.record)
  return _internal_record();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessRequest::set_record(ArgT0&& arg0, ArgT... args) {
 
 _impl_.record_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ProcessRequest.record)
}
inline std::string* ProcessRequest::mutable_record() {
  std::string* _s = _internal_mutable_record();
  // @@protoc_insertion_point(field_mutable:g2engine.ProcessRequest.record)
  return _s;
}
inline const std::string& ProcessRequest::_internal_record() const {
  return _impl_.record_.Get();
}
inline void ProcessRequest::_internal_set_record(const std::string& value) {
  
  _impl_.record_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessRequest::_internal_mutable_record() {
  
  return _impl_.record_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessRequest::release_record() {
  // @@protoc_insertion_point(field_release:g2engine.ProcessRequest.record)
  return _impl_.record_.Release();
}
inline void ProcessRequest::set_allocated_record(std::string* record) {
  if (record != nullptr) {
    
  } else {
    
  }
  _impl_.record_.SetAllocated(record, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.record_.IsDefault()) {
    _impl_.record_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ProcessRequest.record)
}

// -------------------------------------------------------------------

// ProcessResponse

// -------------------------------------------------------------------

// ProcessRedoRecordRequest

// -------------------------------------------------------------------

// ProcessRedoRecordResponse

// string result = 1;
inline void ProcessRedoRecordResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& ProcessRedoRecordResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.ProcessRedoRecordResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessRedoRecordResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ProcessRedoRecordResponse.result)
}
inline std::string* ProcessRedoRecordResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.ProcessRedoRecordResponse.result)
  return _s;
}
inline const std::string& ProcessRedoRecordResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void ProcessRedoRecordResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessRedoRecordResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessRedoRecordResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.ProcessRedoRecordResponse.result)
  return _impl_.result_.Release();
}
inline void ProcessRedoRecordResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ProcessRedoRecordResponse.result)
}

// -------------------------------------------------------------------

// ProcessRedoRecordWithInfoRequest

// int64 flags = 1;
inline void ProcessRedoRecordWithInfoRequest::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t ProcessRedoRecordWithInfoRequest::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t ProcessRedoRecordWithInfoRequest::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.ProcessRedoRecordWithInfoRequest.flags)
  return _internal_flags();
}
inline void ProcessRedoRecordWithInfoRequest::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void ProcessRedoRecordWithInfoRequest::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.ProcessRedoRecordWithInfoRequest.flags)
}

// -------------------------------------------------------------------

// ProcessRedoRecordWithInfoResponse

// string result = 1;
inline void ProcessRedoRecordWithInfoResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& ProcessRedoRecordWithInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.ProcessRedoRecordWithInfoResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessRedoRecordWithInfoResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ProcessRedoRecordWithInfoResponse.result)
}
inline std::string* ProcessRedoRecordWithInfoResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.ProcessRedoRecordWithInfoResponse.result)
  return _s;
}
inline const std::string& ProcessRedoRecordWithInfoResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void ProcessRedoRecordWithInfoResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessRedoRecordWithInfoResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessRedoRecordWithInfoResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.ProcessRedoRecordWithInfoResponse.result)
  return _impl_.result_.Release();
}
inline void ProcessRedoRecordWithInfoResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ProcessRedoRecordWithInfoResponse.result)
}

// string withInfo = 2;
inline void ProcessRedoRecordWithInfoResponse::clear_withinfo() {
  _impl_.withinfo_.ClearToEmpty();
}
inline const std::string& ProcessRedoRecordWithInfoResponse::withinfo() const {
  // @@protoc_insertion_point(field_get:g2engine.ProcessRedoRecordWithInfoResponse.withInfo)
  return _internal_withinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessRedoRecordWithInfoResponse::set_withinfo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.withinfo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ProcessRedoRecordWithInfoResponse.withInfo)
}
inline std::string* ProcessRedoRecordWithInfoResponse::mutable_withinfo() {
  std::string* _s = _internal_mutable_withinfo();
  // @@protoc_insertion_point(field_mutable:g2engine.ProcessRedoRecordWithInfoResponse.withInfo)
  return _s;
}
inline const std::string& ProcessRedoRecordWithInfoResponse::_internal_withinfo() const {
  return _impl_.withinfo_.Get();
}
inline void ProcessRedoRecordWithInfoResponse::_internal_set_withinfo(const std::string& value) {
  
  _impl_.withinfo_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessRedoRecordWithInfoResponse::_internal_mutable_withinfo() {
  
  return _impl_.withinfo_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessRedoRecordWithInfoResponse::release_withinfo() {
  // @@protoc_insertion_point(field_release:g2engine.ProcessRedoRecordWithInfoResponse.withInfo)
  return _impl_.withinfo_.Release();
}
inline void ProcessRedoRecordWithInfoResponse::set_allocated_withinfo(std::string* withinfo) {
  if (withinfo != nullptr) {
    
  } else {
    
  }
  _impl_.withinfo_.SetAllocated(withinfo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.withinfo_.IsDefault()) {
    _impl_.withinfo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ProcessRedoRecordWithInfoResponse.withInfo)
}

// -------------------------------------------------------------------

// ProcessWithInfoRequest

// string record = 1;
inline void ProcessWithInfoRequest::clear_record() {
  _impl_.record_.ClearToEmpty();
}
inline const std::string& ProcessWithInfoRequest::record() const {
  // @@protoc_insertion_point(field_get:g2engine.ProcessWithInfoRequest.record)
  return _internal_record();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessWithInfoRequest::set_record(ArgT0&& arg0, ArgT... args) {
 
 _impl_.record_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ProcessWithInfoRequest.record)
}
inline std::string* ProcessWithInfoRequest::mutable_record() {
  std::string* _s = _internal_mutable_record();
  // @@protoc_insertion_point(field_mutable:g2engine.ProcessWithInfoRequest.record)
  return _s;
}
inline const std::string& ProcessWithInfoRequest::_internal_record() const {
  return _impl_.record_.Get();
}
inline void ProcessWithInfoRequest::_internal_set_record(const std::string& value) {
  
  _impl_.record_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessWithInfoRequest::_internal_mutable_record() {
  
  return _impl_.record_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessWithInfoRequest::release_record() {
  // @@protoc_insertion_point(field_release:g2engine.ProcessWithInfoRequest.record)
  return _impl_.record_.Release();
}
inline void ProcessWithInfoRequest::set_allocated_record(std::string* record) {
  if (record != nullptr) {
    
  } else {
    
  }
  _impl_.record_.SetAllocated(record, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.record_.IsDefault()) {
    _impl_.record_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ProcessWithInfoRequest.record)
}

// int64 flags = 2;
inline void ProcessWithInfoRequest::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t ProcessWithInfoRequest::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t ProcessWithInfoRequest::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.ProcessWithInfoRequest.flags)
  return _internal_flags();
}
inline void ProcessWithInfoRequest::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void ProcessWithInfoRequest::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.ProcessWithInfoRequest.flags)
}

// -------------------------------------------------------------------

// ProcessWithInfoResponse

// string result = 1;
inline void ProcessWithInfoResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& ProcessWithInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.ProcessWithInfoResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessWithInfoResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ProcessWithInfoResponse.result)
}
inline std::string* ProcessWithInfoResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.ProcessWithInfoResponse.result)
  return _s;
}
inline const std::string& ProcessWithInfoResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void ProcessWithInfoResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessWithInfoResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessWithInfoResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.ProcessWithInfoResponse.result)
  return _impl_.result_.Release();
}
inline void ProcessWithInfoResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ProcessWithInfoResponse.result)
}

// -------------------------------------------------------------------

// ProcessWithResponseRequest

// string record = 1;
inline void ProcessWithResponseRequest::clear_record() {
  _impl_.record_.ClearToEmpty();
}
inline const std::string& ProcessWithResponseRequest::record() const {
  // @@protoc_insertion_point(field_get:g2engine.ProcessWithResponseRequest.record)
  return _internal_record();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessWithResponseRequest::set_record(ArgT0&& arg0, ArgT... args) {
 
 _impl_.record_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ProcessWithResponseRequest.record)
}
inline std::string* ProcessWithResponseRequest::mutable_record() {
  std::string* _s = _internal_mutable_record();
  // @@protoc_insertion_point(field_mutable:g2engine.ProcessWithResponseRequest.record)
  return _s;
}
inline const std::string& ProcessWithResponseRequest::_internal_record() const {
  return _impl_.record_.Get();
}
inline void ProcessWithResponseRequest::_internal_set_record(const std::string& value) {
  
  _impl_.record_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessWithResponseRequest::_internal_mutable_record() {
  
  return _impl_.record_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessWithResponseRequest::release_record() {
  // @@protoc_insertion_point(field_release:g2engine.ProcessWithResponseRequest.record)
  return _impl_.record_.Release();
}
inline void ProcessWithResponseRequest::set_allocated_record(std::string* record) {
  if (record != nullptr) {
    
  } else {
    
  }
  _impl_.record_.SetAllocated(record, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.record_.IsDefault()) {
    _impl_.record_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ProcessWithResponseRequest.record)
}

// -------------------------------------------------------------------

// ProcessWithResponseResponse

// string result = 1;
inline void ProcessWithResponseResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& ProcessWithResponseResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.ProcessWithResponseResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessWithResponseResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ProcessWithResponseResponse.result)
}
inline std::string* ProcessWithResponseResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.ProcessWithResponseResponse.result)
  return _s;
}
inline const std::string& ProcessWithResponseResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void ProcessWithResponseResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessWithResponseResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessWithResponseResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.ProcessWithResponseResponse.result)
  return _impl_.result_.Release();
}
inline void ProcessWithResponseResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ProcessWithResponseResponse.result)
}

// -------------------------------------------------------------------

// ProcessWithResponseResizeRequest

// string record = 1;
inline void ProcessWithResponseResizeRequest::clear_record() {
  _impl_.record_.ClearToEmpty();
}
inline const std::string& ProcessWithResponseResizeRequest::record() const {
  // @@protoc_insertion_point(field_get:g2engine.ProcessWithResponseResizeRequest.record)
  return _internal_record();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessWithResponseResizeRequest::set_record(ArgT0&& arg0, ArgT... args) {
 
 _impl_.record_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ProcessWithResponseResizeRequest.record)
}
inline std::string* ProcessWithResponseResizeRequest::mutable_record() {
  std::string* _s = _internal_mutable_record();
  // @@protoc_insertion_point(field_mutable:g2engine.ProcessWithResponseResizeRequest.record)
  return _s;
}
inline const std::string& ProcessWithResponseResizeRequest::_internal_record() const {
  return _impl_.record_.Get();
}
inline void ProcessWithResponseResizeRequest::_internal_set_record(const std::string& value) {
  
  _impl_.record_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessWithResponseResizeRequest::_internal_mutable_record() {
  
  return _impl_.record_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessWithResponseResizeRequest::release_record() {
  // @@protoc_insertion_point(field_release:g2engine.ProcessWithResponseResizeRequest.record)
  return _impl_.record_.Release();
}
inline void ProcessWithResponseResizeRequest::set_allocated_record(std::string* record) {
  if (record != nullptr) {
    
  } else {
    
  }
  _impl_.record_.SetAllocated(record, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.record_.IsDefault()) {
    _impl_.record_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ProcessWithResponseResizeRequest.record)
}

// -------------------------------------------------------------------

// ProcessWithResponseResizeResponse

// string result = 1;
inline void ProcessWithResponseResizeResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& ProcessWithResponseResizeResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.ProcessWithResponseResizeResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessWithResponseResizeResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ProcessWithResponseResizeResponse.result)
}
inline std::string* ProcessWithResponseResizeResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.ProcessWithResponseResizeResponse.result)
  return _s;
}
inline const std::string& ProcessWithResponseResizeResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void ProcessWithResponseResizeResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessWithResponseResizeResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* ProcessWithResponseResizeResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.ProcessWithResponseResizeResponse.result)
  return _impl_.result_.Release();
}
inline void ProcessWithResponseResizeResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ProcessWithResponseResizeResponse.result)
}

// -------------------------------------------------------------------

// PurgeRepositoryRequest

// -------------------------------------------------------------------

// PurgeRepositoryResponse

// -------------------------------------------------------------------

// ReevaluateEntityRequest

// int64 entityID = 1;
inline void ReevaluateEntityRequest::clear_entityid() {
  _impl_.entityid_ = int64_t{0};
}
inline int64_t ReevaluateEntityRequest::_internal_entityid() const {
  return _impl_.entityid_;
}
inline int64_t ReevaluateEntityRequest::entityid() const {
  // @@protoc_insertion_point(field_get:g2engine.ReevaluateEntityRequest.entityID)
  return _internal_entityid();
}
inline void ReevaluateEntityRequest::_internal_set_entityid(int64_t value) {
  
  _impl_.entityid_ = value;
}
inline void ReevaluateEntityRequest::set_entityid(int64_t value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:g2engine.ReevaluateEntityRequest.entityID)
}

// int64 flags = 2;
inline void ReevaluateEntityRequest::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t ReevaluateEntityRequest::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t ReevaluateEntityRequest::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.ReevaluateEntityRequest.flags)
  return _internal_flags();
}
inline void ReevaluateEntityRequest::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void ReevaluateEntityRequest::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.ReevaluateEntityRequest.flags)
}

// -------------------------------------------------------------------

// ReevaluateEntityResponse

// -------------------------------------------------------------------

// ReevaluateEntityWithInfoRequest

// int64 entityID = 1;
inline void ReevaluateEntityWithInfoRequest::clear_entityid() {
  _impl_.entityid_ = int64_t{0};
}
inline int64_t ReevaluateEntityWithInfoRequest::_internal_entityid() const {
  return _impl_.entityid_;
}
inline int64_t ReevaluateEntityWithInfoRequest::entityid() const {
  // @@protoc_insertion_point(field_get:g2engine.ReevaluateEntityWithInfoRequest.entityID)
  return _internal_entityid();
}
inline void ReevaluateEntityWithInfoRequest::_internal_set_entityid(int64_t value) {
  
  _impl_.entityid_ = value;
}
inline void ReevaluateEntityWithInfoRequest::set_entityid(int64_t value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:g2engine.ReevaluateEntityWithInfoRequest.entityID)
}

// int64 flags = 2;
inline void ReevaluateEntityWithInfoRequest::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t ReevaluateEntityWithInfoRequest::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t ReevaluateEntityWithInfoRequest::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.ReevaluateEntityWithInfoRequest.flags)
  return _internal_flags();
}
inline void ReevaluateEntityWithInfoRequest::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void ReevaluateEntityWithInfoRequest::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.ReevaluateEntityWithInfoRequest.flags)
}

// -------------------------------------------------------------------

// ReevaluateEntityWithInfoResponse

// string result = 1;
inline void ReevaluateEntityWithInfoResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& ReevaluateEntityWithInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.ReevaluateEntityWithInfoResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReevaluateEntityWithInfoResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ReevaluateEntityWithInfoResponse.result)
}
inline std::string* ReevaluateEntityWithInfoResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.ReevaluateEntityWithInfoResponse.result)
  return _s;
}
inline const std::string& ReevaluateEntityWithInfoResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void ReevaluateEntityWithInfoResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* ReevaluateEntityWithInfoResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* ReevaluateEntityWithInfoResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.ReevaluateEntityWithInfoResponse.result)
  return _impl_.result_.Release();
}
inline void ReevaluateEntityWithInfoResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ReevaluateEntityWithInfoResponse.result)
}

// -------------------------------------------------------------------

// ReevaluateRecordRequest

// string dataSourceCode = 1;
inline void ReevaluateRecordRequest::clear_datasourcecode() {
  _impl_.datasourcecode_.ClearToEmpty();
}
inline const std::string& ReevaluateRecordRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:g2engine.ReevaluateRecordRequest.dataSourceCode)
  return _internal_datasourcecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReevaluateRecordRequest::set_datasourcecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ReevaluateRecordRequest.dataSourceCode)
}
inline std::string* ReevaluateRecordRequest::mutable_datasourcecode() {
  std::string* _s = _internal_mutable_datasourcecode();
  // @@protoc_insertion_point(field_mutable:g2engine.ReevaluateRecordRequest.dataSourceCode)
  return _s;
}
inline const std::string& ReevaluateRecordRequest::_internal_datasourcecode() const {
  return _impl_.datasourcecode_.Get();
}
inline void ReevaluateRecordRequest::_internal_set_datasourcecode(const std::string& value) {
  
  _impl_.datasourcecode_.Set(value, GetArenaForAllocation());
}
inline std::string* ReevaluateRecordRequest::_internal_mutable_datasourcecode() {
  
  return _impl_.datasourcecode_.Mutable(GetArenaForAllocation());
}
inline std::string* ReevaluateRecordRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:g2engine.ReevaluateRecordRequest.dataSourceCode)
  return _impl_.datasourcecode_.Release();
}
inline void ReevaluateRecordRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode_.SetAllocated(datasourcecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode_.IsDefault()) {
    _impl_.datasourcecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ReevaluateRecordRequest.dataSourceCode)
}

// string recordID = 2;
inline void ReevaluateRecordRequest::clear_recordid() {
  _impl_.recordid_.ClearToEmpty();
}
inline const std::string& ReevaluateRecordRequest::recordid() const {
  // @@protoc_insertion_point(field_get:g2engine.ReevaluateRecordRequest.recordID)
  return _internal_recordid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReevaluateRecordRequest::set_recordid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ReevaluateRecordRequest.recordID)
}
inline std::string* ReevaluateRecordRequest::mutable_recordid() {
  std::string* _s = _internal_mutable_recordid();
  // @@protoc_insertion_point(field_mutable:g2engine.ReevaluateRecordRequest.recordID)
  return _s;
}
inline const std::string& ReevaluateRecordRequest::_internal_recordid() const {
  return _impl_.recordid_.Get();
}
inline void ReevaluateRecordRequest::_internal_set_recordid(const std::string& value) {
  
  _impl_.recordid_.Set(value, GetArenaForAllocation());
}
inline std::string* ReevaluateRecordRequest::_internal_mutable_recordid() {
  
  return _impl_.recordid_.Mutable(GetArenaForAllocation());
}
inline std::string* ReevaluateRecordRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:g2engine.ReevaluateRecordRequest.recordID)
  return _impl_.recordid_.Release();
}
inline void ReevaluateRecordRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  _impl_.recordid_.SetAllocated(recordid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid_.IsDefault()) {
    _impl_.recordid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ReevaluateRecordRequest.recordID)
}

// int64 flags = 3;
inline void ReevaluateRecordRequest::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t ReevaluateRecordRequest::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t ReevaluateRecordRequest::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.ReevaluateRecordRequest.flags)
  return _internal_flags();
}
inline void ReevaluateRecordRequest::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void ReevaluateRecordRequest::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.ReevaluateRecordRequest.flags)
}

// -------------------------------------------------------------------

// ReevaluateRecordResponse

// -------------------------------------------------------------------

// ReevaluateRecordWithInfoRequest

// string dataSourceCode = 1;
inline void ReevaluateRecordWithInfoRequest::clear_datasourcecode() {
  _impl_.datasourcecode_.ClearToEmpty();
}
inline const std::string& ReevaluateRecordWithInfoRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:g2engine.ReevaluateRecordWithInfoRequest.dataSourceCode)
  return _internal_datasourcecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReevaluateRecordWithInfoRequest::set_datasourcecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ReevaluateRecordWithInfoRequest.dataSourceCode)
}
inline std::string* ReevaluateRecordWithInfoRequest::mutable_datasourcecode() {
  std::string* _s = _internal_mutable_datasourcecode();
  // @@protoc_insertion_point(field_mutable:g2engine.ReevaluateRecordWithInfoRequest.dataSourceCode)
  return _s;
}
inline const std::string& ReevaluateRecordWithInfoRequest::_internal_datasourcecode() const {
  return _impl_.datasourcecode_.Get();
}
inline void ReevaluateRecordWithInfoRequest::_internal_set_datasourcecode(const std::string& value) {
  
  _impl_.datasourcecode_.Set(value, GetArenaForAllocation());
}
inline std::string* ReevaluateRecordWithInfoRequest::_internal_mutable_datasourcecode() {
  
  return _impl_.datasourcecode_.Mutable(GetArenaForAllocation());
}
inline std::string* ReevaluateRecordWithInfoRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:g2engine.ReevaluateRecordWithInfoRequest.dataSourceCode)
  return _impl_.datasourcecode_.Release();
}
inline void ReevaluateRecordWithInfoRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode_.SetAllocated(datasourcecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode_.IsDefault()) {
    _impl_.datasourcecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ReevaluateRecordWithInfoRequest.dataSourceCode)
}

// string recordID = 2;
inline void ReevaluateRecordWithInfoRequest::clear_recordid() {
  _impl_.recordid_.ClearToEmpty();
}
inline const std::string& ReevaluateRecordWithInfoRequest::recordid() const {
  // @@protoc_insertion_point(field_get:g2engine.ReevaluateRecordWithInfoRequest.recordID)
  return _internal_recordid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReevaluateRecordWithInfoRequest::set_recordid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ReevaluateRecordWithInfoRequest.recordID)
}
inline std::string* ReevaluateRecordWithInfoRequest::mutable_recordid() {
  std::string* _s = _internal_mutable_recordid();
  // @@protoc_insertion_point(field_mutable:g2engine.ReevaluateRecordWithInfoRequest.recordID)
  return _s;
}
inline const std::string& ReevaluateRecordWithInfoRequest::_internal_recordid() const {
  return _impl_.recordid_.Get();
}
inline void ReevaluateRecordWithInfoRequest::_internal_set_recordid(const std::string& value) {
  
  _impl_.recordid_.Set(value, GetArenaForAllocation());
}
inline std::string* ReevaluateRecordWithInfoRequest::_internal_mutable_recordid() {
  
  return _impl_.recordid_.Mutable(GetArenaForAllocation());
}
inline std::string* ReevaluateRecordWithInfoRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:g2engine.ReevaluateRecordWithInfoRequest.recordID)
  return _impl_.recordid_.Release();
}
inline void ReevaluateRecordWithInfoRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  _impl_.recordid_.SetAllocated(recordid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid_.IsDefault()) {
    _impl_.recordid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ReevaluateRecordWithInfoRequest.recordID)
}

// int64 flags = 3;
inline void ReevaluateRecordWithInfoRequest::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t ReevaluateRecordWithInfoRequest::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t ReevaluateRecordWithInfoRequest::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.ReevaluateRecordWithInfoRequest.flags)
  return _internal_flags();
}
inline void ReevaluateRecordWithInfoRequest::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void ReevaluateRecordWithInfoRequest::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.ReevaluateRecordWithInfoRequest.flags)
}

// -------------------------------------------------------------------

// ReevaluateRecordWithInfoResponse

// string result = 1;
inline void ReevaluateRecordWithInfoResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& ReevaluateRecordWithInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.ReevaluateRecordWithInfoResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReevaluateRecordWithInfoResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ReevaluateRecordWithInfoResponse.result)
}
inline std::string* ReevaluateRecordWithInfoResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.ReevaluateRecordWithInfoResponse.result)
  return _s;
}
inline const std::string& ReevaluateRecordWithInfoResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void ReevaluateRecordWithInfoResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* ReevaluateRecordWithInfoResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* ReevaluateRecordWithInfoResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.ReevaluateRecordWithInfoResponse.result)
  return _impl_.result_.Release();
}
inline void ReevaluateRecordWithInfoResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ReevaluateRecordWithInfoResponse.result)
}

// -------------------------------------------------------------------

// ReinitRequest

// int64 initConfigID = 1;
inline void ReinitRequest::clear_initconfigid() {
  _impl_.initconfigid_ = int64_t{0};
}
inline int64_t ReinitRequest::_internal_initconfigid() const {
  return _impl_.initconfigid_;
}
inline int64_t ReinitRequest::initconfigid() const {
  // @@protoc_insertion_point(field_get:g2engine.ReinitRequest.initConfigID)
  return _internal_initconfigid();
}
inline void ReinitRequest::_internal_set_initconfigid(int64_t value) {
  
  _impl_.initconfigid_ = value;
}
inline void ReinitRequest::set_initconfigid(int64_t value) {
  _internal_set_initconfigid(value);
  // @@protoc_insertion_point(field_set:g2engine.ReinitRequest.initConfigID)
}

// -------------------------------------------------------------------

// ReinitResponse

// -------------------------------------------------------------------

// ReplaceRecordRequest

// string dataSourceCode = 1;
inline void ReplaceRecordRequest::clear_datasourcecode() {
  _impl_.datasourcecode_.ClearToEmpty();
}
inline const std::string& ReplaceRecordRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:g2engine.ReplaceRecordRequest.dataSourceCode)
  return _internal_datasourcecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplaceRecordRequest::set_datasourcecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ReplaceRecordRequest.dataSourceCode)
}
inline std::string* ReplaceRecordRequest::mutable_datasourcecode() {
  std::string* _s = _internal_mutable_datasourcecode();
  // @@protoc_insertion_point(field_mutable:g2engine.ReplaceRecordRequest.dataSourceCode)
  return _s;
}
inline const std::string& ReplaceRecordRequest::_internal_datasourcecode() const {
  return _impl_.datasourcecode_.Get();
}
inline void ReplaceRecordRequest::_internal_set_datasourcecode(const std::string& value) {
  
  _impl_.datasourcecode_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplaceRecordRequest::_internal_mutable_datasourcecode() {
  
  return _impl_.datasourcecode_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplaceRecordRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:g2engine.ReplaceRecordRequest.dataSourceCode)
  return _impl_.datasourcecode_.Release();
}
inline void ReplaceRecordRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode_.SetAllocated(datasourcecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode_.IsDefault()) {
    _impl_.datasourcecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ReplaceRecordRequest.dataSourceCode)
}

// string recordID = 2;
inline void ReplaceRecordRequest::clear_recordid() {
  _impl_.recordid_.ClearToEmpty();
}
inline const std::string& ReplaceRecordRequest::recordid() const {
  // @@protoc_insertion_point(field_get:g2engine.ReplaceRecordRequest.recordID)
  return _internal_recordid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplaceRecordRequest::set_recordid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ReplaceRecordRequest.recordID)
}
inline std::string* ReplaceRecordRequest::mutable_recordid() {
  std::string* _s = _internal_mutable_recordid();
  // @@protoc_insertion_point(field_mutable:g2engine.ReplaceRecordRequest.recordID)
  return _s;
}
inline const std::string& ReplaceRecordRequest::_internal_recordid() const {
  return _impl_.recordid_.Get();
}
inline void ReplaceRecordRequest::_internal_set_recordid(const std::string& value) {
  
  _impl_.recordid_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplaceRecordRequest::_internal_mutable_recordid() {
  
  return _impl_.recordid_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplaceRecordRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:g2engine.ReplaceRecordRequest.recordID)
  return _impl_.recordid_.Release();
}
inline void ReplaceRecordRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  _impl_.recordid_.SetAllocated(recordid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid_.IsDefault()) {
    _impl_.recordid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ReplaceRecordRequest.recordID)
}

// string jsonData = 3;
inline void ReplaceRecordRequest::clear_jsondata() {
  _impl_.jsondata_.ClearToEmpty();
}
inline const std::string& ReplaceRecordRequest::jsondata() const {
  // @@protoc_insertion_point(field_get:g2engine.ReplaceRecordRequest.jsonData)
  return _internal_jsondata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplaceRecordRequest::set_jsondata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.jsondata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ReplaceRecordRequest.jsonData)
}
inline std::string* ReplaceRecordRequest::mutable_jsondata() {
  std::string* _s = _internal_mutable_jsondata();
  // @@protoc_insertion_point(field_mutable:g2engine.ReplaceRecordRequest.jsonData)
  return _s;
}
inline const std::string& ReplaceRecordRequest::_internal_jsondata() const {
  return _impl_.jsondata_.Get();
}
inline void ReplaceRecordRequest::_internal_set_jsondata(const std::string& value) {
  
  _impl_.jsondata_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplaceRecordRequest::_internal_mutable_jsondata() {
  
  return _impl_.jsondata_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplaceRecordRequest::release_jsondata() {
  // @@protoc_insertion_point(field_release:g2engine.ReplaceRecordRequest.jsonData)
  return _impl_.jsondata_.Release();
}
inline void ReplaceRecordRequest::set_allocated_jsondata(std::string* jsondata) {
  if (jsondata != nullptr) {
    
  } else {
    
  }
  _impl_.jsondata_.SetAllocated(jsondata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.jsondata_.IsDefault()) {
    _impl_.jsondata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ReplaceRecordRequest.jsonData)
}

// string loadID = 4;
inline void ReplaceRecordRequest::clear_loadid() {
  _impl_.loadid_.ClearToEmpty();
}
inline const std::string& ReplaceRecordRequest::loadid() const {
  // @@protoc_insertion_point(field_get:g2engine.ReplaceRecordRequest.loadID)
  return _internal_loadid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplaceRecordRequest::set_loadid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.loadid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ReplaceRecordRequest.loadID)
}
inline std::string* ReplaceRecordRequest::mutable_loadid() {
  std::string* _s = _internal_mutable_loadid();
  // @@protoc_insertion_point(field_mutable:g2engine.ReplaceRecordRequest.loadID)
  return _s;
}
inline const std::string& ReplaceRecordRequest::_internal_loadid() const {
  return _impl_.loadid_.Get();
}
inline void ReplaceRecordRequest::_internal_set_loadid(const std::string& value) {
  
  _impl_.loadid_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplaceRecordRequest::_internal_mutable_loadid() {
  
  return _impl_.loadid_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplaceRecordRequest::release_loadid() {
  // @@protoc_insertion_point(field_release:g2engine.ReplaceRecordRequest.loadID)
  return _impl_.loadid_.Release();
}
inline void ReplaceRecordRequest::set_allocated_loadid(std::string* loadid) {
  if (loadid != nullptr) {
    
  } else {
    
  }
  _impl_.loadid_.SetAllocated(loadid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.loadid_.IsDefault()) {
    _impl_.loadid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ReplaceRecordRequest.loadID)
}

// -------------------------------------------------------------------

// ReplaceRecordResponse

// -------------------------------------------------------------------

// ReplaceRecordWithInfoRequest

// string dataSourceCode = 1;
inline void ReplaceRecordWithInfoRequest::clear_datasourcecode() {
  _impl_.datasourcecode_.ClearToEmpty();
}
inline const std::string& ReplaceRecordWithInfoRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:g2engine.ReplaceRecordWithInfoRequest.dataSourceCode)
  return _internal_datasourcecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplaceRecordWithInfoRequest::set_datasourcecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ReplaceRecordWithInfoRequest.dataSourceCode)
}
inline std::string* ReplaceRecordWithInfoRequest::mutable_datasourcecode() {
  std::string* _s = _internal_mutable_datasourcecode();
  // @@protoc_insertion_point(field_mutable:g2engine.ReplaceRecordWithInfoRequest.dataSourceCode)
  return _s;
}
inline const std::string& ReplaceRecordWithInfoRequest::_internal_datasourcecode() const {
  return _impl_.datasourcecode_.Get();
}
inline void ReplaceRecordWithInfoRequest::_internal_set_datasourcecode(const std::string& value) {
  
  _impl_.datasourcecode_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplaceRecordWithInfoRequest::_internal_mutable_datasourcecode() {
  
  return _impl_.datasourcecode_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplaceRecordWithInfoRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:g2engine.ReplaceRecordWithInfoRequest.dataSourceCode)
  return _impl_.datasourcecode_.Release();
}
inline void ReplaceRecordWithInfoRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode_.SetAllocated(datasourcecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode_.IsDefault()) {
    _impl_.datasourcecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ReplaceRecordWithInfoRequest.dataSourceCode)
}

// string recordID = 2;
inline void ReplaceRecordWithInfoRequest::clear_recordid() {
  _impl_.recordid_.ClearToEmpty();
}
inline const std::string& ReplaceRecordWithInfoRequest::recordid() const {
  // @@protoc_insertion_point(field_get:g2engine.ReplaceRecordWithInfoRequest.recordID)
  return _internal_recordid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplaceRecordWithInfoRequest::set_recordid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ReplaceRecordWithInfoRequest.recordID)
}
inline std::string* ReplaceRecordWithInfoRequest::mutable_recordid() {
  std::string* _s = _internal_mutable_recordid();
  // @@protoc_insertion_point(field_mutable:g2engine.ReplaceRecordWithInfoRequest.recordID)
  return _s;
}
inline const std::string& ReplaceRecordWithInfoRequest::_internal_recordid() const {
  return _impl_.recordid_.Get();
}
inline void ReplaceRecordWithInfoRequest::_internal_set_recordid(const std::string& value) {
  
  _impl_.recordid_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplaceRecordWithInfoRequest::_internal_mutable_recordid() {
  
  return _impl_.recordid_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplaceRecordWithInfoRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:g2engine.ReplaceRecordWithInfoRequest.recordID)
  return _impl_.recordid_.Release();
}
inline void ReplaceRecordWithInfoRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  _impl_.recordid_.SetAllocated(recordid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid_.IsDefault()) {
    _impl_.recordid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ReplaceRecordWithInfoRequest.recordID)
}

// string jsonData = 3;
inline void ReplaceRecordWithInfoRequest::clear_jsondata() {
  _impl_.jsondata_.ClearToEmpty();
}
inline const std::string& ReplaceRecordWithInfoRequest::jsondata() const {
  // @@protoc_insertion_point(field_get:g2engine.ReplaceRecordWithInfoRequest.jsonData)
  return _internal_jsondata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplaceRecordWithInfoRequest::set_jsondata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.jsondata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ReplaceRecordWithInfoRequest.jsonData)
}
inline std::string* ReplaceRecordWithInfoRequest::mutable_jsondata() {
  std::string* _s = _internal_mutable_jsondata();
  // @@protoc_insertion_point(field_mutable:g2engine.ReplaceRecordWithInfoRequest.jsonData)
  return _s;
}
inline const std::string& ReplaceRecordWithInfoRequest::_internal_jsondata() const {
  return _impl_.jsondata_.Get();
}
inline void ReplaceRecordWithInfoRequest::_internal_set_jsondata(const std::string& value) {
  
  _impl_.jsondata_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplaceRecordWithInfoRequest::_internal_mutable_jsondata() {
  
  return _impl_.jsondata_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplaceRecordWithInfoRequest::release_jsondata() {
  // @@protoc_insertion_point(field_release:g2engine.ReplaceRecordWithInfoRequest.jsonData)
  return _impl_.jsondata_.Release();
}
inline void ReplaceRecordWithInfoRequest::set_allocated_jsondata(std::string* jsondata) {
  if (jsondata != nullptr) {
    
  } else {
    
  }
  _impl_.jsondata_.SetAllocated(jsondata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.jsondata_.IsDefault()) {
    _impl_.jsondata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ReplaceRecordWithInfoRequest.jsonData)
}

// string loadID = 4;
inline void ReplaceRecordWithInfoRequest::clear_loadid() {
  _impl_.loadid_.ClearToEmpty();
}
inline const std::string& ReplaceRecordWithInfoRequest::loadid() const {
  // @@protoc_insertion_point(field_get:g2engine.ReplaceRecordWithInfoRequest.loadID)
  return _internal_loadid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplaceRecordWithInfoRequest::set_loadid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.loadid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ReplaceRecordWithInfoRequest.loadID)
}
inline std::string* ReplaceRecordWithInfoRequest::mutable_loadid() {
  std::string* _s = _internal_mutable_loadid();
  // @@protoc_insertion_point(field_mutable:g2engine.ReplaceRecordWithInfoRequest.loadID)
  return _s;
}
inline const std::string& ReplaceRecordWithInfoRequest::_internal_loadid() const {
  return _impl_.loadid_.Get();
}
inline void ReplaceRecordWithInfoRequest::_internal_set_loadid(const std::string& value) {
  
  _impl_.loadid_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplaceRecordWithInfoRequest::_internal_mutable_loadid() {
  
  return _impl_.loadid_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplaceRecordWithInfoRequest::release_loadid() {
  // @@protoc_insertion_point(field_release:g2engine.ReplaceRecordWithInfoRequest.loadID)
  return _impl_.loadid_.Release();
}
inline void ReplaceRecordWithInfoRequest::set_allocated_loadid(std::string* loadid) {
  if (loadid != nullptr) {
    
  } else {
    
  }
  _impl_.loadid_.SetAllocated(loadid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.loadid_.IsDefault()) {
    _impl_.loadid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ReplaceRecordWithInfoRequest.loadID)
}

// int64 flags = 5;
inline void ReplaceRecordWithInfoRequest::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t ReplaceRecordWithInfoRequest::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t ReplaceRecordWithInfoRequest::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.ReplaceRecordWithInfoRequest.flags)
  return _internal_flags();
}
inline void ReplaceRecordWithInfoRequest::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void ReplaceRecordWithInfoRequest::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.ReplaceRecordWithInfoRequest.flags)
}

// -------------------------------------------------------------------

// ReplaceRecordWithInfoResponse

// string result = 1;
inline void ReplaceRecordWithInfoResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& ReplaceRecordWithInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.ReplaceRecordWithInfoResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplaceRecordWithInfoResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.ReplaceRecordWithInfoResponse.result)
}
inline std::string* ReplaceRecordWithInfoResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.ReplaceRecordWithInfoResponse.result)
  return _s;
}
inline const std::string& ReplaceRecordWithInfoResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void ReplaceRecordWithInfoResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplaceRecordWithInfoResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplaceRecordWithInfoResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.ReplaceRecordWithInfoResponse.result)
  return _impl_.result_.Release();
}
inline void ReplaceRecordWithInfoResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.ReplaceRecordWithInfoResponse.result)
}

// -------------------------------------------------------------------

// SearchByAttributesRequest

// string jsonData = 1;
inline void SearchByAttributesRequest::clear_jsondata() {
  _impl_.jsondata_.ClearToEmpty();
}
inline const std::string& SearchByAttributesRequest::jsondata() const {
  // @@protoc_insertion_point(field_get:g2engine.SearchByAttributesRequest.jsonData)
  return _internal_jsondata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchByAttributesRequest::set_jsondata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.jsondata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.SearchByAttributesRequest.jsonData)
}
inline std::string* SearchByAttributesRequest::mutable_jsondata() {
  std::string* _s = _internal_mutable_jsondata();
  // @@protoc_insertion_point(field_mutable:g2engine.SearchByAttributesRequest.jsonData)
  return _s;
}
inline const std::string& SearchByAttributesRequest::_internal_jsondata() const {
  return _impl_.jsondata_.Get();
}
inline void SearchByAttributesRequest::_internal_set_jsondata(const std::string& value) {
  
  _impl_.jsondata_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchByAttributesRequest::_internal_mutable_jsondata() {
  
  return _impl_.jsondata_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchByAttributesRequest::release_jsondata() {
  // @@protoc_insertion_point(field_release:g2engine.SearchByAttributesRequest.jsonData)
  return _impl_.jsondata_.Release();
}
inline void SearchByAttributesRequest::set_allocated_jsondata(std::string* jsondata) {
  if (jsondata != nullptr) {
    
  } else {
    
  }
  _impl_.jsondata_.SetAllocated(jsondata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.jsondata_.IsDefault()) {
    _impl_.jsondata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.SearchByAttributesRequest.jsonData)
}

// -------------------------------------------------------------------

// SearchByAttributesResponse

// string result = 1;
inline void SearchByAttributesResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& SearchByAttributesResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.SearchByAttributesResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchByAttributesResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.SearchByAttributesResponse.result)
}
inline std::string* SearchByAttributesResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.SearchByAttributesResponse.result)
  return _s;
}
inline const std::string& SearchByAttributesResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void SearchByAttributesResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchByAttributesResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchByAttributesResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.SearchByAttributesResponse.result)
  return _impl_.result_.Release();
}
inline void SearchByAttributesResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.SearchByAttributesResponse.result)
}

// -------------------------------------------------------------------

// SearchByAttributes_V2Request

// string jsonData = 1;
inline void SearchByAttributes_V2Request::clear_jsondata() {
  _impl_.jsondata_.ClearToEmpty();
}
inline const std::string& SearchByAttributes_V2Request::jsondata() const {
  // @@protoc_insertion_point(field_get:g2engine.SearchByAttributes_V2Request.jsonData)
  return _internal_jsondata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchByAttributes_V2Request::set_jsondata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.jsondata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.SearchByAttributes_V2Request.jsonData)
}
inline std::string* SearchByAttributes_V2Request::mutable_jsondata() {
  std::string* _s = _internal_mutable_jsondata();
  // @@protoc_insertion_point(field_mutable:g2engine.SearchByAttributes_V2Request.jsonData)
  return _s;
}
inline const std::string& SearchByAttributes_V2Request::_internal_jsondata() const {
  return _impl_.jsondata_.Get();
}
inline void SearchByAttributes_V2Request::_internal_set_jsondata(const std::string& value) {
  
  _impl_.jsondata_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchByAttributes_V2Request::_internal_mutable_jsondata() {
  
  return _impl_.jsondata_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchByAttributes_V2Request::release_jsondata() {
  // @@protoc_insertion_point(field_release:g2engine.SearchByAttributes_V2Request.jsonData)
  return _impl_.jsondata_.Release();
}
inline void SearchByAttributes_V2Request::set_allocated_jsondata(std::string* jsondata) {
  if (jsondata != nullptr) {
    
  } else {
    
  }
  _impl_.jsondata_.SetAllocated(jsondata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.jsondata_.IsDefault()) {
    _impl_.jsondata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.SearchByAttributes_V2Request.jsonData)
}

// int64 flags = 2;
inline void SearchByAttributes_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t SearchByAttributes_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t SearchByAttributes_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.SearchByAttributes_V2Request.flags)
  return _internal_flags();
}
inline void SearchByAttributes_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void SearchByAttributes_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.SearchByAttributes_V2Request.flags)
}

// -------------------------------------------------------------------

// SearchByAttributes_V2Response

// string result = 1;
inline void SearchByAttributes_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& SearchByAttributes_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.SearchByAttributes_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchByAttributes_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.SearchByAttributes_V2Response.result)
}
inline std::string* SearchByAttributes_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.SearchByAttributes_V2Response.result)
  return _s;
}
inline const std::string& SearchByAttributes_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void SearchByAttributes_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchByAttributes_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchByAttributes_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.SearchByAttributes_V2Response.result)
  return _impl_.result_.Release();
}
inline void SearchByAttributes_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.SearchByAttributes_V2Response.result)
}

// -------------------------------------------------------------------

// StatsRequest

// -------------------------------------------------------------------

// StatsResponse

// string result = 1;
inline void StatsResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& StatsResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.StatsResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatsResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.StatsResponse.result)
}
inline std::string* StatsResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.StatsResponse.result)
  return _s;
}
inline const std::string& StatsResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void StatsResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* StatsResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* StatsResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.StatsResponse.result)
  return _impl_.result_.Release();
}
inline void StatsResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.StatsResponse.result)
}

// -------------------------------------------------------------------

// StreamExportCSVEntityReportRequest

// string csvColumnList = 1;
inline void StreamExportCSVEntityReportRequest::clear_csvcolumnlist() {
  _impl_.csvcolumnlist_.ClearToEmpty();
}
inline const std::string& StreamExportCSVEntityReportRequest::csvcolumnlist() const {
  // @@protoc_insertion_point(field_get:g2engine.StreamExportCSVEntityReportRequest.csvColumnList)
  return _internal_csvcolumnlist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamExportCSVEntityReportRequest::set_csvcolumnlist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.csvcolumnlist_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.StreamExportCSVEntityReportRequest.csvColumnList)
}
inline std::string* StreamExportCSVEntityReportRequest::mutable_csvcolumnlist() {
  std::string* _s = _internal_mutable_csvcolumnlist();
  // @@protoc_insertion_point(field_mutable:g2engine.StreamExportCSVEntityReportRequest.csvColumnList)
  return _s;
}
inline const std::string& StreamExportCSVEntityReportRequest::_internal_csvcolumnlist() const {
  return _impl_.csvcolumnlist_.Get();
}
inline void StreamExportCSVEntityReportRequest::_internal_set_csvcolumnlist(const std::string& value) {
  
  _impl_.csvcolumnlist_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamExportCSVEntityReportRequest::_internal_mutable_csvcolumnlist() {
  
  return _impl_.csvcolumnlist_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamExportCSVEntityReportRequest::release_csvcolumnlist() {
  // @@protoc_insertion_point(field_release:g2engine.StreamExportCSVEntityReportRequest.csvColumnList)
  return _impl_.csvcolumnlist_.Release();
}
inline void StreamExportCSVEntityReportRequest::set_allocated_csvcolumnlist(std::string* csvcolumnlist) {
  if (csvcolumnlist != nullptr) {
    
  } else {
    
  }
  _impl_.csvcolumnlist_.SetAllocated(csvcolumnlist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.csvcolumnlist_.IsDefault()) {
    _impl_.csvcolumnlist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.StreamExportCSVEntityReportRequest.csvColumnList)
}

// int64 flags = 2;
inline void StreamExportCSVEntityReportRequest::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t StreamExportCSVEntityReportRequest::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t StreamExportCSVEntityReportRequest::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.StreamExportCSVEntityReportRequest.flags)
  return _internal_flags();
}
inline void StreamExportCSVEntityReportRequest::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void StreamExportCSVEntityReportRequest::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.StreamExportCSVEntityReportRequest.flags)
}

// -------------------------------------------------------------------

// StreamExportCSVEntityReportResponse

// int64 result = 1;
inline void StreamExportCSVEntityReportResponse::clear_result() {
  _impl_.result_ = int64_t{0};
}
inline int64_t StreamExportCSVEntityReportResponse::_internal_result() const {
  return _impl_.result_;
}
inline int64_t StreamExportCSVEntityReportResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.StreamExportCSVEntityReportResponse.result)
  return _internal_result();
}
inline void StreamExportCSVEntityReportResponse::_internal_set_result(int64_t value) {
  
  _impl_.result_ = value;
}
inline void StreamExportCSVEntityReportResponse::set_result(int64_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:g2engine.StreamExportCSVEntityReportResponse.result)
}

// -------------------------------------------------------------------

// StreamExportJSONEntityReportRequest

// string csvColumnList = 1;
inline void StreamExportJSONEntityReportRequest::clear_csvcolumnlist() {
  _impl_.csvcolumnlist_.ClearToEmpty();
}
inline const std::string& StreamExportJSONEntityReportRequest::csvcolumnlist() const {
  // @@protoc_insertion_point(field_get:g2engine.StreamExportJSONEntityReportRequest.csvColumnList)
  return _internal_csvcolumnlist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamExportJSONEntityReportRequest::set_csvcolumnlist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.csvcolumnlist_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.StreamExportJSONEntityReportRequest.csvColumnList)
}
inline std::string* StreamExportJSONEntityReportRequest::mutable_csvcolumnlist() {
  std::string* _s = _internal_mutable_csvcolumnlist();
  // @@protoc_insertion_point(field_mutable:g2engine.StreamExportJSONEntityReportRequest.csvColumnList)
  return _s;
}
inline const std::string& StreamExportJSONEntityReportRequest::_internal_csvcolumnlist() const {
  return _impl_.csvcolumnlist_.Get();
}
inline void StreamExportJSONEntityReportRequest::_internal_set_csvcolumnlist(const std::string& value) {
  
  _impl_.csvcolumnlist_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamExportJSONEntityReportRequest::_internal_mutable_csvcolumnlist() {
  
  return _impl_.csvcolumnlist_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamExportJSONEntityReportRequest::release_csvcolumnlist() {
  // @@protoc_insertion_point(field_release:g2engine.StreamExportJSONEntityReportRequest.csvColumnList)
  return _impl_.csvcolumnlist_.Release();
}
inline void StreamExportJSONEntityReportRequest::set_allocated_csvcolumnlist(std::string* csvcolumnlist) {
  if (csvcolumnlist != nullptr) {
    
  } else {
    
  }
  _impl_.csvcolumnlist_.SetAllocated(csvcolumnlist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.csvcolumnlist_.IsDefault()) {
    _impl_.csvcolumnlist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.StreamExportJSONEntityReportRequest.csvColumnList)
}

// int64 flags = 2;
inline void StreamExportJSONEntityReportRequest::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t StreamExportJSONEntityReportRequest::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t StreamExportJSONEntityReportRequest::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.StreamExportJSONEntityReportRequest.flags)
  return _internal_flags();
}
inline void StreamExportJSONEntityReportRequest::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void StreamExportJSONEntityReportRequest::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.StreamExportJSONEntityReportRequest.flags)
}

// -------------------------------------------------------------------

// StreamExportJSONEntityReportResponse

// int64 result = 1;
inline void StreamExportJSONEntityReportResponse::clear_result() {
  _impl_.result_ = int64_t{0};
}
inline int64_t StreamExportJSONEntityReportResponse::_internal_result() const {
  return _impl_.result_;
}
inline int64_t StreamExportJSONEntityReportResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.StreamExportJSONEntityReportResponse.result)
  return _internal_result();
}
inline void StreamExportJSONEntityReportResponse::_internal_set_result(int64_t value) {
  
  _impl_.result_ = value;
}
inline void StreamExportJSONEntityReportResponse::set_result(int64_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:g2engine.StreamExportJSONEntityReportResponse.result)
}

// -------------------------------------------------------------------

// WhyEntitiesRequest

// int64 entityID1 = 1;
inline void WhyEntitiesRequest::clear_entityid1() {
  _impl_.entityid1_ = int64_t{0};
}
inline int64_t WhyEntitiesRequest::_internal_entityid1() const {
  return _impl_.entityid1_;
}
inline int64_t WhyEntitiesRequest::entityid1() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntitiesRequest.entityID1)
  return _internal_entityid1();
}
inline void WhyEntitiesRequest::_internal_set_entityid1(int64_t value) {
  
  _impl_.entityid1_ = value;
}
inline void WhyEntitiesRequest::set_entityid1(int64_t value) {
  _internal_set_entityid1(value);
  // @@protoc_insertion_point(field_set:g2engine.WhyEntitiesRequest.entityID1)
}

// int64 entityID2 = 2;
inline void WhyEntitiesRequest::clear_entityid2() {
  _impl_.entityid2_ = int64_t{0};
}
inline int64_t WhyEntitiesRequest::_internal_entityid2() const {
  return _impl_.entityid2_;
}
inline int64_t WhyEntitiesRequest::entityid2() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntitiesRequest.entityID2)
  return _internal_entityid2();
}
inline void WhyEntitiesRequest::_internal_set_entityid2(int64_t value) {
  
  _impl_.entityid2_ = value;
}
inline void WhyEntitiesRequest::set_entityid2(int64_t value) {
  _internal_set_entityid2(value);
  // @@protoc_insertion_point(field_set:g2engine.WhyEntitiesRequest.entityID2)
}

// -------------------------------------------------------------------

// WhyEntitiesResponse

// string result = 1;
inline void WhyEntitiesResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& WhyEntitiesResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntitiesResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyEntitiesResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyEntitiesResponse.result)
}
inline std::string* WhyEntitiesResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyEntitiesResponse.result)
  return _s;
}
inline const std::string& WhyEntitiesResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void WhyEntitiesResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyEntitiesResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyEntitiesResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.WhyEntitiesResponse.result)
  return _impl_.result_.Release();
}
inline void WhyEntitiesResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyEntitiesResponse.result)
}

// -------------------------------------------------------------------

// WhyEntities_V2Request

// int64 entityID1 = 1;
inline void WhyEntities_V2Request::clear_entityid1() {
  _impl_.entityid1_ = int64_t{0};
}
inline int64_t WhyEntities_V2Request::_internal_entityid1() const {
  return _impl_.entityid1_;
}
inline int64_t WhyEntities_V2Request::entityid1() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntities_V2Request.entityID1)
  return _internal_entityid1();
}
inline void WhyEntities_V2Request::_internal_set_entityid1(int64_t value) {
  
  _impl_.entityid1_ = value;
}
inline void WhyEntities_V2Request::set_entityid1(int64_t value) {
  _internal_set_entityid1(value);
  // @@protoc_insertion_point(field_set:g2engine.WhyEntities_V2Request.entityID1)
}

// int64 entityID2 = 2;
inline void WhyEntities_V2Request::clear_entityid2() {
  _impl_.entityid2_ = int64_t{0};
}
inline int64_t WhyEntities_V2Request::_internal_entityid2() const {
  return _impl_.entityid2_;
}
inline int64_t WhyEntities_V2Request::entityid2() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntities_V2Request.entityID2)
  return _internal_entityid2();
}
inline void WhyEntities_V2Request::_internal_set_entityid2(int64_t value) {
  
  _impl_.entityid2_ = value;
}
inline void WhyEntities_V2Request::set_entityid2(int64_t value) {
  _internal_set_entityid2(value);
  // @@protoc_insertion_point(field_set:g2engine.WhyEntities_V2Request.entityID2)
}

// int64 flags = 3;
inline void WhyEntities_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t WhyEntities_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t WhyEntities_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntities_V2Request.flags)
  return _internal_flags();
}
inline void WhyEntities_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void WhyEntities_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.WhyEntities_V2Request.flags)
}

// -------------------------------------------------------------------

// WhyEntities_V2Response

// string result = 1;
inline void WhyEntities_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& WhyEntities_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntities_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyEntities_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyEntities_V2Response.result)
}
inline std::string* WhyEntities_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyEntities_V2Response.result)
  return _s;
}
inline const std::string& WhyEntities_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void WhyEntities_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyEntities_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyEntities_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.WhyEntities_V2Response.result)
  return _impl_.result_.Release();
}
inline void WhyEntities_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyEntities_V2Response.result)
}

// -------------------------------------------------------------------

// WhyEntityByEntityIDRequest

// int64 entityID = 1;
inline void WhyEntityByEntityIDRequest::clear_entityid() {
  _impl_.entityid_ = int64_t{0};
}
inline int64_t WhyEntityByEntityIDRequest::_internal_entityid() const {
  return _impl_.entityid_;
}
inline int64_t WhyEntityByEntityIDRequest::entityid() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntityByEntityIDRequest.entityID)
  return _internal_entityid();
}
inline void WhyEntityByEntityIDRequest::_internal_set_entityid(int64_t value) {
  
  _impl_.entityid_ = value;
}
inline void WhyEntityByEntityIDRequest::set_entityid(int64_t value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:g2engine.WhyEntityByEntityIDRequest.entityID)
}

// -------------------------------------------------------------------

// WhyEntityByEntityIDResponse

// string result = 1;
inline void WhyEntityByEntityIDResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& WhyEntityByEntityIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntityByEntityIDResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyEntityByEntityIDResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyEntityByEntityIDResponse.result)
}
inline std::string* WhyEntityByEntityIDResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyEntityByEntityIDResponse.result)
  return _s;
}
inline const std::string& WhyEntityByEntityIDResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void WhyEntityByEntityIDResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyEntityByEntityIDResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyEntityByEntityIDResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.WhyEntityByEntityIDResponse.result)
  return _impl_.result_.Release();
}
inline void WhyEntityByEntityIDResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyEntityByEntityIDResponse.result)
}

// -------------------------------------------------------------------

// WhyEntityByEntityID_V2Request

// int64 entityID = 1;
inline void WhyEntityByEntityID_V2Request::clear_entityid() {
  _impl_.entityid_ = int64_t{0};
}
inline int64_t WhyEntityByEntityID_V2Request::_internal_entityid() const {
  return _impl_.entityid_;
}
inline int64_t WhyEntityByEntityID_V2Request::entityid() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntityByEntityID_V2Request.entityID)
  return _internal_entityid();
}
inline void WhyEntityByEntityID_V2Request::_internal_set_entityid(int64_t value) {
  
  _impl_.entityid_ = value;
}
inline void WhyEntityByEntityID_V2Request::set_entityid(int64_t value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:g2engine.WhyEntityByEntityID_V2Request.entityID)
}

// int64 flags = 2;
inline void WhyEntityByEntityID_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t WhyEntityByEntityID_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t WhyEntityByEntityID_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntityByEntityID_V2Request.flags)
  return _internal_flags();
}
inline void WhyEntityByEntityID_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void WhyEntityByEntityID_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.WhyEntityByEntityID_V2Request.flags)
}

// -------------------------------------------------------------------

// WhyEntityByEntityID_V2Response

// string result = 1;
inline void WhyEntityByEntityID_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& WhyEntityByEntityID_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntityByEntityID_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyEntityByEntityID_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyEntityByEntityID_V2Response.result)
}
inline std::string* WhyEntityByEntityID_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyEntityByEntityID_V2Response.result)
  return _s;
}
inline const std::string& WhyEntityByEntityID_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void WhyEntityByEntityID_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyEntityByEntityID_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyEntityByEntityID_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.WhyEntityByEntityID_V2Response.result)
  return _impl_.result_.Release();
}
inline void WhyEntityByEntityID_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyEntityByEntityID_V2Response.result)
}

// -------------------------------------------------------------------

// WhyEntityByRecordIDRequest

// string dataSourceCode = 1;
inline void WhyEntityByRecordIDRequest::clear_datasourcecode() {
  _impl_.datasourcecode_.ClearToEmpty();
}
inline const std::string& WhyEntityByRecordIDRequest::datasourcecode() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntityByRecordIDRequest.dataSourceCode)
  return _internal_datasourcecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyEntityByRecordIDRequest::set_datasourcecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyEntityByRecordIDRequest.dataSourceCode)
}
inline std::string* WhyEntityByRecordIDRequest::mutable_datasourcecode() {
  std::string* _s = _internal_mutable_datasourcecode();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyEntityByRecordIDRequest.dataSourceCode)
  return _s;
}
inline const std::string& WhyEntityByRecordIDRequest::_internal_datasourcecode() const {
  return _impl_.datasourcecode_.Get();
}
inline void WhyEntityByRecordIDRequest::_internal_set_datasourcecode(const std::string& value) {
  
  _impl_.datasourcecode_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyEntityByRecordIDRequest::_internal_mutable_datasourcecode() {
  
  return _impl_.datasourcecode_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyEntityByRecordIDRequest::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:g2engine.WhyEntityByRecordIDRequest.dataSourceCode)
  return _impl_.datasourcecode_.Release();
}
inline void WhyEntityByRecordIDRequest::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode_.SetAllocated(datasourcecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode_.IsDefault()) {
    _impl_.datasourcecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyEntityByRecordIDRequest.dataSourceCode)
}

// string recordID = 2;
inline void WhyEntityByRecordIDRequest::clear_recordid() {
  _impl_.recordid_.ClearToEmpty();
}
inline const std::string& WhyEntityByRecordIDRequest::recordid() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntityByRecordIDRequest.recordID)
  return _internal_recordid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyEntityByRecordIDRequest::set_recordid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyEntityByRecordIDRequest.recordID)
}
inline std::string* WhyEntityByRecordIDRequest::mutable_recordid() {
  std::string* _s = _internal_mutable_recordid();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyEntityByRecordIDRequest.recordID)
  return _s;
}
inline const std::string& WhyEntityByRecordIDRequest::_internal_recordid() const {
  return _impl_.recordid_.Get();
}
inline void WhyEntityByRecordIDRequest::_internal_set_recordid(const std::string& value) {
  
  _impl_.recordid_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyEntityByRecordIDRequest::_internal_mutable_recordid() {
  
  return _impl_.recordid_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyEntityByRecordIDRequest::release_recordid() {
  // @@protoc_insertion_point(field_release:g2engine.WhyEntityByRecordIDRequest.recordID)
  return _impl_.recordid_.Release();
}
inline void WhyEntityByRecordIDRequest::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  _impl_.recordid_.SetAllocated(recordid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid_.IsDefault()) {
    _impl_.recordid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyEntityByRecordIDRequest.recordID)
}

// -------------------------------------------------------------------

// WhyEntityByRecordIDResponse

// string result = 1;
inline void WhyEntityByRecordIDResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& WhyEntityByRecordIDResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntityByRecordIDResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyEntityByRecordIDResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyEntityByRecordIDResponse.result)
}
inline std::string* WhyEntityByRecordIDResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyEntityByRecordIDResponse.result)
  return _s;
}
inline const std::string& WhyEntityByRecordIDResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void WhyEntityByRecordIDResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyEntityByRecordIDResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyEntityByRecordIDResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.WhyEntityByRecordIDResponse.result)
  return _impl_.result_.Release();
}
inline void WhyEntityByRecordIDResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyEntityByRecordIDResponse.result)
}

// -------------------------------------------------------------------

// WhyEntityByRecordID_V2Request

// string dataSourceCode = 1;
inline void WhyEntityByRecordID_V2Request::clear_datasourcecode() {
  _impl_.datasourcecode_.ClearToEmpty();
}
inline const std::string& WhyEntityByRecordID_V2Request::datasourcecode() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntityByRecordID_V2Request.dataSourceCode)
  return _internal_datasourcecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyEntityByRecordID_V2Request::set_datasourcecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyEntityByRecordID_V2Request.dataSourceCode)
}
inline std::string* WhyEntityByRecordID_V2Request::mutable_datasourcecode() {
  std::string* _s = _internal_mutable_datasourcecode();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyEntityByRecordID_V2Request.dataSourceCode)
  return _s;
}
inline const std::string& WhyEntityByRecordID_V2Request::_internal_datasourcecode() const {
  return _impl_.datasourcecode_.Get();
}
inline void WhyEntityByRecordID_V2Request::_internal_set_datasourcecode(const std::string& value) {
  
  _impl_.datasourcecode_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyEntityByRecordID_V2Request::_internal_mutable_datasourcecode() {
  
  return _impl_.datasourcecode_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyEntityByRecordID_V2Request::release_datasourcecode() {
  // @@protoc_insertion_point(field_release:g2engine.WhyEntityByRecordID_V2Request.dataSourceCode)
  return _impl_.datasourcecode_.Release();
}
inline void WhyEntityByRecordID_V2Request::set_allocated_datasourcecode(std::string* datasourcecode) {
  if (datasourcecode != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode_.SetAllocated(datasourcecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode_.IsDefault()) {
    _impl_.datasourcecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyEntityByRecordID_V2Request.dataSourceCode)
}

// string recordID = 2;
inline void WhyEntityByRecordID_V2Request::clear_recordid() {
  _impl_.recordid_.ClearToEmpty();
}
inline const std::string& WhyEntityByRecordID_V2Request::recordid() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntityByRecordID_V2Request.recordID)
  return _internal_recordid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyEntityByRecordID_V2Request::set_recordid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyEntityByRecordID_V2Request.recordID)
}
inline std::string* WhyEntityByRecordID_V2Request::mutable_recordid() {
  std::string* _s = _internal_mutable_recordid();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyEntityByRecordID_V2Request.recordID)
  return _s;
}
inline const std::string& WhyEntityByRecordID_V2Request::_internal_recordid() const {
  return _impl_.recordid_.Get();
}
inline void WhyEntityByRecordID_V2Request::_internal_set_recordid(const std::string& value) {
  
  _impl_.recordid_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyEntityByRecordID_V2Request::_internal_mutable_recordid() {
  
  return _impl_.recordid_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyEntityByRecordID_V2Request::release_recordid() {
  // @@protoc_insertion_point(field_release:g2engine.WhyEntityByRecordID_V2Request.recordID)
  return _impl_.recordid_.Release();
}
inline void WhyEntityByRecordID_V2Request::set_allocated_recordid(std::string* recordid) {
  if (recordid != nullptr) {
    
  } else {
    
  }
  _impl_.recordid_.SetAllocated(recordid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid_.IsDefault()) {
    _impl_.recordid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyEntityByRecordID_V2Request.recordID)
}

// int64 flags = 3;
inline void WhyEntityByRecordID_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t WhyEntityByRecordID_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t WhyEntityByRecordID_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntityByRecordID_V2Request.flags)
  return _internal_flags();
}
inline void WhyEntityByRecordID_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void WhyEntityByRecordID_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.WhyEntityByRecordID_V2Request.flags)
}

// -------------------------------------------------------------------

// WhyEntityByRecordID_V2Response

// string result = 1;
inline void WhyEntityByRecordID_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& WhyEntityByRecordID_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyEntityByRecordID_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyEntityByRecordID_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyEntityByRecordID_V2Response.result)
}
inline std::string* WhyEntityByRecordID_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyEntityByRecordID_V2Response.result)
  return _s;
}
inline const std::string& WhyEntityByRecordID_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void WhyEntityByRecordID_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyEntityByRecordID_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyEntityByRecordID_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.WhyEntityByRecordID_V2Response.result)
  return _impl_.result_.Release();
}
inline void WhyEntityByRecordID_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyEntityByRecordID_V2Response.result)
}

// -------------------------------------------------------------------

// WhyRecordsRequest

// string dataSourceCode1 = 1;
inline void WhyRecordsRequest::clear_datasourcecode1() {
  _impl_.datasourcecode1_.ClearToEmpty();
}
inline const std::string& WhyRecordsRequest::datasourcecode1() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyRecordsRequest.dataSourceCode1)
  return _internal_datasourcecode1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyRecordsRequest::set_datasourcecode1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyRecordsRequest.dataSourceCode1)
}
inline std::string* WhyRecordsRequest::mutable_datasourcecode1() {
  std::string* _s = _internal_mutable_datasourcecode1();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyRecordsRequest.dataSourceCode1)
  return _s;
}
inline const std::string& WhyRecordsRequest::_internal_datasourcecode1() const {
  return _impl_.datasourcecode1_.Get();
}
inline void WhyRecordsRequest::_internal_set_datasourcecode1(const std::string& value) {
  
  _impl_.datasourcecode1_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyRecordsRequest::_internal_mutable_datasourcecode1() {
  
  return _impl_.datasourcecode1_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyRecordsRequest::release_datasourcecode1() {
  // @@protoc_insertion_point(field_release:g2engine.WhyRecordsRequest.dataSourceCode1)
  return _impl_.datasourcecode1_.Release();
}
inline void WhyRecordsRequest::set_allocated_datasourcecode1(std::string* datasourcecode1) {
  if (datasourcecode1 != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode1_.SetAllocated(datasourcecode1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode1_.IsDefault()) {
    _impl_.datasourcecode1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyRecordsRequest.dataSourceCode1)
}

// string recordID1 = 2;
inline void WhyRecordsRequest::clear_recordid1() {
  _impl_.recordid1_.ClearToEmpty();
}
inline const std::string& WhyRecordsRequest::recordid1() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyRecordsRequest.recordID1)
  return _internal_recordid1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyRecordsRequest::set_recordid1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyRecordsRequest.recordID1)
}
inline std::string* WhyRecordsRequest::mutable_recordid1() {
  std::string* _s = _internal_mutable_recordid1();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyRecordsRequest.recordID1)
  return _s;
}
inline const std::string& WhyRecordsRequest::_internal_recordid1() const {
  return _impl_.recordid1_.Get();
}
inline void WhyRecordsRequest::_internal_set_recordid1(const std::string& value) {
  
  _impl_.recordid1_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyRecordsRequest::_internal_mutable_recordid1() {
  
  return _impl_.recordid1_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyRecordsRequest::release_recordid1() {
  // @@protoc_insertion_point(field_release:g2engine.WhyRecordsRequest.recordID1)
  return _impl_.recordid1_.Release();
}
inline void WhyRecordsRequest::set_allocated_recordid1(std::string* recordid1) {
  if (recordid1 != nullptr) {
    
  } else {
    
  }
  _impl_.recordid1_.SetAllocated(recordid1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid1_.IsDefault()) {
    _impl_.recordid1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyRecordsRequest.recordID1)
}

// string dataSourceCode2 = 3;
inline void WhyRecordsRequest::clear_datasourcecode2() {
  _impl_.datasourcecode2_.ClearToEmpty();
}
inline const std::string& WhyRecordsRequest::datasourcecode2() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyRecordsRequest.dataSourceCode2)
  return _internal_datasourcecode2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyRecordsRequest::set_datasourcecode2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyRecordsRequest.dataSourceCode2)
}
inline std::string* WhyRecordsRequest::mutable_datasourcecode2() {
  std::string* _s = _internal_mutable_datasourcecode2();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyRecordsRequest.dataSourceCode2)
  return _s;
}
inline const std::string& WhyRecordsRequest::_internal_datasourcecode2() const {
  return _impl_.datasourcecode2_.Get();
}
inline void WhyRecordsRequest::_internal_set_datasourcecode2(const std::string& value) {
  
  _impl_.datasourcecode2_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyRecordsRequest::_internal_mutable_datasourcecode2() {
  
  return _impl_.datasourcecode2_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyRecordsRequest::release_datasourcecode2() {
  // @@protoc_insertion_point(field_release:g2engine.WhyRecordsRequest.dataSourceCode2)
  return _impl_.datasourcecode2_.Release();
}
inline void WhyRecordsRequest::set_allocated_datasourcecode2(std::string* datasourcecode2) {
  if (datasourcecode2 != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode2_.SetAllocated(datasourcecode2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode2_.IsDefault()) {
    _impl_.datasourcecode2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyRecordsRequest.dataSourceCode2)
}

// string recordID2 = 4;
inline void WhyRecordsRequest::clear_recordid2() {
  _impl_.recordid2_.ClearToEmpty();
}
inline const std::string& WhyRecordsRequest::recordid2() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyRecordsRequest.recordID2)
  return _internal_recordid2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyRecordsRequest::set_recordid2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyRecordsRequest.recordID2)
}
inline std::string* WhyRecordsRequest::mutable_recordid2() {
  std::string* _s = _internal_mutable_recordid2();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyRecordsRequest.recordID2)
  return _s;
}
inline const std::string& WhyRecordsRequest::_internal_recordid2() const {
  return _impl_.recordid2_.Get();
}
inline void WhyRecordsRequest::_internal_set_recordid2(const std::string& value) {
  
  _impl_.recordid2_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyRecordsRequest::_internal_mutable_recordid2() {
  
  return _impl_.recordid2_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyRecordsRequest::release_recordid2() {
  // @@protoc_insertion_point(field_release:g2engine.WhyRecordsRequest.recordID2)
  return _impl_.recordid2_.Release();
}
inline void WhyRecordsRequest::set_allocated_recordid2(std::string* recordid2) {
  if (recordid2 != nullptr) {
    
  } else {
    
  }
  _impl_.recordid2_.SetAllocated(recordid2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid2_.IsDefault()) {
    _impl_.recordid2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyRecordsRequest.recordID2)
}

// -------------------------------------------------------------------

// WhyRecordsResponse

// string result = 1;
inline void WhyRecordsResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& WhyRecordsResponse::result() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyRecordsResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyRecordsResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyRecordsResponse.result)
}
inline std::string* WhyRecordsResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyRecordsResponse.result)
  return _s;
}
inline const std::string& WhyRecordsResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void WhyRecordsResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyRecordsResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyRecordsResponse::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.WhyRecordsResponse.result)
  return _impl_.result_.Release();
}
inline void WhyRecordsResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyRecordsResponse.result)
}

// -------------------------------------------------------------------

// WhyRecords_V2Request

// string dataSourceCode1 = 1;
inline void WhyRecords_V2Request::clear_datasourcecode1() {
  _impl_.datasourcecode1_.ClearToEmpty();
}
inline const std::string& WhyRecords_V2Request::datasourcecode1() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyRecords_V2Request.dataSourceCode1)
  return _internal_datasourcecode1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyRecords_V2Request::set_datasourcecode1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyRecords_V2Request.dataSourceCode1)
}
inline std::string* WhyRecords_V2Request::mutable_datasourcecode1() {
  std::string* _s = _internal_mutable_datasourcecode1();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyRecords_V2Request.dataSourceCode1)
  return _s;
}
inline const std::string& WhyRecords_V2Request::_internal_datasourcecode1() const {
  return _impl_.datasourcecode1_.Get();
}
inline void WhyRecords_V2Request::_internal_set_datasourcecode1(const std::string& value) {
  
  _impl_.datasourcecode1_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyRecords_V2Request::_internal_mutable_datasourcecode1() {
  
  return _impl_.datasourcecode1_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyRecords_V2Request::release_datasourcecode1() {
  // @@protoc_insertion_point(field_release:g2engine.WhyRecords_V2Request.dataSourceCode1)
  return _impl_.datasourcecode1_.Release();
}
inline void WhyRecords_V2Request::set_allocated_datasourcecode1(std::string* datasourcecode1) {
  if (datasourcecode1 != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode1_.SetAllocated(datasourcecode1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode1_.IsDefault()) {
    _impl_.datasourcecode1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyRecords_V2Request.dataSourceCode1)
}

// string recordID1 = 2;
inline void WhyRecords_V2Request::clear_recordid1() {
  _impl_.recordid1_.ClearToEmpty();
}
inline const std::string& WhyRecords_V2Request::recordid1() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyRecords_V2Request.recordID1)
  return _internal_recordid1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyRecords_V2Request::set_recordid1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyRecords_V2Request.recordID1)
}
inline std::string* WhyRecords_V2Request::mutable_recordid1() {
  std::string* _s = _internal_mutable_recordid1();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyRecords_V2Request.recordID1)
  return _s;
}
inline const std::string& WhyRecords_V2Request::_internal_recordid1() const {
  return _impl_.recordid1_.Get();
}
inline void WhyRecords_V2Request::_internal_set_recordid1(const std::string& value) {
  
  _impl_.recordid1_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyRecords_V2Request::_internal_mutable_recordid1() {
  
  return _impl_.recordid1_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyRecords_V2Request::release_recordid1() {
  // @@protoc_insertion_point(field_release:g2engine.WhyRecords_V2Request.recordID1)
  return _impl_.recordid1_.Release();
}
inline void WhyRecords_V2Request::set_allocated_recordid1(std::string* recordid1) {
  if (recordid1 != nullptr) {
    
  } else {
    
  }
  _impl_.recordid1_.SetAllocated(recordid1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid1_.IsDefault()) {
    _impl_.recordid1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyRecords_V2Request.recordID1)
}

// string dataSourceCode2 = 3;
inline void WhyRecords_V2Request::clear_datasourcecode2() {
  _impl_.datasourcecode2_.ClearToEmpty();
}
inline const std::string& WhyRecords_V2Request::datasourcecode2() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyRecords_V2Request.dataSourceCode2)
  return _internal_datasourcecode2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyRecords_V2Request::set_datasourcecode2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datasourcecode2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyRecords_V2Request.dataSourceCode2)
}
inline std::string* WhyRecords_V2Request::mutable_datasourcecode2() {
  std::string* _s = _internal_mutable_datasourcecode2();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyRecords_V2Request.dataSourceCode2)
  return _s;
}
inline const std::string& WhyRecords_V2Request::_internal_datasourcecode2() const {
  return _impl_.datasourcecode2_.Get();
}
inline void WhyRecords_V2Request::_internal_set_datasourcecode2(const std::string& value) {
  
  _impl_.datasourcecode2_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyRecords_V2Request::_internal_mutable_datasourcecode2() {
  
  return _impl_.datasourcecode2_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyRecords_V2Request::release_datasourcecode2() {
  // @@protoc_insertion_point(field_release:g2engine.WhyRecords_V2Request.dataSourceCode2)
  return _impl_.datasourcecode2_.Release();
}
inline void WhyRecords_V2Request::set_allocated_datasourcecode2(std::string* datasourcecode2) {
  if (datasourcecode2 != nullptr) {
    
  } else {
    
  }
  _impl_.datasourcecode2_.SetAllocated(datasourcecode2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datasourcecode2_.IsDefault()) {
    _impl_.datasourcecode2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyRecords_V2Request.dataSourceCode2)
}

// string recordID2 = 4;
inline void WhyRecords_V2Request::clear_recordid2() {
  _impl_.recordid2_.ClearToEmpty();
}
inline const std::string& WhyRecords_V2Request::recordid2() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyRecords_V2Request.recordID2)
  return _internal_recordid2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyRecords_V2Request::set_recordid2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recordid2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyRecords_V2Request.recordID2)
}
inline std::string* WhyRecords_V2Request::mutable_recordid2() {
  std::string* _s = _internal_mutable_recordid2();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyRecords_V2Request.recordID2)
  return _s;
}
inline const std::string& WhyRecords_V2Request::_internal_recordid2() const {
  return _impl_.recordid2_.Get();
}
inline void WhyRecords_V2Request::_internal_set_recordid2(const std::string& value) {
  
  _impl_.recordid2_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyRecords_V2Request::_internal_mutable_recordid2() {
  
  return _impl_.recordid2_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyRecords_V2Request::release_recordid2() {
  // @@protoc_insertion_point(field_release:g2engine.WhyRecords_V2Request.recordID2)
  return _impl_.recordid2_.Release();
}
inline void WhyRecords_V2Request::set_allocated_recordid2(std::string* recordid2) {
  if (recordid2 != nullptr) {
    
  } else {
    
  }
  _impl_.recordid2_.SetAllocated(recordid2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recordid2_.IsDefault()) {
    _impl_.recordid2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyRecords_V2Request.recordID2)
}

// int64 flags = 5;
inline void WhyRecords_V2Request::clear_flags() {
  _impl_.flags_ = int64_t{0};
}
inline int64_t WhyRecords_V2Request::_internal_flags() const {
  return _impl_.flags_;
}
inline int64_t WhyRecords_V2Request::flags() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyRecords_V2Request.flags)
  return _internal_flags();
}
inline void WhyRecords_V2Request::_internal_set_flags(int64_t value) {
  
  _impl_.flags_ = value;
}
inline void WhyRecords_V2Request::set_flags(int64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:g2engine.WhyRecords_V2Request.flags)
}

// -------------------------------------------------------------------

// WhyRecords_V2Response

// string result = 1;
inline void WhyRecords_V2Response::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& WhyRecords_V2Response::result() const {
  // @@protoc_insertion_point(field_get:g2engine.WhyRecords_V2Response.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WhyRecords_V2Response::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:g2engine.WhyRecords_V2Response.result)
}
inline std::string* WhyRecords_V2Response::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:g2engine.WhyRecords_V2Response.result)
  return _s;
}
inline const std::string& WhyRecords_V2Response::_internal_result() const {
  return _impl_.result_.Get();
}
inline void WhyRecords_V2Response::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* WhyRecords_V2Response::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* WhyRecords_V2Response::release_result() {
  // @@protoc_insertion_point(field_release:g2engine.WhyRecords_V2Response.result)
  return _impl_.result_.Release();
}
inline void WhyRecords_V2Response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:g2engine.WhyRecords_V2Response.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace g2engine

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_g2engine_2eproto
